(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1001977,      18629]
NotebookOptionsPosition[    998002,      18555]
NotebookOutlinePosition[    998473,      18573]
CellTagsIndexPosition[    998430,      18570]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Finding Hidden Structure in a NN (MNIST)", "Title",
 CellChangeTimes->{{3.899643578108666*^9, 3.899643581720828*^9}, {
  3.89964372515622*^9, 3.899643755151266*^9}, {3.8996439004782667`*^9, 
  3.899643901887251*^9}, {3.899908149632354*^9, 
  3.899908159462082*^9}},ExpressionUUID->"2a5e0de6-398a-46f0-85d1-\
ef56e92a81cf"],

Cell[TextData[{
 "First, load the data and define the ",
 StyleBox["NetEncoder",
  FontWeight->"Bold"],
 "/",
 StyleBox["NetDecoder",
  FontWeight->"Bold"]
}], "Text",
 CellChangeTimes->{
  3.899879273632566*^9, {3.899908206546857*^9, 3.899908224759359*^9}, {
   3.899908268428074*^9, 3.899908280345195*^9}, {3.8999615867390842`*^9, 
   3.899961592015293*^9}, {3.899961685705503*^9, 
   3.8999616978655853`*^9}},ExpressionUUID->"7f3e9ead-0d57-4913-893e-\
29a272521e29"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainingData", "=", 
   RowBox[{"ResourceData", "[", 
    RowBox[{"\"\<MNIST\>\"", ",", "\"\<TrainingData\>\""}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"testData", "=", 
   RowBox[{"ResourceData", "[", 
    RowBox[{"\"\<MNIST\>\"", ",", "\"\<TestData\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"mnistEncoder", "=", 
   RowBox[{"NetEncoder", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<Image\>\"", ",", 
      RowBox[{"{", 
       RowBox[{"28", ",", "28"}], "}"}], ",", 
      RowBox[{"\"\<ColorSpace\>\"", "->", "\"\<Grayscale\>\""}]}], "}"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"mnistDecoder", "=", 
   RowBox[{"NetDecoder", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<Class\>\"", ",", 
      RowBox[{"Range", "[", 
       RowBox[{"0", ",", "9"}], "]"}]}], "}"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.899643629291602*^9, 3.899643629293592*^9}, {
  3.8998454879974947`*^9, 3.899845489661338*^9}, {3.8999081847201147`*^9, 
  3.899908186276101*^9}},
 CellLabel->
  "In[282]:=",ExpressionUUID->"52223c95-b99b-4d49-9620-fd87ea3b2aff"],

Cell["\<\
We\[CloseCurlyQuote]ll slightly modify the Neural Network from yesterday to \
see more examples. \
\>", "Text",
 CellChangeTimes->{
  3.899879273632566*^9, {3.899908206546857*^9, 3.899908224759359*^9}, {
   3.899908268428074*^9, 3.899908280345195*^9}, {3.8999615867390842`*^9, 
   3.899961592015293*^9}},ExpressionUUID->"4898254f-1e5e-4127-a468-\
a8fa0aa2e8d8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"uNet", "=", 
   RowBox[{"NetChain", "[", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{"32", ",", 
         RowBox[{"{", 
          RowBox[{"3", ",", "3"}], "}"}]}], "]"}], ",", "\[IndentingNewLine]",
        "Ramp", ",", "\[IndentingNewLine]", 
       RowBox[{"PoolingLayer", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"2", ",", "2"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", "2"}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{"64", ",", 
         RowBox[{"{", 
          RowBox[{"3", ",", "3"}], "}"}]}], "]"}], ",", "\[IndentingNewLine]",
        "Ramp", ",", "\[IndentingNewLine]", 
       RowBox[{"PoolingLayer", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"2", ",", "2"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", "2"}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"FlattenLayer", "[", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"DropoutLayer", "[", "0.2", "]"}], ",", "\[IndentingNewLine]", 
       
       RowBox[{"LinearLayer", "[", "128", "]"}], ",", "\[IndentingNewLine]", 
       "Ramp", ",", "\[IndentingNewLine]", 
       RowBox[{"LinearLayer", "[", "10", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"SoftmaxLayer", "[", "]"}]}], "\[IndentingNewLine]", "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<Input\>\"", "->", "mnistEncoder"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Output\>\"", "->", "mnistDecoder"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.899898385704184*^9, 3.899898392974886*^9}, {
   3.899900551030119*^9, 3.899900577483036*^9}, {3.899900850921194*^9, 
   3.899900851870042*^9}, {3.899900990309123*^9, 3.8999010140611153`*^9}, {
   3.899901062846739*^9, 3.899901078559599*^9}, {3.899961879321659*^9, 
   3.89996187943253*^9}, {3.8999639965270653`*^9, 3.8999639970070047`*^9}, {
   3.899976698705862*^9, 3.89997669883771*^9}, {3.8999768499567704`*^9, 
   3.899976923992935*^9}, {3.899976980524683*^9, 3.8999769912449293`*^9}, {
   3.8999771347154284`*^9, 3.899977134984256*^9}, {3.899977197544505*^9, 
   3.899977324006776*^9}, {3.8999773690754952`*^9, 3.8999773979234667`*^9}, {
   3.8999774678855467`*^9, 3.8999774680025787`*^9}, {3.899977518494232*^9, 
   3.899977537896653*^9}, {3.899977575442731*^9, 3.8999776225544434`*^9}, {
   3.899977721013257*^9, 3.899977721225989*^9}, {3.899977839061761*^9, 
   3.8999778831852026`*^9}, {3.899978044909256*^9, 3.8999780900570073`*^9}, {
   3.8999783065079217`*^9, 3.89997830710393*^9}, {3.8999783493319283`*^9, 
   3.899978417851632*^9}, {3.8999784493724422`*^9, 3.899978582207445*^9}, {
   3.899978666246871*^9, 3.8999786732556825`*^9}, {3.8999787624683743`*^9, 
   3.89997880114645*^9}, {3.899978874702281*^9, 3.8999788824183455`*^9}, {
   3.899978942719041*^9, 3.899978993170623*^9}, {3.899979051667548*^9, 
   3.899979053894326*^9}, {3.8999822223298883`*^9, 3.8999822241187563`*^9}, {
   3.8999822839150343`*^9, 3.8999823302209845`*^9}, {3.899983782370983*^9, 
   3.899983805601133*^9}, {3.8999842483196135`*^9, 3.899984273616583*^9}, 
   3.8999847097455263`*^9, 3.899985016346407*^9, {3.8999932885661106`*^9, 
   3.899993313839055*^9}},
 CellLabel->
  "In[295]:=",ExpressionUUID->"88808776-4c24-4770-a608-88ac5c33c6d8"],

Cell["\<\
The process of building a Network graph and training the Neural Network is \
similar. \
\>", "Text",
 CellChangeTimes->{
  3.899879273632566*^9, {3.899908206546857*^9, 3.899908224759359*^9}, {
   3.899908268428074*^9, 3.899908280345195*^9}, {3.899908335106683*^9, 
   3.8999083478077602`*^9}},ExpressionUUID->"6baafdb8-25b4-4957-8248-\
b39beb25f925"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"iNet", "=", 
   RowBox[{"NetInitialize", "[", "uNet", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"tNet", "=", 
    RowBox[{"NetGraph", "[", 
     RowBox[{
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<MyNet\>\"", "->", "iNet"}], ",", 
        RowBox[{"\"\<loss\>\"", "->", 
         RowBox[{"CrossEntropyLossLayer", "[", "\"\<Index\>\"", "]"}]}]}], 
       "|>"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], "->", 
         RowBox[{"\"\<MyNet\>\"", "->", 
          RowBox[{"NetPort", "[", 
           RowBox[{"\"\<loss\>\"", ",", "\"\<Input\>\""}], "]"}]}]}], ",", 
        RowBox[{
         RowBox[{"NetPort", "[", "\"\<Target\>\"", "]"}], "->", 
         RowBox[{"NetPort", "[", 
          RowBox[{"\"\<loss\>\"", ",", "\"\<Target\>\""}], "]"}]}]}], "}"}]}],
      "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"trainAssoc", "=", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<Input\>\"", "->", 
      RowBox[{"Keys", "[", "trainingData", "]"}]}], ",", 
     RowBox[{"\"\<Target\>\"", "->", 
      RowBox[{
       RowBox[{"Values", "[", "trainingData", "]"}], "+", "1"}]}]}], "|>"}]}],
   ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"testAssoc", "=", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Input\>\"", "->", 
       RowBox[{"Keys", "[", "testData", "]"}]}], ",", 
      RowBox[{"\"\<Target\>\"", "->", 
       RowBox[{
        RowBox[{"Values", "[", "testData", "]"}], "+", "1"}]}]}], "|>"}]}], 
   ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"results", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"tNet", ",", "trainAssoc", ",", "All", ",", 
    RowBox[{"ValidationSet", "->", "testAssoc"}], ",", 
    RowBox[{"MaxTrainingRounds", "->", "5"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.899901119243224*^9, 3.899901122414444*^9}, {
  3.899908295763466*^9, 3.899908307058897*^9}, {3.89996345389366*^9, 
  3.899963460860009*^9}, {3.8999773453597603`*^9, 3.8999773762789907`*^9}, {
  3.899977965245741*^9, 3.899977966105641*^9}, {3.8999828005493774`*^9, 
  3.8999828015065494`*^9}},
 CellLabel->
  "In[287]:=",ExpressionUUID->"185bd20e-b93d-420e-9e13-2035c0d7a18b"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   TagBox["NetTrainResultsObject",
    "SummaryHead"], "NonInterpretableSummary"], 
  StyleBox["[", "NonInterpretableSummary"], 
  FrameBox[GridBox[{
     {
      ItemBox[
       FrameBox[
        StyleBox["\<\"NetTrain Results\"\>", "SuggestionsBarText",
         StripOnInput->False,
         FontSize->12],
        FrameMargins->{{10, 5}, {-4, 2}},
        FrameStyle->None,
        StripOnInput->False],
       Alignment->{Left, Bottom},
       Background->RGBColor[0.96, 0.96, 0.96],
       Frame->{{False, False}, {True, False}},
       FrameStyle->Opacity[0.1],
       ItemSize->{Automatic, 1},
       StripOnInput->False]},
     {
      ItemBox[
       TagBox[
        FrameBox[
         TagBox[GridBox[{
            {
             TemplateBox[{
               TemplateBox[{5}, "Spacer1"], 
               StyleBox[
                InterpretationBox[
                 Cell["summary"], 
                 TextCell["summary"]], 
                GrayLevel[0.4], StripOnInput -> False]},
              "RowDefault"], 
             TemplateBox[{",", "\",\"", 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["batches:"], 
                  TextCell["batches:"]], "4690"}, "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["rounds:"], 
                  TextCell["rounds:"]], "5"}, "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["time:"], 
                  TextCell["time:"]], 
                 InterpretationBox[
                  Cell["1.8min"], 
                  TextCell["1.8min"]]}, "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["examples/s:"], 
                  TextCell["examples/s:"]], "2762"}, "RowWithSeparators"]},
              "RowWithSeparators"]},
            {
             TemplateBox[{
               TemplateBox[{5}, "Spacer1"], 
               StyleBox[
                InterpretationBox[
                 Cell["data"], 
                 TextCell["data"]], 
                GrayLevel[0.4], StripOnInput -> False]},
              "RowDefault"], 
             TemplateBox[{",", "\",\"", 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["training examples:"], 
                  TextCell["training examples:"]], "60000"}, 
                "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["validation examples:"], 
                  TextCell["validation examples:"]], "10000"}, 
                "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["processed examples:"], 
                  TextCell["processed examples:"]], "300160"}, 
                "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["skipped examples:"], 
                  TextCell["skipped examples:"]], "0"}, "RowWithSeparators"]},
              
              "RowWithSeparators"]},
            {
             TemplateBox[{
               TemplateBox[{5}, "Spacer1"], 
               StyleBox[
                InterpretationBox[
                 Cell["method"], 
                 TextCell["method"]], 
                GrayLevel[0.4], StripOnInput -> False]},
              "RowDefault"], 
             TemplateBox[{",", "\",\"", 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["ADAM"], 
                  TextCell["ADAM"]], 
                 InterpretationBox[
                  Cell["optimizer"], 
                  TextCell["optimizer"]]}, "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["batch size"], 
                  TextCell["batch size"]], "64"}, "RowWithSeparators"], 
               InterpretationBox[
                Cell["CPU"], 
                TextCell["CPU"]]},
              "RowWithSeparators"]},
            {
             TemplateBox[{
               TemplateBox[{5}, "Spacer1"], 
               StyleBox[
                InterpretationBox[
                 Cell["round"], 
                 TextCell["round"]], 
                GrayLevel[0.4], StripOnInput -> False]},
              "RowDefault"], 
             TemplateBox[{",", "\",\"", 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 TagBox[
                  TooltipBox[
                   InterpretationBox[
                    Cell["loss:"], 
                    TextCell["loss:"]], 
                   TagBox[
                    GridBox[{{
                    
                    TemplateBox[{"\"Measurement: \"", "\"loss\""}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                   Column[{
                    Row[{"Measurement: ", "loss"}]}], "Tooltip"]& ], 
                 TagBox[
                  InterpretationBox[
                   StyleBox[
                    RowBox[{"\"2.42\"", "\[Times]", 
                    SuperscriptBox["10", "\"-2\""]}], ShowStringCharacters -> 
                    False], 0.024178658583184034`, AutoDelete -> True], 
                  ScientificForm[#, 3]& ]}, "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 TagBox[
                  TooltipBox[
                   InterpretationBox[
                    Cell["error:"], 
                    TextCell["error:"]], 
                   TagBox[
                    GridBox[{{
                    
                    TemplateBox[{"\"Measurement: \"", "\"ErrorRate\""}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                   Column[{
                    Row[{"Measurement: ", "ErrorRate"}]}], "Tooltip"]& ], 
                 InterpretationBox[
                  Cell["0.745%"], 
                  TextCell["0.745%"]]}, "RowWithSeparators"]},
              "RowWithSeparators"]},
            {
             TemplateBox[{
               TemplateBox[{5}, "Spacer1"], 
               StyleBox[
                InterpretationBox[
                 Cell["validation"], 
                 TextCell["validation"]], 
                GrayLevel[0.4], StripOnInput -> False]},
              "RowDefault"], 
             TemplateBox[{",", "\",\"", 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 TagBox[
                  TooltipBox[
                   InterpretationBox[
                    Cell["loss:"], 
                    TextCell["loss:"]], 
                   TagBox[
                    GridBox[{{
                    
                    TemplateBox[{"\"Measurement: \"", "\"loss\""}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                   Column[{
                    Row[{"Measurement: ", "loss"}]}], "Tooltip"]& ], 
                 TagBox[
                  InterpretationBox[
                   StyleBox[
                    RowBox[{"\"2.96\"", "\[Times]", 
                    SuperscriptBox["10", "\"-2\""]}], ShowStringCharacters -> 
                    False], 0.02964244720414086, AutoDelete -> True], 
                  ScientificForm[#, 3]& ]}, "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 TagBox[
                  TooltipBox[
                   InterpretationBox[
                    Cell["error:"], 
                    TextCell["error:"]], 
                   TagBox[
                    GridBox[{{
                    
                    TemplateBox[{"\"Measurement: \"", "\"ErrorRate\""}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                   Column[{
                    Row[{"Measurement: ", "ErrorRate"}]}], "Tooltip"]& ], 
                 InterpretationBox[
                  Cell["0.930%"], 
                  TextCell["0.930%"]]}, "RowWithSeparators"]},
              "RowWithSeparators"]},
            {
             ItemBox[
              
              DynamicModuleBox[{NeuralNetworks`Private`NetTrain`index$$ = 1, 
               NeuralNetworks`Private`NetTrain`plotList$$ = {
                GeneralUtilities`TightLabeled[
                 Graphics[{
                   AbsoluteThickness[1.25], {{
                    Hue[0.083, 1., 1.], 
                    Line[CompressedData["
1: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
bXLcRvelIeBYEWn8y2cx/g8wQowJ
                    "]]}, {}}, {{
                    Hue[0.59, 0.7, 0.75], 
                    
                    Line[{{0.9866220735785953, -1.3052574303260058`}, {
                    1.9899665551839465`, -1.4031410478847728`}, {
                    2.9933110367892977`, -1.4627915589043372`}, {
                    3.9966555183946486`, -1.5144136938157389`}, {
                    5., -1.528085944978069}}]}, {
                    AbsolutePointSize[4.125], 
                    Hue[0.59, 0.7, 0.65], 
                    
                    Point[{{0.9866220735785953, -1.3052574303260058`}, {
                    1.9899665551839465`, -1.4031410478847728`}, {
                    2.9933110367892977`, -1.4627915589043372`}, {
                    3.9966555183946486`, -1.5144136938157389`}, {
                    5., -1.528085944978069}}]}}}, Prolog -> {{
                    Text[2, 
                    Offset[{-2, -2}, {2., 0.6450000000000001}], {1., 1.}], 
                    Text[4, 
                    Offset[{-2, -2}, {4., 0.6450000000000001}], {1., 1.}], 
                    Text[6, 
                    Offset[{-2, -2}, {6., 0.6450000000000001}], {1., 1.}], 
                    Text[8, 
                    Offset[{-2, -2}, {8., 0.6450000000000001}], {1., 1.}], 
                    Text[10, 
                    Offset[{-2, -2}, {10., 0.6450000000000001}], {1., 1.}]}, {
                    
                    Text[
                    Superscript[10, "-3"], 
                    Offset[{3, 0}, {0, -3.}], {-1, -1.}], 
                    Text[
                    Superscript[10, "-2"], 
                    Offset[{3, 0}, {0, -2.}], {-1, -1.}], 
                    Text[
                    Superscript[10, "-1"], 
                    Offset[{3, 0}, {0, -1.}], {-1, -1.}], 
                    Text["1", 
                    Offset[{3, 0}, {0, 0.}], {-1, -1.}]}}, 
                  PlotRange -> {{0, 5.015458422174863}, {-3.9450000000000003`,
                     0.6450000000000001}}, ImageSize -> {302, 182.}, 
                  GridLines -> {{2., 4., 6., 8., 10.}, {{-4., 
                    GrayLevel[0.3001]}, {-3., 
                    GrayLevel[0.3001]}, {-2., 
                    GrayLevel[0.3001]}, {-1., 
                    GrayLevel[0.3001]}, {0., 
                    GrayLevel[0.3001]}}}, Frame -> True, Axes -> None, 
                  AspectRatio -> Full, 
                  BaseStyle -> {
                   FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                    GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, 
                    ScriptMinSize -> 6}, PlotRangePadding -> None, 
                  PlotRangeClipping -> True, Background -> GrayLevel[1], 
                  FrameStyle -> GrayLevel[0.5], ImagePadding -> 1, FrameTicks -> 
                  None], {None, "loss", "rounds"}], 
                GeneralUtilities`TightLabeled[
                 Graphics[{
                   AbsoluteThickness[1.25], {{
                    Hue[0.083, 1., 1.], 
                    Line[CompressedData["
1:eJxdmHlU1dUWx68ggiiDYq0EV6k5Pe2lzc9SNy+HUsuUnLIspVJ6D5QS7Wa3
xOv1vuuVd71MIk7AEyfMUnF4Yg5YKE6kJmoOqeCIoAwyyvB+55y991nr8Q/r
s/b57bPPPnt/91m3W/jssM89TCZTr1Ymk/hvOx/S2fl1PJjEn7sYFGcoDjwN
R3I393zvpSzF0/LQvl1x6D7oeTI8LbJwl+LYPbg+B+3ZMHNP+ZYX4g8oNm3H
73ORt8H4cfDRtxt+we+3QQ/pLw/tG+DRCHvR1Nb5aP8JfpX+j6N9EyQNOhUR
Gn4SeQt8JvcrQN4MwcZuHaadRl4HVrn/GfS3EUoSt+Z4LDuLnAlhMp7fkddB
jv+Zpqr95/D7/0B3GV8h7+9c8ij0Vul5Xl8p473I+09p/ZRx5D/QngGHZfyX
OJ6+C944enTUZeR0SJDnuYKcAQ31H/vu/eYq28Pl+f7keI7HWN/N2nQNeSV0
lue9jrwGTtWG5Z+6jxybDgvl+W/w+ld23fxihGcR8iq4J/NRxPuv+Wpeu4PB
xbzfOJkf4kzwGuCz9bUXb/L3e2W+iNMgqix1zLaRt5CXQzeZP+K1UJjVr7zP
9NvISbBE5pN4BQyO2B+fYb7D56+Q+b3LvN7IZrCbOBU+kPm+h5wCfsXXzyVs
JE6GXJn/Et5vbro4YAnH9xd5H/c5/qtThcP77C9e3k8pciIMD1m+t7GslP3V
y/sqY/vWi70/nOv1gPMzXd7fA97vCfF5l4fIq+GYvE/iODgowg0uR3bh/Zbz
fnMcD9Iertes7rucv+8tG7CCz6/uv4LXXx4e+/eI/cRrsB4qOf/LeoxM6DGy
ks+j6oM4AYZ6djQyTLwS66WK81V749JLa6ZVsV3VTxWfd8uhdbYPSqs4HlVP
jzj+T4xqecKsWdXXI85H0Pev9DrrWY3swHqr5vwe/ah5nmtZNcer6q+a/X0r
rjukhvdX9VjD/vsHu5/y3kicivVZw/6K6yZ/8cuLtcyqXmvZf8qFbjkLDtRy
PlT91vF+o3eX+A4apVnVM7ENWpKyP6wrJHZjfdezv+w5lh92Tq/n+1H1Xs/3
NzNseFN0WT3fv6r/BuaQF/zH/PWbBj6v6ocGvq/fAi6svdf68f/1B3E8LBLl
537M+Vf98pj9vSbapUsjn0f1TyPHd9/ohqc3NXI8qp+I7ZDmbDAqqIm/V/3V
xPl638h+ysEmjk/1WzOyE7zfjlv0/uhmzo/qv2Y+375eE84FXGhmf6ofWzjf
s72eNkZcC3+v+pPYCs/evD3X8aCF71/1qylUcRxE3pj0affBxDbsX2IXHBn7
81LTIm1X/UycCF0Pdd35Zz5xPPY3sRXm91985Wf/VqF0ftXvrXj9OeP2Vo0n
jsH+J7bD8+L6V2pWekDsBMd3OyZMuk4ch/rgwfEWlT5pdCBxLOqFB/sbZHR7
UKQHf6/0Q9uXn7hWULGd2IV6QuyA8teH1f5Wq+1KXzyRU2BU1qZnfhxM7Ea9
0ZzZ2c+oAE/+XukPcTw0O76M/scx4jjUI2IHTK4rXPF2QGuOV+kTcQLsmPl6
bq8JxDbUK72+vWifVZqVfun1M0aIA2u70jMvzv+hXWIDL7YrfdMcLB9gxC7U
O2IrxCQNWPrdDs1K/4hTocAz2RAYvZ/Swza8vs+c+ssDhxAnoj4SO8BaJBqe
eCXqJbENrow7/FzNMb1e6SdxLLyaKxrQm+9D6SmxG9wi/AnETtRXYguUCPlZ
5c3+ld5qf8MCxhfMuqFZ6a8Pr1/7/X9r3ulNbEc9JrZBXVmXZ/pF+fD3Sp+J
LRA2deFbbbOJ41Cvia3ww8lbs+/U6f2UfrdFNkObQaNW5A1py+uVnhM7YdqW
H42KJI5FfSeOgJzgoHsLjxO7UO+J7dBJyE2gL++n9J/YArPE9U70Zf9qHhA7
IV/I92pf9qfmg17f/WKmodDEVpwX7fh7i5Gdi72JLTg/2vH687ujLu+OIo7G
eUJshgFGNyRna7uaL8QOcCa/+tycemIbzpv27P+moX7jgDgG5w+xE4bEtFj6
Lya24DwidsOK4k/X+51oz/7VfCK2Q6WQ40A/jk/NK2IXvCPKf6Ifr1fzizgO
NojtVhObcZ4R28CUUW1ULLEF55s/26cETpn9WR9iF847YifsXHAg5c1Z/uxf
zT/iWPB/2N2YMMSJOA+JLRDx8b/uNtcTx+N8DOD9DxunvwoB7E/NS2IXdBk8
duC+xZrV/NTr5xnVnnqC2IzzlDga7v67fd4+n0COR81XYisszxvyR1Y/4hiI
kvM2kP0PM7ohdUwg+w+R85fYBpUvr2u15Evt/5icx5rThZwn6e+/lvNZ28dk
eveduYd4LPSU81rbG0V7XdLx/C7nN7EdsoIijY7V6xfKed6B108evXbGy101
95fznTgG2iw6Pf/ZoZqvynnfgf3tNKZtxxnavlTOf+I4CJcJ0OsHyveA5sC+
YkNiM9yR7wNiGxwwbu9aAbEDkuV7gdgOkcJcob8fKt8PHZGjIViMw04d2V4h
3xPEVsj3EQOXOBbS5PtC2+cJeZqi+V353iB2Qg+zGIDEdngs3x/EFjj705Fh
89N1PJvle4TYBrF3xEAijoFJ8n2iv3/emA6Tb+v4vN4Q7xVtvzJRDIggtmfL
9wtxHDhdywwF0/bp8j1DbIe/yR9UiKMhoEi8b4jNcFuk7ytiG+yX7x1iCySJ
50Sy5n/K94/e700j+so92l/nJeI9RBwD5ULeL+nvj8r3EbExP41qPdOk45sr
30ud2P//ALY+GbQ=
                    "]]}, {}}, {{
                    Hue[0.59, 0.7, 0.75], 
                    
                    Line[{{0.9866220735785953, 0.0165}, {1.9899665551839465`, 
                    0.0132}, {2.9933110367892977`, 0.0118}, {
                    3.9966555183946486`, 0.0091}, {5., 
                    0.009300000000000001}}]}, {
                    AbsolutePointSize[4.125], 
                    Hue[0.59, 0.7, 0.65], 
                    
                    Point[{{0.9866220735785953, 0.0165}, {1.9899665551839465`,
                     0.0132}, {2.9933110367892977`, 0.0118}, {
                    3.9966555183946486`, 0.0091}, {5., 
                    0.009300000000000001}}]}}}, Prolog -> {{
                    Text[2, 
                    Offset[{-2, -2}, {2., 0.95445}], {1., 1.}], 
                    Text[4, 
                    Offset[{-2, -2}, {4., 0.95445}], {1., 1.}], 
                    Text[6, 
                    Offset[{-2, -2}, {6., 0.95445}], {1., 1.}], 
                    Text[8, 
                    Offset[{-2, -2}, {8., 0.95445}], {1., 1.}], 
                    Text[10, 
                    Offset[{-2, -2}, {10., 0.95445}], {1., 1.}]}, {
                    Text[
                    PercentForm[0.], 
                    Offset[{3, 0}, {0, 0.}], {-1, -1.}], 
                    Text[
                    PercentForm[0.25], 
                    Offset[{3, 0}, {0, 0.25}], {-1, -1.}], 
                    Text[
                    PercentForm[0.5], 
                    Offset[{3, 0}, {0, 0.5}], {-1, -1.}], 
                    Text[
                    PercentForm[0.75], 
                    Offset[{3, 0}, {0, 0.75}], {-1, -1.}]}}, 
                  PlotRange -> {{0, 5.015458422174863}, {-0.00945, 0.95445}}, 
                  ImageSize -> {302, 182.}, 
                  GridLines -> {{2., 4., 6., 8., 10.}, {{0., 
                    GrayLevel[0.8501]}, {0.05, 
                    GrayLevel[0.8501]}, {0.1, 
                    GrayLevel[0.8501]}, {0.15, 
                    GrayLevel[0.8501]}, {0.2, 
                    GrayLevel[0.8501]}, {0.25, 
                    GrayLevel[0.8501]}, {0.25, 
                    GrayLevel[0.8501]}, {0.3, 
                    GrayLevel[0.8501]}, {0.35, 
                    GrayLevel[0.8501]}, {0.4, 
                    GrayLevel[0.8501]}, {0.45, 
                    GrayLevel[0.8501]}, {0.5, 
                    GrayLevel[0.8501]}, {0.5, 
                    GrayLevel[0.8501]}, {0.55, 
                    GrayLevel[0.8501]}, {0.6, 
                    GrayLevel[0.8501]}, {0.65, 
                    GrayLevel[0.8501]}, {0.7, 
                    GrayLevel[0.8501]}, {0.75, 
                    GrayLevel[0.8501]}, {0.75, 
                    GrayLevel[0.8501]}, {0.8, 
                    GrayLevel[0.8501]}, {0.85, 
                    GrayLevel[0.8501]}, {0.9, 
                    GrayLevel[0.8501]}, {0.95, 
                    GrayLevel[0.8501]}, {1., 
                    GrayLevel[0.8501]}, {0., 
                    GrayLevel[0.3001]}, {0.25, 
                    GrayLevel[0.3001]}, {0.5, 
                    GrayLevel[0.3001]}, {0.75, 
                    GrayLevel[0.3001]}, {1., 
                    GrayLevel[0.3001]}}}, Frame -> True, Axes -> None, 
                  AspectRatio -> Full, 
                  BaseStyle -> {
                   FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                    GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, 
                    ScriptMinSize -> 6}, PlotRangePadding -> None, 
                  PlotRangeClipping -> True, Background -> GrayLevel[1], 
                  FrameStyle -> GrayLevel[0.5], ImagePadding -> 1, FrameTicks -> 
                  None], {None, "error rate", "rounds"}]}}, 
               TagBox[GridBox[{
                  {
                   DynamicBox[ToBoxes[
                    Grid[{{
                    Button[
                    MouseAppearance[
                    Style["\:2039", FontColor :> If[
                    CurrentValue["MouseOver"], 
                    RGBColor[0.27, 0.54, 0.79], 
                    GrayLevel[0.25]], FontFamily -> "MS Gothic", FontSize -> 
                    14, FontWeight -> "Thin"], "LinkHand"], 
                    NeuralNetworks`Private`NetTrain`index$$ = 
                    Mod[NeuralNetworks`Private`NetTrain`index$$ - 1, 2, 1], 
                    Appearance -> None], 
                    Dynamic[
                    Part[{
                    Tooltip["loss", 
                    Column[{
                    Row[{"Measurement: ", "loss"}]}]], 
                    Tooltip["error rate", 
                    Column[{
                    Row[{"Measurement: ", "ErrorRate"}]}]]}, 
                    NeuralNetworks`Private`NetTrain`index$$], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetTrain`index$$}], 
                    Button[
                    MouseAppearance[
                    Style["\:203a", FontColor :> If[
                    CurrentValue["MouseOver"], 
                    RGBColor[0.27, 0.54, 0.79], 
                    GrayLevel[0.25]], FontFamily -> "MS Gothic", FontSize -> 
                    14, FontWeight -> "Thin"], "LinkHand"], 
                    NeuralNetworks`Private`NetTrain`index$$ = 
                    Mod[NeuralNetworks`Private`NetTrain`index$$ + 1, 2, 1], 
                    Appearance -> None]}}, ItemSize -> {{3, 20, 3}, {2}}, 
                    Alignment -> Center], StandardForm],
                    
                    ImageSizeCache->{
                    222.3362109375, {7.328759765625, 11.978173828125}},
                    
                    TrackedSymbols:>{
                    NeuralNetworks`Private`NetTrain`index$$}]},
                  {
                   DynamicBox[ToBoxes[
                    Part[
                    NeuralNetworks`Private`NetTrain`plotList$$, 
                    NeuralNetworks`Private`NetTrain`index$$], StandardForm],
                    
                    ImageSizeCache->{
                    280.97934774167885`, {84.93960937500002, 88.659140625}},
                    TrackedSymbols:>{NeuralNetworks`Private`NetTrain`index$$}]}
                 },
                 DefaultBaseStyle->"Column",
                 GridBoxAlignment->{"Columns" -> {{Center}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Column"],
               DynamicModuleValues:>{}],
              Alignment->Center,
              StripOnInput->False], "\[SpanFromLeft]"},
            {
             ItemBox[
              StyleBox[
               RowBox[{
                GraphicsBox[{},
                 Axes->None,
                 Background->Hue[0.083, 1., 1.],
                 ImagePadding->{{0, 0}, {5, 2}},
                 ImageSize->{13, 1}], "  ", "\<\"training set\"\>", "\t", 
                GraphicsBox[{},
                 Axes->None,
                 Background->Hue[0.59, 0.7, 0.75],
                 ImagePadding->{{0, 0}, {5, 2}},
                 ImageSize->{13, 1}], "  ", "\<\"validation set\"\>"}],
               FontFamily->"Verdana",
               FontSize->8,
               FontColor->GrayLevel[0.4]],
              Alignment->Center,
              StripOnInput->False], "\[SpanFromLeft]"}
           },
           AutoDelete->False,
           ColumnsEqual->False,
           
           GridBoxAlignment->{
            "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
           GridBoxDividers->{"Columns" -> {False, {
                Opacity[0.15]}, False}},
           GridBoxItemSize->{"Columns" -> {8, {26}}, "Rows" -> {{1.}}},
           GridBoxSpacings->{"Columns" -> {
               Offset[0.27999999999999997`], 
               Offset[1.1199999999999999`], {
                Offset[1.75]}, 
               Offset[0.27999999999999997`]}, "Rows" -> {
               Offset[0.2], {
                Offset[0.8]}, 
               Offset[0.2]}}],
          "Grid"],
         FrameMargins->{{10, 10}, {10, 5}},
         FrameStyle->None,
         StripOnInput->False],
        Deploy,
        DefaultBaseStyle->"Deploy"],
       Alignment->Center,
       BaseStyle->{
        FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI", 
         NumberMarks -> False, Deployed -> False},
       StripOnInput->False]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], 
        Offset[0.8], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   Background->GrayLevel[1],
   FrameMargins->{{0, 0}, {0, 0}},
   FrameStyle->GrayLevel[0.85],
   RoundingRadius->5,
   StripOnInput->False], 
  StyleBox["]", "NonInterpretableSummary"]}]], "Output",
 CellChangeTimes->{
  3.899901124895726*^9, 3.899961913352907*^9, 3.899963533584425*^9, 
   3.899964073798602*^9, 3.8999767312223225`*^9, 3.899976829031491*^9, 
   3.899976969838479*^9, 3.899977023398877*^9, 3.8999771725443726`*^9, 
   3.899977220326764*^9, {3.899977383858082*^9, 3.899977395012635*^9}, 
   3.8999774758159547`*^9, {3.8999775247847705`*^9, 3.899977565147808*^9}, {
   3.8999775987233377`*^9, 3.899977619256916*^9}, 3.8999777233223467`*^9, 
   3.8999778325270586`*^9, 3.89997799067778*^9, {3.8999785196126547`*^9, 
   3.899978524046505*^9}, {3.8999785648519125`*^9, 3.8999785886625195`*^9}, {
   3.8999786520359173`*^9, 3.89997866445315*^9}, {3.899978950787146*^9, 
   3.8999790024037123`*^9}, 3.899979058596575*^9, 3.8999791215806203`*^9, 
   3.899982807613721*^9, 3.8999838626072383`*^9, 3.8999844125826654`*^9, 
   3.8999848186044936`*^9, 3.8999850686055746`*^9, 3.8999851883019695`*^9},
 CellLabel->
  "Out[291]=",ExpressionUUID->"1721c39c-a9df-4920-9db5-f758d9c60b90"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"tdNet", "=", 
   RowBox[{"NetExtract", "[", 
    RowBox[{
     RowBox[{"results", "[", "\"\<TrainedNet\>\"", "]"}], ",", 
     "\"\<MyNet\>\""}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"tdNet", "=", 
   RowBox[{"NetReplacePart", "[", 
    RowBox[{"tdNet", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<Input\>\"", "->", "mnistEncoder"}], ",", 
       RowBox[{"\"\<Output\>\"", "->", "mnistDecoder"}]}], "}"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.899902310705633*^9, 3.899902323495802*^9}, {
  3.899963556262054*^9, 3.8999635568900957`*^9}},
 CellLabel->
  "In[292]:=",ExpressionUUID->"214c0df1-468a-46a6-850f-b34404d1d650"],

Cell[CellGroupData[{

Cell[BoxData["%244"], "Input",
 NumberMarks->False,
 CellLabel->
  "In[246]:=",ExpressionUUID->"7a954f9d-5cf9-4004-ab2f-86e21c0e94de"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"], 
                    ImageSizeCache -> {
                    9.771662886600941, {0., 9.771662886600941}}], Appearance -> 
                   None, BaseStyle -> {}, 
                   ButtonFunction :> (Typeset`open$$ = True), Evaluator -> 
                   Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    RGBColor[0.729, 0.729, 0.729], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    RGBColor[0.729, 0.729, 0.729], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 GridBox[{{
                    TagBox[
                    StyleBox[
                    TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "SummaryItem"], 
                    TagBox[
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]28\[Times]28\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"], "SummaryItem"]}, {
                    TagBox[
                    StyleBox[
                    TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "SummaryItem"], 
                    TagBox[
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"], "SummaryItem"]}}, 
                  AutoDelete -> False, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
               AutoDelete -> False, BaselinePosition -> {1, 1}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
             GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], Appearance -> None, 
                   BaseStyle -> {}, 
                   ButtonFunction :> (Typeset`open$$ = False), Evaluator -> 
                   Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    RGBColor[0.729, 0.729, 0.729], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    RGBColor[0.729, 0.729, 0.729], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 GridBox[{{
                    TagBox[
                    
                    DynamicModuleBox[{
                    NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{20, 1, 5, 
                    5}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{20}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 20, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {24, 24}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 24, 24}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20, 24, 24}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{20, 24, 24}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 24, 24}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 20, "$InputSize" -> {24, 24}, 
                    "$OutputSize" -> {12, 12}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{20, 24, 24}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 12, 12}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{50, 20, 5,
                     5}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 50, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 20, "$InputSize" -> {12, 12}, 
                    "$OutputSize" -> {8, 8}, "$WeightsInputChannels" -> 20|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{20, 12, 12}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50, 8, 8}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {50, 8, 8}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50, 8, 8}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50, 8, 8}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 50, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {4, 4}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50, 8, 8}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50, 4, 4}, 
                    NeuralNetworks`RealT]|>|>, 
                    "7" -> <|"Type" -> "Flatten", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> DirectedInfinity[1]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50, 4, 4}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{800}, 
                    NeuralNetworks`RealT]|>|>, 
                    "8" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{500, 
                    800}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{500}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {500}, "$OutputSize" -> 500, 
                    "$InputSize" -> 800, "$InputDimensions" -> {800}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{800}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{500}, 
                    NeuralNetworks`RealT]|>|>, 
                    "9" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {500}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{500}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{500}, 
                    NeuralNetworks`RealT]|>|>, 
                    "10" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{10, 500}],
                     "Biases" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 500, "$InputDimensions" -> {500}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{500}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "11" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    NeuralNetworks`Private`NetChain`opart, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null}, 
                    DynamicBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", Annotation[#, {"Inputs", "Input"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]28\[Times]28\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 20\[Times]24\[Times]24\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 20\[Times]24\[Times]24\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 20\[Times]12\[Times]12\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 50\[Times]8\[Times]8\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 50\[Times]8\[Times]8\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 50\[Times]4\[Times]4\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 800\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 500\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 500\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                    Initialization :> {NetChain}], "SummaryItem"]}}, 
                  AutoDelete -> False, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
               AutoDelete -> False, BaselinePosition -> {1, 1}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[NetChain, 1775360, 
              Dynamic[Typeset`embedState$$], Automatic]], StandardForm], 
           ImageSizeCache -> {146.8, {6., 12.}}], 
          BaseStyle -> {"DialogStyle"}, ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           "Choose", NetChain, 1775360, 
            5913266951858067363235512803131107187760214892581293199912, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm, 
            ElisionsDump`embedSummaryBoxes], DefaultBaseStyle -> 
          "SummaryEmbedButton", Enabled -> Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Evaluator -> 
          Automatic]}, "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<11>]"& )],
  False,
  BoxID -> 5913266951858067363235512803131107187760214892581293199912,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.899982827436411*^9},
 CellLabel->
  "Out[246]=",ExpressionUUID->"9ee9b261-8c49-411f-bdfc-d2b4bd29bdd8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["%37"], "Input",
 NumberMarks->False,
 CellLabel->"In[39]:=",ExpressionUUID->"0db68241-ebd0-411f-b33b-0f854674b7b7"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["NetChain",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"], 
               ImageSizeCache -> {
                9.771662886600941, {0., 9.771662886600941}}], Appearance -> 
              None, BaseStyle -> {}, 
              ButtonFunction :> (Typeset`open$$ = True), Evaluator -> 
              Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.014925373134328358`], {
               RGBColor[0.729, 0.729, 0.729], 
               Thickness[0.018686567164179105`], 
               Opacity[1.], 
               JoinForm[{"Miter", 10.}], 
               
               JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                CurveClosed -> {0}]}, {
               RGBColor[0.729, 0.729, 0.729], 
               Thickness[0.018686567164179105`], 
               Opacity[1.], 
               JoinForm[{"Miter", 10.}], 
               
               JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                CurveClosed -> {0}]}, {
               FaceForm[{
                 RGBColor[0.631, 0.8160000000000001, 0.498], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
               FaceForm[{
                 RGBColor[0.40800000000000003`, 0.627, 0.196], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {15., 
                79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 103.}, {23.,
                 103.}}}]}, {
               FaceForm[{
                 RGBColor[0.38, 0.753, 0.89], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
               FaceForm[{
                 RGBColor[0.24300000000000002`, 0.608, 0.71], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {29., 
                79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 103.}, {37.,
                 103.}}}]}, {
               FaceForm[{
                 RGBColor[0.584, 0.51, 0.8390000000000001], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
               FaceForm[{
                 RGBColor[0.4, 0.396, 0.659], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {43., 
                79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 103.}, {51.,
                 103.}}}]}, {
               FaceForm[{
                 RGBColor[0.549, 0.549, 0.549], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25., 
                95.}, {25., 88.}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39., 
                95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
             ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
            GridBox[{{
               TagBox[
                StyleBox[
                 TemplateBox[{
                   TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], "SummaryItem"], 
               TagBox[
                StyleBox[
                 TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                   StyleBox[
                   "\"(\[VeryThinSpace]size: 1\[Times]28\[Times]28\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                  "RowWithSeparators"], "SummaryItem"], "SummaryItem"]}, {
               TagBox[
                StyleBox[
                 TemplateBox[{
                   TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], "SummaryItem"], 
               TagBox[
                StyleBox[
                 TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                   StyleBox[
                   "\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                  "RowWithSeparators"], "SummaryItem"], "SummaryItem"]}}, 
             AutoDelete -> False, 
             BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
        GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              Appearance -> None, BaseStyle -> {}, 
              ButtonFunction :> (Typeset`open$$ = False), Evaluator -> 
              Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.014925373134328358`], {
               RGBColor[0.729, 0.729, 0.729], 
               Thickness[0.018686567164179105`], 
               Opacity[1.], 
               JoinForm[{"Miter", 10.}], 
               
               JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                CurveClosed -> {0}]}, {
               RGBColor[0.729, 0.729, 0.729], 
               Thickness[0.018686567164179105`], 
               Opacity[1.], 
               JoinForm[{"Miter", 10.}], 
               
               JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                CurveClosed -> {0}]}, {
               FaceForm[{
                 RGBColor[0.631, 0.8160000000000001, 0.498], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
               FaceForm[{
                 RGBColor[0.40800000000000003`, 0.627, 0.196], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {15., 
                79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 103.}, {23.,
                 103.}}}]}, {
               FaceForm[{
                 RGBColor[0.38, 0.753, 0.89], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
               FaceForm[{
                 RGBColor[0.24300000000000002`, 0.608, 0.71], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {29., 
                79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 103.}, {37.,
                 103.}}}]}, {
               FaceForm[{
                 RGBColor[0.584, 0.51, 0.8390000000000001], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
               FaceForm[{
                 RGBColor[0.4, 0.396, 0.659], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {43., 
                79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 103.}, {51.,
                 103.}}}]}, {
               FaceForm[{
                 RGBColor[0.549, 0.549, 0.549], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25., 
                95.}, {25., 88.}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39., 
                95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
             ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
            GridBox[{{
               TagBox[
                
                DynamicModuleBox[{
                 NeuralNetworks`Private`NetChain`assoc3 = <|
                   "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Flatten", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> DirectedInfinity[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{784}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{100, 784}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{100}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {100}, "$OutputSize" -> 100, 
                    "$InputSize" -> 784, "$InputDimensions" -> {784}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{784}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {100}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{20, 100}],
                     "Biases" -> NeuralNetworks`Private`DummyArray[{20}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {20}, "$OutputSize" -> 20, 
                    "$InputSize" -> 100, "$InputDimensions" -> {100}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>|>, 
                    "5" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>|>, 
                    "6" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{10, 20}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 20, "$InputDimensions" -> {20}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "7" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                  NeuralNetworks`Private`NetChain`opart, 
                  NeuralNetworks`Private`NetChain`part, 
                  NeuralNetworks`Private`NetChain`selected = Null}, 
                 DynamicBox[
                  GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]28\[Times]28\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 784\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 100\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 100\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 20\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 20\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                   GridBoxSpacings -> {"Columns" -> {{1}}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridFrameMargins -> {{0, 0}, {0, 0}}], 
                  TrackedSymbols :> {
                   NeuralNetworks`Private`NetChain`selected}], 
                 Initialization :> {NetChain}], "SummaryItem"]}}, AutoDelete -> 
             False, BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  NetChain[<|
   "Type" -> "Chain", 
    "Nodes" -> <|
     "1" -> <|"Type" -> "Flatten", "Arrays" -> <||>, 
        "Parameters" -> <|"Level" -> DirectedInfinity[1]|>, 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{1, 28, 28}, 
            NeuralNetworks`RealT]|>, 
        "Outputs" -> <|
         "Output" -> NeuralNetworks`TensorT[{784}, NeuralNetworks`RealT]|>|>, 
      "2" -> <|"Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["

1: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
FoOvdQu5NNUIGVf86Idl72HXnj10v3UfKbEJJZkntOCChCdejHVCr3eiuD3f
Dt1FdWFw0Wu69kUJTCzKpxdOboXD/PdYGGvCWQ+r0VDWkDgrfCcH+lagVcZp
UO4zQbkN/zhsUps54j9k9mBADevuHgZGqAJLdFsbN1ztBo9GITz02x42b7Sn
bfL8GOscx6Y3HweNA0gD5qVBknw4vRf5lOjXMPi0PRtXtaThogIReHHpMKu+
/6CZXpwEHD6uCGNDJVR900xYdW2Amb7HHYacLuDnf51zQqKFeJjYouW1JnZn
ZhYbuFIHVv48iPd//KICC4eJV0kp+p96h2tdKMttssXfnicad77bbxrXngM7
PyfirKUSVKJoObm1Oo44yJ/ClaMbsOHyXcbet5bqPPhFz9nuBP+RszjP4Qrp
vP2SpG3Igz3/5lpviaFOGanoFqCPE0qIkdtW4DGbZ/jyeCDRzJemJg3ReL7H
Bg85n8J7Yatgz4ZlmCSViDF66bhFYz58c7hM4m7tguQfdaRr02489vMl86wx
Hs29Hcx0adU/d01i+24NUw91W5TcwoX9Qwdob8RlAL//8NMZS2w5+od0dtrS
/yyz2DWNnkTSeQGsV2okhv5icH6rJKonuzfc4w3FSlFBSHy7l9ZUaMODk0hD
RCS5Qkf5UG9xDlgKZbOXzRVxyjGfKtyRgzg3PnT7ugcPyGzBbT15YEwugAK3
gbgbldI/MmVkZ4k/KbhTzEh/lgMNPX8wcRFhZha7Q/blBeSxRDv9LK8DxZFl
7IN+DnM44S+JZR7SR9EKeP/aRuB9sgl5e03Iivc6zHhfCt2XbYGei93Q65ca
/nz7lVbUX4DnvnEQ3zNK3E354OREBF4Pu0zPL/WFab4WjVMqVWzkqXkYL6eK
y94K05WG/7huwVwU6CkzO//zHhv/YytGeoZjju88CL96jshNtjNdBy5QvRKC
032Q3O8yZgvt7sCNnizE96Kg8dEffPLXQqrWL1CMu8nm8t6ip0Vr4JDCH7bx
tgA3bOAsWfvvrQqv62HNaBHostb0kXEQ0arPZn6IcqjZlqU4fV08W3ZWi/w5
xmW1wufj9MM+7DpHObgh9YManPjATOvNIuT2AFGJXsOKC/Byt5awoP3kOcl6
5Y+O+8zxxOyloLy9gwZ2UJp0UxB+KTTg9U0bkRh6olJGPrbXh6IgMaKtE+cI
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
ckRYmXT4R5GCBRfgQ0guqdjpipUFH8igjR6c7van9n1JNK2IxdhTDznLT1Lo
l65BLzoexWmNAbinp4QIrlODrXmR6H5xDh7VL8DcpccxqsgPRq7L4ZRbnqCe
HUAv8h2vEx/eVaskrwWCuYXc1xkpVDdwN45c2gXLn+2my/5mkT24D/sdN5KX
O5SgRXchDA8mYwr7gP7esgLUJ+fAIztvuv24EC+rYCrefZtETStN6TuTTuYU
vwjQrFrY/fMpdT7gShOExHDZeXmMC75CpnWmQPz2XsJvOBMfzl9IrkyNIc9v
ZMDRmU4wOmsNkfRsJUp7XpLZ6m5Y0eJKJdW7qYJkIe1olYQNM0VwfJkwht7Z
BUGL7UhH2yiZbCiDFX31dODHd9qybTpPLKyY+LHJJmE2r2jXtX0Q6mgPnoNC
eKh/MrvB+zFpUNyMNu3jpMvIjtpIiwI35SV9vHQpGDxrJw2nZ4Kffg53dRZS
7b8RUDyeASusxYC/1A6YNeLEgyTCgWAr4Hb7wE6tM7Rohj1dmR4IgZsmmA/1
90lAqCKNoCa4IfbfnXuXGdOgE9Cq947EaQeh/uNQnOunDbFz+8mV9tMomVND
Zg7KcClmY6TSu6gu5uUGiDqxjeqnOoFm9zDTFr2BNMqIouTf6Xj9eiq8fxzE
RbW4wyTVXDxqkg8NqnvosaGrZLjzIT3+Lp2M6/+gC557w5zWQRA2dzVpVOfR
3YKGOJqgwugZCWGc7hVGbswGOhVtwVZLHe3rNaHr7iaIep1FrQdC8XcZByhx
C83WDxCVBVn0yHtH3Ng8k5SnPOEkBqW5DPnXNN98Evve+hTavtyAHd/24JLO
UXLj+lX4r+ULFe8YIxvrb+CMFVvp0LQr3JOA2VBkOBU3iVVyOUfMECOzaH6o
PrawV8A+fCaGNAxS6XZ1yvtSU8e3+yieDUimNqk3uFRhOfDSGCWV1UVkxw4D
6PX6TKaXmeDH2Ds0do8fF/7yOQYFJpFb6mr4cccnlP6pSVH3JylIzsAI/4Wo
vqgSxjokqKyqMp7UN8JMo4dE3DkLhxonSF3+LHp3XBvzrvfQre6bmAWpZvBp
gyTcXLsPO2VLGanDD+l6Gwdq6mhHrykFc8LvmugOj2zi6aKOme1zafJuCVJm
wlDg6ybiihJk6uBltBjrp33bT5CqqnFS98Ad6kd9EGuNwCQ9GoQzOumOiTxY
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
enUvVkTZoWT2XPiYuxwlKoLRyswAhm8d+bdH19LFD4XA5U0NybjRSStS3PC8
cT/onblDsiPPkX3nH8PYGX4SNuiNo9PukbK1N2jbPnUiL8sD8SIrdNRLp/G7
U6HT7RXKkTC8u7CStgcoYoSVOvmlYIkz+cIhgi2BgEkiNPVIGA4utMMjlZPR
svE+ue6/GapniYBR8F7UCaAYKxWI+2s/m6R/zoecU+bkpI8GBE4qIlvvriMV
B4pgqUwMpj7yhNcrCplTtSLQtF8ZLY6pgZ32QawKlOYN7tPAo1rduL9vHwzd
voZ7S1QhqVSPTpuII5GnXYnDm0GqpFfOdKrPhqjJxTCpcTHmdfGZaMw/SGy/
zwPtRB4IhrnjnWpBsvvEv2ysW4cPD8tAqIgZ1fG5wdFeYfx48wHdLZ4Mhqt2
ccIPGUgqy6bL2nJg1X139CyWIxOLRODYXV18fMECnXV3c26//5Kl76oYk4S9
VOrdNCKrLYuCt40gKDuCvPowSG6Hh6GH0Gy2aNtHmvpDEM+yM9gt+/bj3+Ep
sCbfiBQTPTAp2o8VuuNgcOkbp2L/mcs+qoyPW5JIg1MTtmVvobrhl1B0eQ79
2Z9LVdY44udsBWJU8NB41ccTeCdj3EQiJY45ZzANDf2PkVfTbWHJjWR6PvwT
SfwWQdJTW0j2qs9ELWo3iJQ/pIt6kqj/DTe0fLwb/bIduRdLGnDMLJHLlzyB
LjsUsf7WZcqs+M9ks0U8rPNOxvc1spjvo4JfqAWq699nFgadgzs31cjN+93o
INxLmv07UOhzH4ejJ7ArSgktcqrR0ngFuoo2kLLF3zmPPTVUNN0SDGVa6ebR
Q0TkVBe9tjwMczbJ4eebi3DptE7iqyGFt8xZZqPJfHz64iRYKvXVavASsOLG
LHT87Un+bpYkP75vwHfl54nCQBXy2yuSrg1SeFF9CaqtLqI+5xag3tOHdGJ9
Gx59tApmrZxCvfZ00YvzNXH3hh9cANcHHiEZjP3BDDCPUsH44XDc2LMITwn9
6+r+XuLZ/ojp82knq19bYdXfdNo61MjMP+CAQQduQ1HIS2ZLZxenvsqJyLyO
wmkB+bh9sTTX0NhKzsbyGLFdJuBhHQHvCx7h7aEyYvnFCg7stAEr6SRIlDTA
eqXb9GNHPWZHbcMzKy5h9IZyDKhwovKRPszYvfuYLq6IA5aa9OMjF9w1txGC
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
tYlZSa6lSmDPAhX82dfCKQpUwaK7J9DCQxTZB0IQHlrLbDwezv2P4fJwyLEL
w3hDW0ta0tCgQWmqnnO/VJpSkRYiM4pCGZG0l5SmBhpKVEhT73Pu9yuJREVJ
ySgzK3tTPv/COdd9Xb/f7qR7dPOWeqJjVEKWOz6gae/24U21ZrCw6G/5kDdK
fucdoma2Yez6xFAwuZtMfpunMuvu++H1sSAU4qjTxfuLqJkoH069YYdnLqTh
bZJAbusJk9vZouRamCqkikuhblcWPpzVTA4sm4p8zfF0R3UNnPIWpZEin1Bi
YzEzfE8B+PWVUd1VAt7Uf6P01mb2rdx1nHlIlOjbptEVXk2kupsP4sZmou/f
X/TFzXYqwTGisuptlr4ZaWxO6jh98fgiqn9XQ1uDBkb/8kJ4EV0JNHMPzdw+
Sm0F7ajyd20IX/ab8Cr6IFwlEdr2bYWSeAM4omhH33H3Y3HhcjzQvoXw8eXC
jiEh6Fghzp2qJQtdl9eRL519VEj9J9v65BE1njRGe3zAVufcY10tnkJN8G4c
jlWEJaEX6Y1L98mW9gGi+5ylelNektQOc/JGQQhvXJTGGyV9dPjJOhId0U+0
cyNp+a5D3JBCQg4Z/KEe0Uqo9u9+Zu/JQ1HVHPiyYhYqBNVg/jZd1K/9jZs+
nKP29d4YYboAtF6bwxLVOWAzdJ7yjQhCuNh2Kngkgp5ZHYvlA/UkMUcPE3Nj
Mf3bXEbmiS2qiXawwtHqWMTdiZ5bXtGNbwPRZM4ANGzosF7+2RbINxGM3qxD
vEWOWPclCuA00UqsanOGPt35MMrZy+Zf8GDfK2vA92xrVL7kSQ2FcvClzjSa
nsPDp8NboJFPA44liMDpyX70vV2DDY+WwKeJLlzC9cW/HXXs/ubVsHFFNj7a
fR/CO7Xw51EnSH7nCGnO4ui35Cl7+088SbD4wbqurKdX1grCvfC3VNFBmWqd
t0auSCG6THlPLZf3sAbz9mPdl//op682+GzXOnzsy7KT/TnEt3C15YOv6Wh3
/gRMZY1wR0gK65OiSB6ul8ao7kvQMBbG3tYZpFoPrpEekUVYfmqOtf4CLr3J
l4F5EyWoo/uR+izVgXc2YxjsqUTmr71EjsSX00c8dYo/dtIApwGSeLuQCGzg
wycqknhZOQ6++1wlvu0jmH3tJAoEdOMJhxtIw9vJ55y3hL5TJdOuHoN9RsO0
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
P6CgO8Lz0bw32A+87WcGTg==
           "], "Biases" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5CZAsT5tX57nL5J
7WHOnLs7vnnn7hVyh3ZLNOjYAKUYGq7N2fPKe+Lue9/P7Xbm3bmbAQmYOEVa
e6Xz7Jbz2bJ7s/O23ef3fN69Vfzlbj+dYtvo5qu7C1v4d19dvHi3pea73c+v
s+6JiLDdE8l8freb7zawORuVu3cn2QWhmJm57YJ17ipVG9nTzHu2zuSyNbBf
vPvihmW7FZNv7N5wyHFPErOtNUjdJ/GWPft+pO7pZruye8rrZbun6pzcHXV8
9e6es867Pyry7j0dwmZzj+nr7k2P+3dXbTu6+7rhqt2XFWbtnnVtBVh/4rm8
3ZoR33bFyJ7dfWzChF1ySUY2LR/Xgd3CHb9xdw0b/54nsYd22/Oq7t76Y+fu
1iBZmx9tfHvqbFfsTvmyZ/cF0zbreJsWsPrdj3z2gMPDyHf3n3rmPS3bdu5O
k/5rc3xr/+7MeYx77nwoAKu7VcW/xyuKdbca/wlw2P4O2bin4uuzXT/K5Pd0
Jn7arZt8ZffV4yd2AwBjwb8r
           "]|>, 
        "Parameters" -> <|
         "OutputDimensions" -> {100}, "$OutputSize" -> 100, "$InputSize" -> 
          784, "$InputDimensions" -> {784}|>, 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{784}, NeuralNetworks`RealT]|>, 
        "Outputs" -> <|
         "Output" -> NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]|>|>, 
      "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
        "Parameters" -> <|
         "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
          "$Dimensions" -> {100}|>, 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]|>, 
        "Outputs" -> <|
         "Output" -> NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]|>|>, 
      "4" -> <|"Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["

1:eJwVl2k4lu/Tx8mWiDZFWQtRiWjjvmYkaVGhiLSitKkU2ilrQkKWFhVlqZQW
inJfMyG/0EKUSlqo5J/SviiVp+fFzHGcx/lm5pw5vuf3Y+DjP3dFDxkZmcCe
/9Jc7y12AQHe21wV///g673WynLt/18O+BfL/0VTyWixI+qiaPq8QTx+dbB0
3Z8ZIPS+im5VFnhmZCTce6jE78dZ8u/yBeJ8j9uCu7CPcgo2wsO6clxxYiMH
HVOmvIgguDcsDrtP3CT5EVMp58tqcDOzw8SbF+hHdhJP0yilOwl6eOeIKz3d
pgFQNoO9juaI5s818MSRG0Jvn/4Uc+k/GrQ5kJfGD7/2MPQMpPxci48n66CW
fRh3b/Pk4oxY/mSdxOXP5UsKd2ykra+ced+MMZJfvU/DuA+FYB6sgjsC86CH
fDkmXh8IbZGt8OD6ftEn+Ln4qmYQKK6MwJIRo/CQ3EzsjHeGnNlh3KJfL0RM
iQG9z2/oj6EWeT0rZPUxvrB+hTG/ts/hsM0S3LRAVZxumA479sizWOwgiAuV
uMvpNr3L2E9WcrKsZPGJFmnrYV/netozrqc0sX2v0PFkH8y8vUPsVgik2YbZ
+FtzA87uFc7Vz+5zxGtH+G7qjnpPf9C8n18kleXX4H9l7nyjyZwHQLXQrHSA
TL/kkWHtH5IqaGOakxId150kfrH14ymVUThGUsgXOydJe1cMg9LzvaAzUxHX
OdRJlCONQHPIXn4yU5EFg0n4ytgMI+rU6ZOKr/htfB+xRGcV5XlPoniXF9T6
IgG275Wl0pgKQcclh6L+90V0GLlTODHdgFQyJqHCPX3Q3VoErSZD2WOkG1ef
lcOh1vH0ozUQ/fQiaaHGRLRQiALwPAB9t87H+WsHsfmK8zjiuC8pFjigt4Eu
ZPbox7sWpMHqC5uoxj1OBKOTVBOljPrfO+jAoRgYEHOUIkLVODtkk7CxbTeq
PPcTlHs20/cHQSXtYxKkdhNleOnralJRrxD6ju3Lbuf68VfFEL4xSpfjvveh
1g3WQka7s/g1ZYhYtDaaA269FxZPVMe6LYM5btw16gh+CfKZP6D8VQqkKsqA
QsEE6LrViC2vH9LWntbYo2q2+Of6cTiqYQoNITvwXq0CXph/B6I3y+KG4d0w
wkNDHFT8nVZ9e4RskSUuXLUUq+s2UK7qcN4XHS0Y3PWjy2Vp2DbSFRTcjHCh
dwlVpuXRBqkpOLTehQHWbjxhcTIurx2Jpsfegdm0y/SmuC8bbvXkoKgwXvvu
IVjl1EDY73LKiZOHhXc1cEaQGc8ZpoDVDu6wZtk8rogkm5GyJty2VwShJI7v
ht0SX8zfLNi0jxCG9QwDmanjxfDKNbig8iZZuYbAnLC+omzeY+FTr5fC4JR3
dL7mHRyMOA2LArvFz9dlMGXSRRhzfTyF+YoQcucZ/Bcniz+bPSQ+ea9og4we
X5hnjNr3ImCizAvBpuAryE1rB3+7A8JHtVm0oi6MWi+r4c6aOlJ/vxKKh/TF
9gJjbt2VS4M1ppaorPKivLMdMCspQdId9ZVehPqw7MVC+lzvzkuDH8OuyuEk
FCL1ydKn2gZTFux6ooVMl3C6IgO3OOvjf0PSxfNOpZTS/6cQsnc8RL9xFW6N
mgtH9Sdh20EFWCE7CXs+fAXLQxG3jLoKMSMF7mUQiytXbYcJbq3Sy563RYNb
diC39ggNGLwR/Z8Gic5reqJhbw3+y3vYTlQl+mJIasMSYH5oP9zSTPD75XMo
GKbBe2RMcMfWUni3IR+s/cfhcasNKL8xni4OHIZDpoXTrvByyPfOoiGOQ3lv
kBX/UI2jS8dsqFq/P9Ta/KWtS8Jh3Upz7iuvx/NVNuDhdxqk8dWE360MZINu
A45qyKS3VvKc5bMSh54058npnljtXAwLZz6FHQqyqGKyU5pS7otjf6hjg+lO
0P/4hkJ+qaJzvgw/a2B6VPmDxsWO4xn+Vnztcwe92VAnyqU+g6mDn4D34ARo
MewtNsj804sb5fTt7z74+TUXwj6NgpD7+WC1fAKOb+yF69st6abGG4oen0qq
ty1RQXobDF+7wfThpmx0N0rqpdUbD85k7I/xdMpQBvNNS4Rd0XI4M0YfzPYN
5CZrZRr15yXcfmEAQsIsupd1FF5kqeLvc0lcWuMB5humk+iRwNdePxbdf9bD
pvtz2HrmG1g8fSh/o9vQOncf2V5P5yVq9+CImxnMTR1LNxq1GH/L8Ig1f2BC
vi7HxHnC71YDXh3qgQPbkoWcux3C2cnPJIHaI9l99F1onH4BUju1cGJqJ429
3hdtVA7QcvCmj22HbKr6PKMMXVd8fdeLq5eOxPjtCVw+Yi7VauTToOhlnLqp
BxvfyBFj77vivsWyVK+WDPf9sslWZS52tdtjuftA1AoIgVTf4WzuJOFDXU4E
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
TDiTVQ+Lljqyv0kf6fThL0i5VI3+D/JyQQA=
           "], "Biases" -> 
          RawArray["Real32",{
            0.004835105501115322, -0.0017651939997449517`, \
-0.01112627424299717, -0.007596729323267937, -0.003760440042242408, 
            0.03968731686472893, 0.012268041260540485`, 0., 
            0.02069690078496933, 0.02921321615576744, -0.007181017193943262, 
            0.02068011462688446, -0.016210881993174553`, \
-0.014452315866947174`, 0.003978115040808916, 
            0.0545099638402462, -0.028320765122771263`, 0., 
            0.0024048490449786186`, 0.03978221118450165}]|>, 
        "Parameters" -> <|
         "OutputDimensions" -> {20}, "$OutputSize" -> 20, "$InputSize" -> 100,
           "$InputDimensions" -> {100}|>, 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]|>, 
        "Outputs" -> <|
         "Output" -> NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>|>, 
      "5" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
        "Parameters" -> <|
         "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
          "$Dimensions" -> {20}|>, 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>, 
        "Outputs" -> <|
         "Output" -> NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>|>, 
      "6" -> <|"Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["

1:eJwViXtMU3cYQGvBChXRdQ6CLx6pD4ZIBQw47vcVqUAQQxYUjeKjpcBmBiiP
IIxFQAHFSKtWmVMpMlBYZW6T3IFwf98NIVFGRBjyGAooGEKiM7NVMYLg8I9z
kpPjmXA4NlkqkUgyHeYUqzu6JSNDl7tD9imSdCkB/imfpnyOpXPo/b4U989u
QvGlD7OsnYQ38lpOutPMVluMqJu3Aq8ethcnklahLPBfduJOC1kvPhS6p4/R
/IJpltH3HFULl1BU50lh1FtAQ/qIcLZjCF0d0/Hyq1xmyFDhQEwlu959nvhG
EG/aOmh/6QYsGfmLu7WnCldqq9mo00mhfXcnzG5ZTA51ciLo57bWSFmBSosX
iv7DYOYuqpouI3/eWdzMFVOp03GSSTXos92ZGWcXYv2zX7F35il7PZhKVxpr
0Vsyxr6xd6PjCUWYc19BXw14Aa9LpS7HPGwYlKqj13mifWY/l/ZhG5SV2wvN
6/8htzPZGGob/HOooxDrP1+utnpk0Q3eIkx1FZId78q0NW3cVHgDPedGcMaD
F246O9GN8SCcKHvG0jRGWPJFJRwtfAGv1Qn0NvMgKf1cxM9KTdilD2FKhRkS
Da5Y4eSGen8LGqvWsKtP1uBOLEJN7gnKT9BS9oGfMbLGQbw0c4eKPDox74gJ
fs9fgbuaAzHYkk3mfecgB0bhcXgPjbX8TfUjWZA7PA4VdcPCrpBINhUWgoaW
A/RuGw+t4CNEVLSDIf8F3I9YLDZly8Sg5A9s9o9oOnjBhCrTT9TsK8d9AZwY
VFLHbEPx7LTXAMZ9bUcmmY2ld7nTkYE2Cgv9gZa97RHWpY6GJL9sYJr+Wgpf
Xc6UVWOgU5qx9t5d3OS3jC4m2gkPrI5i4IbbmOQeg9PfV0PY3o9wb3svFt4O
FeMqvxUqLhmhIMqKaS2HxMG4djyli8YdVROY2MywePIcLI18z3yHPZn//Ejo
69uLsZ6tkD5+DeNjTuF1bTe1Jroym3cbV6zQ4S9J65GHR1icE0gGayPc/bEX
8uaVkVvDU2oqX6B21peAPN+fUlKy6Bb/EBulUfhbXbxg6H+AHxVKmmyXY/Da
jVid5wKdGi/xSUklDffsId9FEuw1K+g7/QJq4gPUETJv8fRuF/gf+H6Pmw==

           "], "Biases" -> 
          RawArray["Real32",{0.051319703459739685`, -0.10444667190313339`, 
            0.029307706281542778`, -0.0047171348705887794`, 
            0.039453137665987015`, -0.03209299594163895, 
            0.13761655986309052`, -0.048943355679512024`, \
-0.04056330397725105, -0.007703057955950499}]|>, 
        "Parameters" -> <|
         "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 20, 
          "$InputDimensions" -> {20}|>, 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>, 
        "Outputs" -> <|
         "Output" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
      "7" -> <|"Type" -> "Softmax", "Arrays" -> <||>, 
        "Parameters" -> <|"Level" -> -1|>, 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
        "Outputs" -> <|
         "Output" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>|>,
     "Edges" -> {
     NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Inputs", "Input"], 
      NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
      NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
      NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
      NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
      NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
      NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
      NeuralNetworks`NetPath["Outputs", "Output"] -> 
      NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"]}, 
    "Inputs" -> <|
     "Input" -> NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]|>, 
    "Outputs" -> <|
     "Output" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, <|
   "Version" -> "13.3.0", "Unstable" -> False|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.899977052258512*^9},
 CellLabel->"Out[39]=",ExpressionUUID->"80ecc5f9-4fc7-4497-ad5d-850c4e883205"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Measurements", "Section",
 CellChangeTimes->{{3.899909526315485*^9, 
  3.8999095339702168`*^9}},ExpressionUUID->"fa2104ae-bd4a-4297-925c-\
ec46ad74fc80"],

Cell[TextData[{
 StyleBox["ClassifierMeasurements",
  FontWeight->"Bold"],
 StyleBox[" performs a variety of statistical measurements on our trained \
Neural Network. ",
  FontWeight->"Regular"]
}], "Text",
 CellChangeTimes->{
  3.899879273632566*^9, {3.899908206546857*^9, 3.899908224759359*^9}, {
   3.899908268428074*^9, 3.899908280345195*^9}, {3.899908335106683*^9, 
   3.8999083478077602`*^9}, {3.8999349137578506`*^9, 3.899934922396121*^9}, {
   3.899963518445606*^9, 
   3.899963573144479*^9}},ExpressionUUID->"3fd8a2d6-f15b-4889-8c01-\
b6cfbca36c2d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"measurements", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"tdNet", ",", "testData"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.899909519101061*^9, 3.899909540112199*^9}},
 CellLabel->
  "In[294]:=",ExpressionUUID->"54a4b80a-f8cf-45b5-9eb3-4b6a20613307"],

Cell[BoxData[
 TagBox[
  StyleBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        FrameBox[
         StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
          StripOnInput->False,
          FontSize->12],
         FrameMargins->{{10, 5}, {-4, 2}},
         FrameStyle->None,
         StripOnInput->False],
        Alignment->{Left, Bottom},
        Background->RGBColor[0.96, 0.96, 0.96],
        Frame->{{False, False}, {True, False}},
        FrameStyle->Opacity[0.1],
        ItemSize->{Automatic, 1},
        StripOnInput->False]},
      {
       ItemBox[
        TagBox[
         FrameBox[
          TagBox[GridBox[{
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Classifier method"], 
                  TextCell["Classifier method"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              InterpretationBox[Cell[
               "Net",ExpressionUUID->"635f0a66-3093-40dc-a099-6949c431702a"],
               TextCell["Net"]]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Number of test examples"], 
                  TextCell["Number of test examples"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], "10000"},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Accuracy"], 
                  TextCell["Accuracy"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{
                RowBox[{"(", 
                  InterpretationBox[
                   
                   TemplateBox[{"99.09", "0.09"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                   Around[
                   99.0900000000000034106`3., 0.0949636341405758339`3.]], 
                  ")"}], "\"%\"", "percent", "\"Percent\""},
               "QuantityPostfix"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 TagBox[
                  TooltipBox[
                   InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                   "\"Accuracy if predicting the commonest class\"", 
                   TooltipStyle -> "TextStyling"], 
                  Annotation[#, "Accuracy if predicting the commonest class", 
                   "Tooltip"]& ], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{
                RowBox[{"(", 
                  InterpretationBox[
                   
                   TemplateBox[{"11.35", "0.32"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                   Around[
                   11.3499999999999996447`3., 0.3172188720446457721`3.]], 
                  ")"}], "\"%\"", "percent", "\"Percent\""},
               "QuantityPostfix"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Geometric mean of probabilities"], 
                  TextCell["Geometric mean of probabilities"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"0.9698713388763389176`3.", 
                  StyleBox[
                   
                   TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0030902967606381559`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.9636907453550626057`3.",
                   "\", \"", "0.9760519323976152295`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.9636907453550626057`3., 
                  ", ", 0.9760519323976152295`3., "]"}], "Tooltip"]& ]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Mean cross entropy"], 
                  TextCell["Mean cross entropy"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"0.0305918566158868248`3.", 
                  StyleBox[
                   
                   TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0031862901889783152`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.0242192762379301943`3.",
                   "\", \"", "0.0369644369938434553`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.0242192762379301943`3., 
                  ", ", 0.0369644369938434553`3., "]"}], "Tooltip"]& ]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Single evaluation time"], 
                  TextCell["Single evaluation time"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"4.85`", 
                
                RowBox[{
                 "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
                  "\"example\""}], "milliseconds per example", 
                FractionBox["\"Milliseconds\"", "\"Examples\""]},
               "Quantity"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Batch evaluation speed"], 
                  TextCell["Batch evaluation speed"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"5.78`", 
                
                RowBox[{
                 "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                  "\[InvisibleSpace]", "\"ms\""}], "examples per millisecond", 
                FractionBox["\"Examples\"", "\"Milliseconds\""]},
               "Quantity"]},
             {
              ItemBox[
               GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGDggmIQGwI+2KPTs5/f536R+M5+G/Mb4e61b+1DYudHORu9
wlBHiMZlTvrUwx1OTe/sw1ikKs6ov7NfkiU30angNU5zWHokhIwV39lXME3w
5tj5xn6b08K3Ltue4zRnXWix1YUFb+33znieNnv6fftnHfk+L63ySPYXLvWk
mkOqf3GpF7ELUlEwfWMvwBTwTMT0of2/AJVLatoV9ouacmcrH3hrP5uBTd7F
67X9CSkVL/c/j2nuL2rRLSKRu5e1v7MveVNc+/fMXfs1m+88O7QnCaf6XINA
iboHb+2tGE2aW4+8tpfUWNzgZvXU/oLln75ex3f2Esz71nsav7VnC1BQcfny
Amd4khovpKbnvE36Dz4deG3/28RNunbFQ/tO8/uXW/irqZZOqJUOLe+ZTL3B
8M7+JmPS82N2b+zTTJW2u1Y8w2nODU6Nu35Af03as9pQ+M4j+xQdiWpj9Y0D
lr+oFZ4ztD+1xq5/Yx83of/Ost0P7CsebO9VVSilWjrH5R5S8y8uGlf6Fy77
5ZXI9c5+Ht/+1PtH79mvkUvflPEzg2RzSPUXtco9XOJ+dv8eHv76zl6HRWav
xac79jxfJ1+c1RRFtfyCi8ZVH1GaPtDph1Ui69wf3oLyGRhIDU9SaVqbzzd7
V/sz0bf2m7MSjp0OfWAfV8DzaNukIprXL6T6l1rtEwDOafXU
                 "], {{0, 0}, {10, 10}}, {0, 1}],
                Epilog->{{
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["974", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 9.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "974", "\" examples of \"", "0", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9918533604887984`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9938775510204082`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9928644240570845`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{974, " examples of ", 0, " correctly classified"}], 
                    Row[{"Precision = ", 0.9918533604887984}], 
                    Row[{"Recall = ", 0.9938775510204082}], 
                    Row[{"FScore = ", 0.9928644240570845}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 8.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "1", "\" misclassified as \"", 
                    "0"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 1, " misclassified as ", 0}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 7.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "2", "\" misclassified as \"", 
                    "0"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.0010183299389002036`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.0009689922480620155`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{1, " example of ", 2, " misclassified as ", 0}], 
                    Row[{"Column fraction = ", 0.0010183299389002036`}], 
                    Row[{"Row fraction = ", 0.0009689922480620155}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 6.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "3", "\" misclassified as \"", 
                    "0"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 3, " misclassified as ", 0}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 5.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "4", "\" misclassified as \"", 
                    "0"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 4, " misclassified as ", 0}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 4.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "5", "\" misclassified as \"", 
                    "0"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.002036659877800407`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.002242152466367713`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{2, " examples of ", 5, " misclassified as ", 0}], 
                    Row[{"Column fraction = ", 0.002036659877800407}], 
                    Row[{"Row fraction = ", 0.002242152466367713}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["3", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "3", "\" examples of \"", "6", "\" misclassified as \"", 
                    "0"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.003054989816700611`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.003131524008350731`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{3, " examples of ", 6, " misclassified as ", 0}], 
                    Row[{"Column fraction = ", 0.003054989816700611}], 
                    Row[{"Row fraction = ", 0.003131524008350731}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "7", "\" misclassified as \"", 
                    "0"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 7, " misclassified as ", 0}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "8", "\" misclassified as \"", 
                    "0"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.002036659877800407`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.002053388090349076`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{2, " examples of ", 8, " misclassified as ", 0}], 
                    Row[{"Column fraction = ", 0.002036659877800407}], 
                    Row[{"Row fraction = ", 0.002053388090349076}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "9", "\" misclassified as \"", 
                    "0"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 9, " misclassified as ", 0}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 9.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "0", "\" misclassified as \"", 
                    "1"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 0, " misclassified as ", 1}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1133", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 8.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1133", "\" examples of \"", "1", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9947322212467077`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9982378854625551`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9964819700967459`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{1133, " examples of ", 1, " correctly classified"}], 
                    
                    Row[{"Precision = ", 0.9947322212467077}], 
                    Row[{"Recall = ", 0.9982378854625551}], 
                    Row[{"FScore = ", 0.9964819700967459}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 7.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "2", "\" misclassified as \"", 
                    "1"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.000877963125548727`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.0009689922480620155`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{1, " example of ", 2, " misclassified as ", 1}], 
                    Row[{"Column fraction = ", 0.000877963125548727}], 
                    Row[{"Row fraction = ", 0.0009689922480620155}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 6.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "3", "\" misclassified as \"", 
                    "1"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 3, " misclassified as ", 1}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 5.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "4", "\" misclassified as \"", 
                    "1"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 4, " misclassified as ", 1}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 4.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "5", "\" misclassified as \"", 
                    "1"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 5, " misclassified as ", 1}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "6", "\" misclassified as \"", 
                    "1"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.000877963125548727`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.0010438413361169101`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{1, " example of ", 6, " misclassified as ", 1}], 
                    Row[{"Column fraction = ", 0.000877963125548727}], 
                    Row[{"Row fraction = ", 0.0010438413361169101`}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "7", "\" misclassified as \"", 
                    "1"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.001755926251097454`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.0019455252918287938`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{2, " examples of ", 7, " misclassified as ", 1}], 
                    Row[{"Column fraction = ", 0.001755926251097454}], 
                    Row[{"Row fraction = ", 0.0019455252918287938`}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "8", "\" misclassified as \"", 
                    "1"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 8, " misclassified as ", 1}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "9", "\" misclassified as \"", 
                    "1"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.001755926251097454`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.0019821605550049554`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{2, " examples of ", 9, " misclassified as ", 1}], 
                    Row[{"Column fraction = ", 0.001755926251097454}], 
                    Row[{"Row fraction = ", 0.0019821605550049554`}]}], 
                    "Tooltip"]& ]}, {
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 9.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "0", "\" misclassified as \"", 
                    "2"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 0, " misclassified as ", 2}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 8.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "1", "\" misclassified as \"", 
                    "2"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.000966183574879227`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.000881057268722467`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{1, " example of ", 1, " misclassified as ", 2}], 
                    Row[{"Column fraction = ", 0.000966183574879227}], 
                    Row[{"Row fraction = ", 0.000881057268722467}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1024", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 7.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1024", "\" examples of \"", "2", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9893719806763285`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9922480620155039`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9908079342041607`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{1024, " examples of ", 2, " correctly classified"}], 
                    
                    Row[{"Precision = ", 0.9893719806763285}], 
                    Row[{"Recall = ", 0.9922480620155039}], 
                    Row[{"FScore = ", 0.9908079342041607}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["3", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 6.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "3", "\" examples of \"", "3", "\" misclassified as \"", 
                    "2"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.002898550724637681`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.0029702970297029703`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{3, " examples of ", 3, " misclassified as ", 2}], 
                    Row[{"Column fraction = ", 0.002898550724637681}], 
                    Row[{"Row fraction = ", 0.0029702970297029703`}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 5.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "4", "\" misclassified as \"", 
                    "2"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.000966183574879227`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.0010183299389002036`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{1, " example of ", 4, " misclassified as ", 2}], 
                    Row[{"Column fraction = ", 0.000966183574879227}], 
                    Row[{"Row fraction = ", 0.0010183299389002036`}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 4.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "5", "\" misclassified as \"", 
                    "2"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.000966183574879227`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.0011210762331838565`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{1, " example of ", 5, " misclassified as ", 2}], 
                    Row[{"Column fraction = ", 0.000966183574879227}], 
                    Row[{"Row fraction = ", 0.0011210762331838565`}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "6", "\" misclassified as \"", 
                    "2"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.000966183574879227`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.0010438413361169101`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{1, " example of ", 6, " misclassified as ", 2}], 
                    Row[{"Column fraction = ", 0.000966183574879227}], 
                    Row[{"Row fraction = ", 0.0010438413361169101`}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "7", "\" misclassified as \"", 
                    "2"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.001932367149758454`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.0019455252918287938`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{2, " examples of ", 7, " misclassified as ", 2}], 
                    Row[{"Column fraction = ", 0.001932367149758454}], 
                    Row[{"Row fraction = ", 0.0019455252918287938`}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "8", "\" misclassified as \"", 
                    "2"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.001932367149758454`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.002053388090349076`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{2, " examples of ", 8, " misclassified as ", 2}], 
                    Row[{"Column fraction = ", 0.001932367149758454}], 
                    Row[{"Row fraction = ", 0.002053388090349076}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "9", "\" misclassified as \"", 
                    "2"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 9, " misclassified as ", 2}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 9.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "0", "\" misclassified as \"", 
                    "3"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 0, " misclassified as ", 3}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 8.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "1", "\" misclassified as \"", 
                    "3"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 1, " misclassified as ", 3}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 7.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "2", "\" misclassified as \"", 
                    "3"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 2, " misclassified as ", 3}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1002", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 6.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1002", "\" examples of \"", "3", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9930624380574826`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9920792079207921`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9925705794947993`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{1002, " examples of ", 3, " correctly classified"}], 
                    
                    Row[{"Precision = ", 0.9930624380574826}], 
                    Row[{"Recall = ", 0.9920792079207921}], 
                    Row[{"FScore = ", 0.9925705794947993}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 5.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "4", "\" misclassified as \"", 
                    "3"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 4, " misclassified as ", 3}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["5", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 4.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "5", "\" examples of \"", "5", "\" misclassified as \"", 
                    "3"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.004955401387512388`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.005605381165919282`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{5, " examples of ", 5, " misclassified as ", 3}], 
                    Row[{"Column fraction = ", 0.004955401387512388}], 
                    Row[{"Row fraction = ", 0.005605381165919282}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "6", "\" misclassified as \"", 
                    "3"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 6, " misclassified as ", 3}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "7", "\" misclassified as \"", 
                    "3"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 7, " misclassified as ", 3}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "8", "\" misclassified as \"", 
                    "3"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.0019821605550049554`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.002053388090349076`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{2, " examples of ", 8, " misclassified as ", 3}], 
                    Row[{"Column fraction = ", 0.0019821605550049554`}], 
                    Row[{"Row fraction = ", 0.002053388090349076}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "9", "\" misclassified as \"", 
                    "3"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 9, " misclassified as ", 3}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 9.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "0", "\" misclassified as \"", 
                    "4"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 0, " misclassified as ", 4}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 8.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "1", "\" misclassified as \"", 
                    "4"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 1, " misclassified as ", 4}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 7.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "2", "\" misclassified as \"", 
                    "4"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.0020429009193054137`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.001937984496124031`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{2, " examples of ", 2, " misclassified as ", 4}], 
                    Row[{"Column fraction = ", 0.0020429009193054137`}], 
                    Row[{"Row fraction = ", 0.001937984496124031}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 6.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "3", "\" misclassified as \"", 
                    "4"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 3, " misclassified as ", 4}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["973", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 5.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "973", "\" examples of \"", "4", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9938712972420838`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9908350305498982`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.992350841407445`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{973, " examples of ", 4, " correctly classified"}], 
                    Row[{"Precision = ", 0.9938712972420838}], 
                    Row[{"Recall = ", 0.9908350305498982}], 
                    Row[{"FScore = ", 0.992350841407445}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 4.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "5", "\" misclassified as \"", 
                    "4"}, "RowDefault"]}, {
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 5, " misclassified as ", 4}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "6", "\" misclassified as \"", 
                    "4"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.0020429009193054137`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.0020876826722338203`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{2, " examples of ", 6, " misclassified as ", 4}], 
                    Row[{"Column fraction = ", 0.0020429009193054137`}], 
                    Row[{"Row fraction = ", 0.0020876826722338203`}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "7", "\" misclassified as \"", 
                    "4"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 7, " misclassified as ", 4}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "8", "\" misclassified as \"", 
                    "4"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 8, " misclassified as ", 4}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "9", "\" misclassified as \"", 
                    "4"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.0020429009193054137`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.0019821605550049554`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{2, " examples of ", 9, " misclassified as ", 4}], 
                    Row[{"Column fraction = ", 0.0020429009193054137`}], 
                    Row[{"Row fraction = ", 0.0019821605550049554`}]}], 
                    "Tooltip"]& ]}, {
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {5.5, 9.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "0", "\" misclassified as \"", 
                    "5"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 0, " misclassified as ", 5}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {5.5, 8.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "1", "\" misclassified as \"", 
                    "5"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 1, " misclassified as ", 5}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {5.5, 7.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "2", "\" misclassified as \"", 
                    "5"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 2, " misclassified as ", 5}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["3", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {5.5, 6.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "3", "\" examples of \"", "3", "\" misclassified as \"", 
                    "5"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.003393665158371041`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.0029702970297029703`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{3, " examples of ", 3, " misclassified as ", 5}], 
                    Row[{"Column fraction = ", 0.003393665158371041}], 
                    Row[{"Row fraction = ", 0.0029702970297029703`}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {5.5, 5.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "4", "\" misclassified as \"", 
                    "5"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 4, " misclassified as ", 5}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["878", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {5.5, 4.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    "878", "\" examples of \"", "5", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9932126696832579`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.984304932735426`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9887387387387387`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{878, " examples of ", 5, " correctly classified"}], 
                    Row[{"Precision = ", 0.9932126696832579}], 
                    Row[{"Recall = ", 0.984304932735426}], 
                    Row[{"FScore = ", 0.9887387387387387}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {5.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "6", "\" misclassified as \"", 
                    "5"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.0011312217194570137`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.0010438413361169101`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{1, " example of ", 6, " misclassified as ", 5}], 
                    Row[{"Column fraction = ", 0.0011312217194570137`}], 
                    Row[{"Row fraction = ", 0.0010438413361169101`}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {5.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "7", "\" misclassified as \"", 
                    "5"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 7, " misclassified as ", 5}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {5.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "8", "\" misclassified as \"", 
                    "5"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.0011312217194570137`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.001026694045174538`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{1, " example of ", 8, " misclassified as ", 5}], 
                    Row[{"Column fraction = ", 0.0011312217194570137`}], 
                    Row[{"Row fraction = ", 0.001026694045174538}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {5.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "9", "\" misclassified as \"", 
                    "5"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.0011312217194570137`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.0009910802775024777`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{1, " example of ", 9, " misclassified as ", 5}], 
                    Row[{"Column fraction = ", 0.0011312217194570137`}], 
                    Row[{"Row fraction = ", 0.0009910802775024777}]}], 
                    "Tooltip"]& ]}, {
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {6.5, 9.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "0", "\" misclassified as \"", 
                    "6"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.001049317943336831`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.0010204081632653062`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{1, " example of ", 0, " misclassified as ", 6}], 
                    Row[{"Column fraction = ", 0.001049317943336831}], 
                    Row[{"Row fraction = ", 0.0010204081632653062`}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {6.5, 8.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "1", "\" misclassified as \"", 
                    "6"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.001049317943336831`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.000881057268722467`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{1, " example of ", 1, " misclassified as ", 6}], 
                    Row[{"Column fraction = ", 0.001049317943336831}], 
                    Row[{"Row fraction = ", 0.000881057268722467}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {6.5, 7.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "2", "\" misclassified as \"", 
                    "6"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 2, " misclassified as ", 6}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {6.5, 6.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "3", "\" misclassified as \"", 
                    "6"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 3, " misclassified as ", 6}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {6.5, 5.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "4", "\" misclassified as \"", 
                    "6"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 4, " misclassified as ", 6}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {6.5, 4.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "5", "\" misclassified as \"", 
                    "6"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.002098635886673662`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.002242152466367713`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{2, " examples of ", 5, " misclassified as ", 6}], 
                    Row[{"Column fraction = ", 0.002098635886673662}], 
                    Row[{"Row fraction = ", 0.002242152466367713}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["949", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {6.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "949", "\" examples of \"", "6", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9958027282266527`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9906054279749478`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9931972789115646`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{949, " examples of ", 6, " correctly classified"}], 
                    Row[{"Precision = ", 0.9958027282266527}], 
                    Row[{"Recall = ", 0.9906054279749478}], 
                    Row[{"FScore = ", 0.9931972789115646}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {6.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "7", "\" misclassified as \"", 
                    "6"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 7, " misclassified as ", 6}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {6.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "8", "\" misclassified as \"", 
                    "6"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 8, " misclassified as ", 6}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {6.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "9", "\" misclassified as \"", 
                    "6"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 9, " misclassified as ", 6}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {7.5, 9.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "0", "\" misclassified as \"", 
                    "7"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.0009718172983479105`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.0010204081632653062`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{1, " example of ", 0, " misclassified as ", 7}], 
                    Row[{"Column fraction = ", 0.0009718172983479105}], 
                    Row[{"Row fraction = ", 0.0010204081632653062`}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {7.5, 8.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "1", "\" misclassified as \"", 
                    "7"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 1, " misclassified as ", 7}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["4", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {7.5, 7.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "4", "\" examples of \"", "2", "\" misclassified as \"", 
                    "7"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.003887269193391642`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.003875968992248062`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{4, " examples of ", 2, " misclassified as ", 7}], 
                    Row[{"Column fraction = ", 0.003887269193391642}], 
                    Row[{"Row fraction = ", 0.003875968992248062}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {7.5, 6.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "3", "\" misclassified as \"", 
                    "7"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.0009718172983479105`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.0009900990099009901`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{1, " example of ", 3, " misclassified as ", 7}], 
                    Row[{"Column fraction = ", 0.0009718172983479105}], 
                    Row[{"Row fraction = ", 0.0009900990099009901}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {7.5, 5.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "4", "\" misclassified as \"", 
                    "7"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 4, " misclassified as ", 7}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {7.5, 4.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "5", "\" misclassified as \"", 
                    "7"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 5, " misclassified as ", 7}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {7.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "6", "\" misclassified as \"", 
                    "7"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 6, " misclassified as ", 7}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1018", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {7.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1018", "\" examples of \"", "7", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.989310009718173`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9902723735408561`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9897909577053962`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{1018, " examples of ", 7, " correctly classified"}], 
                    
                    Row[{"Precision = ", 0.989310009718173}], 
                    Row[{"Recall = ", 0.9902723735408561}], 
                    Row[{"FScore = ", 0.9897909577053962}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {7.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "8", "\" misclassified as \"", 
                    "7"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.0009718172983479105`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.001026694045174538`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{1, " example of ", 8, " misclassified as ", 7}], 
                    Row[{"Column fraction = ", 0.0009718172983479105}], 
                    Row[{"Row fraction = ", 0.001026694045174538}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["4", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {7.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "4", "\" examples of \"", "9", "\" misclassified as \"", 
                    "7"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.003887269193391642`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.003964321110009911`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{4, " examples of ", 9, " misclassified as ", 7}], 
                    Row[{"Column fraction = ", 0.003887269193391642}], 
                    Row[{"Row fraction = ", 0.003964321110009911}]}], 
                    "Tooltip"]& ]}, {
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {8.5, 9.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "0", "\" misclassified as \"", 
                    "8"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 0, " misclassified as ", 8}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {8.5, 8.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "1", "\" misclassified as \"", 
                    "8"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 1, " misclassified as ", 8}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {8.5, 7.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "2", "\" misclassified as \"", 
                    "8"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 2, " misclassified as ", 8}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {8.5, 6.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "3", "\" misclassified as \"", 
                    "8"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.0010362694300518134`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.0009900990099009901`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{1, " example of ", 3, " misclassified as ", 8}], 
                    Row[{"Column fraction = ", 0.0010362694300518134`}], 
                    Row[{"Row fraction = ", 0.0009900990099009901}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {8.5, 5.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "4", "\" misclassified as \"", 
                    "8"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.0010362694300518134`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.0010183299389002036`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{1, " example of ", 4, " misclassified as ", 8}], 
                    Row[{"Column fraction = ", 0.0010362694300518134`}], 
                    Row[{"Row fraction = ", 0.0010183299389002036`}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {8.5, 4.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "5", "\" misclassified as \"", 
                    "8"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.002072538860103627`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.002242152466367713`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{2, " examples of ", 5, " misclassified as ", 8}], 
                    Row[{"Column fraction = ", 0.002072538860103627}], 
                    Row[{"Row fraction = ", 0.002242152466367713}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {8.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "6", "\" misclassified as \"", 
                    "8"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.0010362694300518134`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.0010438413361169101`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{1, " example of ", 6, " misclassified as ", 8}], 
                    Row[{"Column fraction = ", 0.0010362694300518134`}], 
                    Row[{"Row fraction = ", 0.0010438413361169101`}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {8.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "7", "\" misclassified as \"", 
                    "8"}, "RowDefault"]}, {
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 7, " misclassified as ", 8}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["959", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {8.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "959", "\" examples of \"", "8", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9937823834196892`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9845995893223819`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9891696750902528`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{959, " examples of ", 8, " correctly classified"}], 
                    Row[{"Precision = ", 0.9937823834196892}], 
                    Row[{"Recall = ", 0.9845995893223819}], 
                    Row[{"FScore = ", 0.9891696750902528}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {8.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "9", "\" misclassified as \"", 
                    "8"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.0010362694300518134`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.0009910802775024777`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{1, " example of ", 9, " misclassified as ", 8}], 
                    Row[{"Column fraction = ", 0.0010362694300518134`}], 
                    Row[{"Row fraction = ", 0.0009910802775024777}]}], 
                    "Tooltip"]& ]}, {
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["4", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {9.5, 9.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "4", "\" examples of \"", "0", "\" misclassified as \"", 
                    "9"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.003902439024390244`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.004081632653061225`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{4, " examples of ", 0, " misclassified as ", 9}], 
                    Row[{"Column fraction = ", 0.003902439024390244}], 
                    Row[{"Row fraction = ", 0.004081632653061225}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {9.5, 8.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "1", "\" misclassified as \"", 
                    "9"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 1, " misclassified as ", 9}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {9.5, 7.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "2", "\" misclassified as \"", 
                    "9"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 2, " misclassified as ", 9}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {9.5, 6.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "3", "\" misclassified as \"", 
                    "9"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 3, " misclassified as ", 9}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["7", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {9.5, 5.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "7", "\" examples of \"", "4", "\" misclassified as \"", 
                    "9"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.006829268292682927`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.007128309572301426`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{7, " examples of ", 4, " misclassified as ", 9}], 
                    Row[{"Column fraction = ", 0.006829268292682927}], 
                    Row[{"Row fraction = ", 0.007128309572301426}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {9.5, 4.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "5", "\" misclassified as \"", 
                    "9"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.001951219512195122`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.002242152466367713`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{2, " examples of ", 5, " misclassified as ", 9}], 
                    Row[{"Column fraction = ", 0.001951219512195122}], 
                    Row[{"Row fraction = ", 0.002242152466367713}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {9.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "6", "\" misclassified as \"", 
                    "9"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 6, " misclassified as ", 9}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["6", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {9.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "6", "\" examples of \"", "7", "\" misclassified as \"", 
                    "9"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.005853658536585366`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.005836575875486381`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{6, " examples of ", 7, " misclassified as ", 9}], 
                    Row[{"Column fraction = ", 0.005853658536585366}], 
                    Row[{"Row fraction = ", 0.005836575875486381}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["7", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {9.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "7", "\" examples of \"", "8", "\" misclassified as \"", 
                    "9"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.006829268292682927`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.007186858316221766`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{7, " examples of ", 8, " misclassified as ", 9}], 
                    Row[{"Column fraction = ", 0.006829268292682927}], 
                    Row[{"Row fraction = ", 0.007186858316221766}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["999", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    9.894839181882503], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {9.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "999", "\" examples of \"", "9", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9746341463414634`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9900891972249752`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9823008849557522`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{999, " examples of ", 9, " correctly classified"}], 
                    Row[{"Precision = ", 0.9746341463414634}], 
                    Row[{"Recall = ", 0.9900891972249752}], 
                    Row[{"FScore = ", 0.9823008849557522}]}], "Tooltip"]& ]}, 
                  
                  TagBox[
                   TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {10.5, 9.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "980", "\" example\"", "\"s\"", "\" of class \"", "0"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9938775510204082`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{980, " example", "s", " of class ", 0}], 
                    Row[{"Recall = ", 0.9938775510204082}]}], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {10.5, 8.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1135", "\" example\"", "\"s\"", "\" of class \"", "1"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9982378854625551`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{1135, " example", "s", " of class ", 1}], 
                    Row[{"Recall = ", 0.9982378854625551}]}], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {10.5, 7.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1032", "\" example\"", "\"s\"", "\" of class \"", "2"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9922480620155039`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{1032, " example", "s", " of class ", 2}], 
                    Row[{"Recall = ", 0.9922480620155039}]}], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {10.5, 6.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1010", "\" example\"", "\"s\"", "\" of class \"", "3"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9920792079207921`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{1010, " example", "s", " of class ", 3}], 
                    Row[{"Recall = ", 0.9920792079207921}]}], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {10.5, 5.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "982", "\" example\"", "\"s\"", "\" of class \"", "4"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9908350305498982`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{982, " example", "s", " of class ", 4}], 
                    Row[{"Recall = ", 0.9908350305498982}]}], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {10.5, 4.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "892", "\" example\"", "\"s\"", "\" of class \"", "5"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.984304932735426`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{892, " example", "s", " of class ", 5}], 
                    Row[{"Recall = ", 0.984304932735426}]}], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {10.5, 3.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "958", "\" example\"", "\"s\"", "\" of class \"", "6"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9906054279749478`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{958, " example", "s", " of class ", 6}], 
                    Row[{"Recall = ", 0.9906054279749478}]}], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {10.5, 2.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1028", "\" example\"", "\"s\"", "\" of class \"", "7"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9902723735408561`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{1028, " example", "s", " of class ", 7}], 
                    Row[{"Recall = ", 0.9902723735408561}]}], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {10.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "974", "\" example\"", "\"s\"", "\" of class \"", "8"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9845995893223819`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{974, " example", "s", " of class ", 8}], 
                    Row[{"Recall = ", 0.9845995893223819}]}], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {10.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1009", "\" example\"", "\"s\"", "\" of class \"", "9"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9900891972249752`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{1009, " example", "s", " of class ", 9}], 
                    Row[{"Recall = ", 0.9900891972249752}]}], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "982", "\" example\"", "\"s\"", "\" classified as \"", 
                    "0"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9918533604887984`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{982, " example", "s", " classified as ", 0}], 
                    Row[{"Precision = ", 0.9918533604887984}]}], 
                    "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1139", "\" example\"", "\"s\"", "\" classified as \"", 
                    "1"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9947322212467077`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{1139, " example", "s", " classified as ", 1}], 
                    Row[{"Precision = ", 0.9947322212467077}]}], 
                    "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1035", "\" example\"", "\"s\"", "\" classified as \"", 
                    "2"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9893719806763285`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{1035, " example", "s", " classified as ", 2}], 
                    Row[{"Precision = ", 0.9893719806763285}]}], 
                    "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1009", "\" example\"", "\"s\"", "\" classified as \"", 
                    "3"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9930624380574826`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{1009, " example", "s", " classified as ", 3}], 
                    Row[{"Precision = ", 0.9930624380574826}]}], 
                    "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "979", "\" example\"", "\"s\"", "\" classified as \"", 
                    "4"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9938712972420838`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{979, " example", "s", " classified as ", 4}], 
                    Row[{"Precision = ", 0.9938712972420838}]}], 
                    "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {5.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "884", "\" example\"", "\"s\"", "\" classified as \"", 
                    "5"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9932126696832579`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{884, " example", "s", " classified as ", 5}], 
                    Row[{"Precision = ", 0.9932126696832579}]}], 
                    "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {6.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "953", "\" example\"", "\"s\"", "\" classified as \"", 
                    "6"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9958027282266527`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{953, " example", "s", " classified as ", 6}], 
                    Row[{"Precision = ", 0.9958027282266527}]}], 
                    "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {7.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1029", "\" example\"", "\"s\"", "\" classified as \"", 
                    "7"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.989310009718173`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{1029, " example", "s", " classified as ", 7}], 
                    Row[{"Precision = ", 0.989310009718173}]}], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {8.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "965", "\" example\"", "\"s\"", "\" classified as \"", 
                    "8"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9937823834196892`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{965, " example", "s", " classified as ", 8}], 
                    Row[{"Precision = ", 0.9937823834196892}]}], 
                    "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {9.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1025", "\" example\"", "\"s\"", "\" classified as \"", 
                    "9"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9746341463414634`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{1025, " example", "s", " classified as ", 9}], 
                    Row[{"Precision = ", 0.9746341463414634}]}], 
                    "Tooltip"]& ]},
                Frame->True,
                FrameLabel->{
                  FormBox["\"predicted class\"", TraditionalForm], 
                  FormBox["\"actual class\"", TraditionalForm]},
                FrameTicks->{{{{9.5, 
                    FormBox[
                    RotationBox["0", BoxRotation -> 0.], TraditionalForm]}, {
                    8.5, 
                    FormBox[
                    RotationBox["1", BoxRotation -> 0.], TraditionalForm]}, {
                    7.5, 
                    FormBox[
                    RotationBox["2", BoxRotation -> 0.], TraditionalForm]}, {
                    6.5, 
                    FormBox[
                    RotationBox["3", BoxRotation -> 0.], TraditionalForm]}, {
                    5.5, 
                    FormBox[
                    RotationBox["4", BoxRotation -> 0.], TraditionalForm]}, {
                    4.5, 
                    FormBox[
                    RotationBox["5", BoxRotation -> 0.], TraditionalForm]}, {
                    3.5, 
                    FormBox[
                    RotationBox["6", BoxRotation -> 0.], TraditionalForm]}, {
                    2.5, 
                    FormBox[
                    RotationBox["7", BoxRotation -> 0.], TraditionalForm]}, {
                    1.5, 
                    FormBox[
                    RotationBox["8", BoxRotation -> 0.], TraditionalForm]}, {
                    0.5, 
                    FormBox[
                    RotationBox["9", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{9.5, 
                    FormBox["980", TraditionalForm]}, {8.5, 
                    FormBox["1135", TraditionalForm]}, {7.5, 
                    FormBox["1032", TraditionalForm]}, {6.5, 
                    FormBox["1010", TraditionalForm]}, {5.5, 
                    FormBox["982", TraditionalForm]}, {4.5, 
                    FormBox["892", TraditionalForm]}, {3.5, 
                    FormBox["958", TraditionalForm]}, {2.5, 
                    FormBox["1028", TraditionalForm]}, {1.5, 
                    FormBox["974", TraditionalForm]}, {0.5, 
                    FormBox["1009", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["982", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["1139", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["1035", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox["1009", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {4.5, 
                    FormBox[
                    RotationBox["979", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {5.5, 
                    FormBox[
                    RotationBox["884", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {6.5, 
                    FormBox[
                    RotationBox["953", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {7.5, 
                    FormBox[
                    RotationBox["1029", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {8.5, 
                    FormBox[
                    RotationBox["965", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {9.5, 
                    FormBox[
                    RotationBox["1025", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox["0", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["1", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["2", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox["3", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {4.5, 
                    FormBox[
                    RotationBox["4", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {5.5, 
                    FormBox[
                    RotationBox["5", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {6.5, 
                    FormBox[
                    RotationBox["6", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {7.5, 
                    FormBox[
                    RotationBox["7", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {8.5, 
                    FormBox[
                    RotationBox["8", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {9.5, 
                    FormBox[
                    RotationBox["9", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                FrameTicksStyle->12.894839181882503`,
                GridLinesStyle->Directive[
                  GrayLevel[0.5, 0.4]],
                ImageSize->304.73807018259004`,
                
                Method->{
                 "GridLinesInFront" -> True, "AxisPadding" -> Scaled[0.02], 
                  "DefaultBoundaryStyle" -> Automatic, 
                  "DefaultGraphicsInteraction" -> {
                   "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                  "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                  Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                PlotRangePadding->None],
               Alignment->Center,
               StripOnInput->False], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            ColumnsEqual->False,
            
            GridBoxAlignment->{
             "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
            GridBoxDividers->{"Columns" -> {False, {
                 Opacity[0.15]}, False}},
            
            GridBoxItemSize->{
             "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], 
                Offset[1.1199999999999999`], {
                 Offset[1.75]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.8]}, 
                Offset[0.2]}}],
           "Grid"],
          FrameMargins->{{10, 10}, {10, 5}},
          FrameStyle->None,
          StripOnInput->False],
         Deploy,
         DefaultBaseStyle->"Deploy"],
        Alignment->Center,
        BaseStyle->{
         FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI", 
          NumberMarks -> False, Deployed -> False},
        StripOnInput->False]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
     GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], 
         Offset[0.8], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    Background->GrayLevel[1],
    FrameMargins->{{0, 0}, {0, 0}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   StripOnInput->False,
   LineBreakWithin->False],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 CellChangeTimes->{
  3.899909545318164*^9, {3.899963549647146*^9, 3.899963562006198*^9}, 
   3.899964109498166*^9, {3.8999828383840547`*^9, 3.899982840414804*^9}, 
   3.899983915059767*^9, 3.8999844226767206`*^9, 3.8999848600014076`*^9, 
   3.8999852008781757`*^9},
 CellLabel->
  "Out[294]=",ExpressionUUID->"890d589d-ece7-4dc5-a492-5cff16b3e425"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"measurements", "[", "\"\<Accuracy\>\"", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"measurements", "[", "\"\<WorstClassifiedExamples\>\"", 
  "]"}]}], "Input",
 CellChangeTimes->{{3.8999095654988213`*^9, 3.8999095831821127`*^9}},
 CellLabel->"In[74]:=",ExpressionUUID->"7c6d8178-e953-4db5-a435-722848b322c4"],

Cell[BoxData["0.9827`"], "Output",
 CellChangeTimes->{{3.899909576792054*^9, 3.899909583452985*^9}, 
   3.8999635820189047`*^9},
 CellLabel->"Out[74]=",ExpressionUUID->"db4309ed-8b06-40a2-9fbf-99b7222b041f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9A8ICRkXEaDrmHTExM06ksF4NHzoeJSekBdqnrKkxM+ji0bQEauQeH
nCMTk9A5HHLyTEwxOKT+yzIyRuOSw6cPKBf+G7cc0xEcct5AOQccci89mJj4
t/7///dhxzcMyQ9AH3pUHC9k0rqDqfO7CxMTAxcTUyM2Y1+t1GdkYor7gcPW
aSUpJ3BI0RoAACERySw=
       "], {{0, 28.}, {28., 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{28., 28.},
     PlotRange->{{0, 28.}, {0, 28.}}], "\[Rule]", "6"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9q4MuNEm57LUbtkpcYUr9iXZiYGJmAgPMIutxzRVE9x9ZCdz0mRn8M
feW+GS+A9Ds7Rq5jaHL1IWUrP4MY4YxMgSgyZ0oUr0KZU+0Z3VDk7ubDmS9L
mNxR5HYjlHafQJM7EoeQi2cqQncoXC6LaReKwMJSGOt13VyV+yhyk8/CWPpM
/HdRDVp1Cso4w8fUjSp1fyuUcaVFJxuHO7bwCYV9xiFnwiqxAF3s7jeIiYwG
mOor793/f/9MP4fgcSyGbZLS09dl0sEwEAQWMTGKO17B5QxSAQDJGcTy
       "], {{0, 28.}, {28., 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{28., 28.},
     PlotRange->{{0, 28.}, {0, 28.}}], "\[Rule]", "0"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+W4M2jR6d65v/CED88I0qbnxEE2lDEv+/JluAxK9vxHMQ5hxIo94PZ
jBe8hvFKPRAyn2q4Um8iuPONXsHZH+1lNiGZcSgU4ZTnFh5vkc3/iND1f6HW
eyD54S42L3nXgUhfPp95H/6iy5kYg6lH080Y/R+hyV1lzXwJZvze5Mu3G01y
mqBQ2mEIs0TyObqxPV48LO5AYMCYgcVBr07PmZM0Z85lDNcMaQAA9HXf7A==

       "], {{0, 28.}, {28., 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{28., 28.},
     PlotRange->{{0, 28.}, {0, 28.}}], "\[Rule]", "6"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+c4K0eo3nPeexyk5nEcuIuYperZ1qAy8jv+kxbcMlNYSr4h0uui3Eq
iPr9E1PqnSrHYxDtoYkpN5+pGETdEGLClCtmWgskjyowMb3GkGPjuff//2Ep
Jiam9ehSDxki/v8uZmAs38qIIbeesfB9LBOj++f9mPrWMwZpMDHlfv6PRe4w
IxOTWjeQMYnpDoZbZgdVvgPRhVj8AAMFjLjl8OnDJ7cVj9xzFdxyVAAAzTDT
ag==
       "], {{0, 28.}, {28., 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{28., 28.},
     PlotRange->{{0, 28.}, {0, 28.}}], "\[Rule]", "9"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+M4LUhh0PrT+xy15iYmBhLsMv9up6QwOj6Fae5jEy7cMplMyXglLvP
LfUIp2QW0w2ccpNpIMfLeB2nHB9ufZc4VZ/hkhPF43dGvHKHcMoxMM3DKefB
9BSnHAceuTY8clQCAP2A7GA=
       "], {{0, 28.}, {28., 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{28., 28.},
     PlotRange->{{0, 28.}, {0, 28.}}], "\[Rule]", "7"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x8Y8NFM6wcuuZ2iJXD2WlfXrrdIct7hcOYUQUZ5toy/cP4r7okw5glB
l2Xf4hifwOUuM16GMZPY7v///11sEcJI5d8wplc2iJTshvG/S6rBmEuZVoHl
cmECnxjjYMw8tsdA8hIH3MwLjPVw0/1AZC7jfZjAQsbjUNZTgVKQHfJKP2Fy
cXwwJ89nnAckpzPOgjszUArGqgLJXRcz+wKXs0SSe/X/hwH/cbjUfwYkuff/
kpm2IKT+MyLkpL/WMtYgSf1PYt8AZW0XXMTMtwFZ7imvx3cI6xQjo/Dp/ygg
nLEQJPljpxaj0FNUqf9vlRjFvLJSxRgFMjja0OT+v5ocpMjIFr3+25/bi1+g
S9ILAAC9m7Jf
       "], {{0, 28.}, {28., 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{28., 28.},
     PlotRange->{{0, 28.}, {0, 28.}}], "\[Rule]", "6"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJzdUTEOwjAMtJgYeQAZ+AUZGVmL/IBWlIqlSC4S4hF5iD+Sh/gjxWkr1KbJ
yIKlREnu7Ds7h+pR3DYA0G11K8rXiah8X3Z6wba7N219PbfPuqnpWAXaflr9
/4VnRKD1uziEMSKQ0QIYS+R7PcgSM2B4PCknoyhKchmM9AMyPoMdTpUjO9iU
NeTN1AIYH2cNScaxU87CjeAIDfUczu2Io1DRJrvyfj2rCQpzsZgwKMwUyX8D
nc2OSZXihmZ5CaEfxQdkb7X6
       "], {{0, 28.}, {28., 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{28., 28.},
     PlotRange->{{0, 28.}, {0, 28.}}], "\[Rule]", "2"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x8YcNiYoXBj229sUutF5eQ4zBjn38Ei9/z0//9nbsoyFuA0eCarTxlO
yXx+rf04JX0Y/XDK9TKG4JSbwBiIR04Xp9xxRpG9uOQWMQrdw20m41o8cqaX
L3/FIvNjliEjCOhihPnScGlGCGDehyrzKYIJIuHMGL4OTdeHdC6jFiNG22Mf
j/3E6pT5fIY/cDlzr3PgH1xy/0PrP+OUoz0AAMcrzVM=
       "], {{0, 28.}, {28., 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{28., 28.},
     PlotRange->{{0, 28.}, {0, 28.}}], "\[Rule]", "7"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x8gcNP+Nk6590pyZ1c9xiHZw8TNXPjpQUgXFjl/JmZmZjVV5ngMmW93
dJj0gZJMzJoYci+ZmITmiDExMTIJf8SQA2oJdwbpY3ZHlwTJBYhyFAgDzXX4
hir3wxqoRWnu/4/tSszM1WgaG5mZPF+BGA9zRDhOoUkuuwRj2TKEo0qtdlwP
Yz5hkniPIhfGnAhnM3G9QZErZBbYBWXuYEIzcz8zk0DiHTBzKrrcf1tGJiYm
vewT57OFMdw5FRTWzEwSHMxqEWhS/7/lc4DDmpmZWwdd7v//ORwQOWY3TLn/
N68GAuVkj7zFIkcPAADenpHc
       "], {{0, 28.}, {28., 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{28., 28.},
     PlotRange->{{0, 28.}, {0, 28.}}], "\[Rule]", "5"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9CYEPRqd8w9nt1JpNGJLkiZuYZMPZJZmZm7vxPyHIlUOZNKaAcE/Nx
uJwDc/RGKLOPCSxnB9fYuxzGmsDHwGR74BET02N0N/1YK8rMEfLm/9cQZgy5
R0DzXECMY5hyPszMGZ8gchvRpGIYmbibwKxjTMVocn0cIVC314gdQZVKVZSD
sl6IrkfTZsUseBPC2lvyAEXmUzsTXwaEeeATmi4DOeYeEP30///lpahSy5iY
s38C6ZsKacvQtfUxZQClnsYE8E36jw40GVe/eDSdiXvLmTMYcn1M1qLMTJrr
MCT+Q+PG9g02qf+fTGRmPEZ3BLkAAFzjrg8=
       "], {{0, 28.}, {28., 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{28., 28.},
     PlotRange->{{0, 28.}, {0, 28.}}], "\[Rule]", "0"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.899909576792054*^9, 3.899909583452985*^9}, 
   3.899963582023436*^9},
 CellLabel->"Out[75]=",ExpressionUUID->"e2cfae0d-e991-47e6-9cf5-0bd790044212"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"measurements", "[", "\"\<LeastCertainExamples\>\"", "]"}]], "Input",\

 CellChangeTimes->{{3.8999096079460917`*^9, 3.899909607966549*^9}},
 CellLabel->"In[76]:=",ExpressionUUID->"f25a77b4-5974-4767-b348-045c3ed84c68"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+U4G0DA3vzd+xylkxAsBKr1HZWJmZ2Jt73WKS+JzExRfywYGrGIreB
iUlw908HrHIZTEyp/18xYZVbxcSyYYsxdrlHEb3vNJiwywHBRVagnOh87JKN
TCq8TOKtf7DJvTn5+sokRaaz2HUCwW1l0as4JecyTcUp94bLGVPw3VsIza3w
AkMuSTbyNJDaw8p0BVOOiYk7ePp0AyYscn/KmSCA6xamhU/XguOXqQ+rG79v
ylNjyrqI0w+UAwDZz7l+
       "], {{0, 28.}, {28., 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{28., 28.},
     PlotRange->{{0, 28.}, {0, 28.}}], "\[Rule]", "3"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+UYL6J7XYcUhmpL69rzsYqNTvo1///Xy9ilbP8CiTOLMImtS8LRK7X
wyZX2QUi9/BexSLnkg8kXplFRGCR26b45ucJ0wmn+S5jkczgVTE98v9/ecg/
LJJnT4HIj7oTsDkHAs5ITsYtuY7rKE65f0X6H3BKflPcgNvUoirccl645b7I
rsYl9bfeHYfMm3naIuuxiN9bGK7NILjgO26XUAEAAFRX7rg=
       "], {{0, 28.}, {28., 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{28., 28.},
     PlotRange->{{0, 28.}, {0, 28.}}], "\[Rule]", "9"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x8B4P2WhoY8cZ+GhvqGhlkvX778gpAKE2dmZmZiRhC6c27B5JCFoYQI
TO6tmzgTEyMTE5Owto6OjhSIpYow9f6BAwdCmZllbwPZU5mYuYqQbASBH682
MPPueW3Fx8TciOncV8FM8jpA+xp/YPOMHsgtgV+wSf1vATnoEvZAADk/B7sU
WI77G245ZuOrWOXAbmGagl1jAisTEwNTA3bJNFB4aj/GKvdlSahmYyN2G2kO
ALNjl7Y=
       "], {{0, 28.}, {28., 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{28., 28.},
     PlotRange->{{0, 28.}, {0, 28.}}], "\[Rule]", "8"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+M4NGqIiYGIAzFImfFwgSGcscxpMIYmBihMAxdLhykx3pNCZAMx9Bo
CdRh+fh/GEgnutwqkG3W/4+D9PeiS/aCdDKWgPRhyEF0giE2P1pCXXoMi9xj
a4g+TC+CzcXuQ7B7IKGD6cNHqyC2yWIYeSwcGqKl6FJFsNC0RvfbsXCYz1Y/
RpeC2hOOGR6wOMDqqzBsboOC4yU4QoIGAAASv3zq
       "], {{0, 28.}, {28., 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{28., 28.},
     PlotRange->{{0, 28.}, {0, 28.}}], "\[Rule]", "9"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+84N5EWf0f2KW+BzCKM77ELneO0f0dxyqsUi9UZb6sY8Kur5nvzD9f
ttdYtQmn/v/OqPUNm9wygYf/UxixuuUih/v/K4yMU/5hkVvEuOu7MaMGVu/5
mfxewCjyBasr9bl1ODhPYZX6f1CEkbkRu9T/v8mMzjik/s9ilP+AQ+oUK+Nu
HFLPtBk9/2CX+p3CaPwKh7b9jBpYwxgE+hjrcEn978vAKUVVAAAlAdvi
       "], {{0, 28.}, {28., 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{28., 28.},
     PlotRange->{{0, 28.}, {0, 28.}}], "\[Rule]", "9"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x8wUA+0fT9uKQaGemxS+xkgAJtOBhjAIbcfRDlglQPa5YDVVLBgPXbn
gG3CIecAtgi7U/fXQ1QwYHUNTJEDPkmcQfcf5CJ05+zfj1uungHOwAi4epDP
9kOdiikHB5hmwgGmH/bX45SC60U3kH4AAONCl5c=
       "], {{0, 28.}, {28., 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{28., 28.},
     PlotRange->{{0, 28.}, {0, 28.}}], "\[Rule]", "3"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x8wcMmXiSEXh5Sc2Hxf0QNY5YrEDv4/xRyOXc76///fvtjlGFYDiVCm
x9jkmEByYcw45b5ayb/BJmcClHuEyy1AuQ1M6kV1LzHlJu77//+ltbW1tGjN
D6yageBBFvM+XHL/70uX4JT7b5mGU+qmqB+mGJQ+xnwaXarRBS6HETZFTBt/
g+hH6oaf0OW6mZl9J1/+/zSSfx2GdT9qRZmZ+K0UmRKxOfBlvQkzc8bGbzh9
QGsAACmC1hw=
       "], {{0, 28.}, {28., 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{28., 28.},
     PlotRange->{{0, 28.}, {0, 28.}}], "\[Rule]", "3"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9O4N6BKXV1dc+xSb0TY2T0LWDcg03uJNPC7T+X6/zCJvd1CZCYYIfb
TnxykXjkXPDIlUHlfv/5/ANJ+MGT/6/6VQUcgSDOTdeUW8oxGSZlw8GbHtwq
6nETCL7du3nzyZrNx2Byx758+f//O8MSnNZ9Z7yKU+60yFuccqsVfuOUu6y4
GKfcfxepbzjlkhg/4JS7O+EPbkOpAwAaT+ld
       "], {{0, 28.}, {28., 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{28., 28.},
     PlotRange->{{0, 28.}, {0, 28.}}], "\[Rule]", "7"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/6c9OCOoeBO7zNcYQWZmPaxSl0yYmZiZ87BJPU1mBsnxLsEil8sMlmNm
LlqI6QwmJiYGJhARji6XANRh/GSrK1Azzzw0OaBxls/+/z8GlBPbiik35/2n
RyAHRaCbCZQTMHEAuYVpGZpUEcQZIGIDmlQGP9j5YAJN6pIoUFhgZhVYruIn
ilwmUIvNPqD/2UCaW5GlzsvAXCDHjO7OlUAXGH/4/6kP4qCpyHKrgKr5cuWk
IW558gddDuZOrk5UZz7WgMrJKSi0oQdKB1guqR9dfNAAAFxcYrE=
       "], {{0, 28.}, {28., 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{28., 28.},
     PlotRange->{{0, 28.}, {0, 28.}}], "\[Rule]", "8"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9uYHknEFiy851EFb7Wn8HHx8oEAXzIMpkifExIgO0MXGaeIgsTKgiC
SU1CiLnEKkAYMLlwmIzlzS/vLUEMlpkwOUYmJqXJAfsuXbr7/90EsHXT/yPJ
9UFYJ/3B+ssRjlRiivgFZpwRgJg9ESHXxHQJTK8yBMtw2K5CyN3Z8RtMm0J0
mWMLMYhcyUNscp5gOYvk6+8w5Z5aQP1pGv8eQ/KZLSdUtgWLsTM50MMaCWya
aAPyBjYpIPhQx8HBj0OOCgAA7CRjyA==
       "], {{0, 28.}, {28., 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{28., 28.},
     PlotRange->{{0, 28.}, {0, 28.}}], "\[Rule]", "2"}]}], "}"}]], "Output",
 CellChangeTimes->{3.899909609209907*^9, 3.899963584726383*^9},
 CellLabel->"Out[76]=",ExpressionUUID->"0440478f-0f47-4098-a78b-1882c3b4f8f5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"measurements", "[", "\"\<TopConfusions\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.899909622136644*^9, 3.8999096221535053`*^9}},
 CellLabel->"In[77]:=",ExpressionUUID->"7c02fe2f-c8ce-4484-ac92-873d0def9c4a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"2", "\[Rule]", "7"}], ",", 
   RowBox[{"3", "\[Rule]", "8"}], ",", 
   RowBox[{"6", "\[Rule]", "8"}], ",", 
   RowBox[{"4", "\[Rule]", "9"}], ",", 
   RowBox[{"3", "\[Rule]", "5"}], ",", 
   RowBox[{"8", "\[Rule]", "9"}], ",", 
   RowBox[{"2", "\[Rule]", "8"}], ",", 
   RowBox[{"4", "\[Rule]", "6"}], ",", 
   RowBox[{"5", "\[Rule]", "6"}], ",", 
   RowBox[{"2", "\[Rule]", "3"}]}], "}"}]], "Output",
 CellChangeTimes->{3.899909622691147*^9, 3.899963587812405*^9},
 CellLabel->"Out[77]=",ExpressionUUID->"a7a5b434-e3e7-4588-8208-35cdccaf54f1"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Finding Hidden Features", "Section",
 CellChangeTimes->{{3.899909526315485*^9, 3.8999095339702168`*^9}, {
  3.899911482792962*^9, 
  3.899911490609777*^9}},ExpressionUUID->"265cf13c-abfc-42b8-bd87-\
513cbaab6935"],

Cell[TextData[{
 StyleBox["NetMeasurements",
  FontWeight->"Bold"],
 StyleBox[" can also plot the mean activation of the results after a certain \
number of layers. Here are the mean activations after the first convolutional \
layer with 6 channels.",
  FontWeight->"Regular"]
}], "Text",
 CellChangeTimes->{
  3.899879273632566*^9, {3.899908206546857*^9, 3.899908224759359*^9}, {
   3.899908268428074*^9, 3.899908280345195*^9}, {3.899908335106683*^9, 
   3.8999083478077602`*^9}, {3.8999349137578506`*^9, 3.899934922396121*^9}, {
   3.899963518445606*^9, 3.899963573144479*^9}, {3.899963613584235*^9, 
   3.899963618726877*^9}, {3.899963959742036*^9, 3.8999639782802153`*^9}, {
   3.899964248885151*^9, 
   3.899964263813781*^9}},ExpressionUUID->"13d45ae9-64cf-4981-8d2a-\
be20218175b5"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"activations1", "=", 
   RowBox[{"NetMeasurements", "[", 
    RowBox[{"tdNet", ",", "testData", ",", 
     RowBox[{"NetPort", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "\"\<Output\>\""}], "}"}], "]"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{"ArrayPlot", "[", 
  RowBox[{
   RowBox[{"ArrayFlatten", "@", 
    RowBox[{"Partition", "[", 
     RowBox[{"activations1", ",", "3"}], "]"}]}], ",", 
   RowBox[{"ColorFunction", "->", "\"\<Rainbow\>\""}], ",", 
   RowBox[{"FrameTicks", "->", "None"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.899909653370782*^9, 3.899909656623279*^9}, {
  3.899911599042798*^9, 3.899911607426876*^9}, {3.8999116478402233`*^9, 
  3.8999116504103537`*^9}, {3.899964184699546*^9, 3.89996418556161*^9}, {
  3.899964216180044*^9, 3.899964238496663*^9}, {3.899964287897092*^9, 
  3.899964289735824*^9}},
 CellLabel->
  "In[105]:=",ExpressionUUID->"a901ff96-8a4e-4a6f-988d-f2dfc6a550e8"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1: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
jmYrp1RjY1xqxVqi/y+eMjaLNe0m3Fx06NjMfKLH568tCrrGhEB2e4dCKRs7
qk3duwg3rb4wBQcuMjFpz5VFW6vZ+GDmv8OZcFO2rU4r6BwTn2x0oiva2Ji8
a/vCSZpkXj06eeKnCxM/5HbYFvwlXLvpUBClTUG4W2vo0iYmbr1/K/FhIQf8
jvYM3S0URqvXf5acTT6/uoHlMZ2DFWZvt5ZupOB/dL5ZhzoTT06oGJrnsLHw
0aRVTmT+39ea3yl6m4lRj4DuJHU2bJfp65UuoMBb/FkuZSMLRv+pH7pzhAWL
0cnWe4f4mO6uK9GtyobCxPVT7+4zUXzSdFYSjY81XV9FpUQ50Bd7NDYgw4RL
zH2t3QV8BNvJ7dpuw8G6dXJ71md3Id2cGbohg484mumTczfJupNXbrr0rAv9
fep1tx7z0RyxzPfpbQ6Ef9ZvaRjqgvyzkHWbcvkYvd1/0ek0Bz/srS2tyb7W
/Wd+MbyeD/Ec6SvzF3DQc/Tr6ej9LFxdonK0YZCPiwohK59osjGr5uDYJi4L
hzZqhXyYTsGI62qSH80i55Z92UGfDd++OXeOS1J4+upRX5YcCx4ntjvPJH7D
/V7F10HCWWkFe9EG4jduX3POeJBGzt0x9sxWwtOUvIjPSo+ZyPV7qfPxBdFP
CVYsJftJNTR5dRGeFsnxusNfs+HUaa0MUg++/uEUPY5w0+RWnijh6cO4N0bW
RFc8avtOi+iXuXW7uom+eaopPYDoHxjx1mtj/zdP7S5NzjFq5sJ+9RaNY0Sv
2+drI3qOgWnlbZs6CHfcmKZFFkQXf3cjtOoMA2vvOJSpD3BhOf3oWWmi68ns
mn/6ALneyvJxgEQvjN4t//OY8Ouq+bz0F6sYMPcYLFU+0ot2ddehd9WkPueM
/s6ua8HPeoXbOq29sN1nKX68isJSnkr0LLTg5HG9j2NreNhaI6l0kPDld6Ht
j6LGZtSOqg3f2cPDwIXVQb8J18TFQ/tyMpuRJ612VUmZBxUqc9lFcv2J62Ij
R3uacT1Iy+ZcXi/+dPC/15PPx73fzadcWyA2VzxV8QcXakr7v/0i62x8rbbR
yIIBdTrrGUOKi2OutOUhhHchOwUft1xrRV3xyxkzzXtQ0nZh86dUCquKs5Rv
D7ZhwOjiaonKbuj/uhk0+xoFqRNhS4s62kGnLXx1NLcbczu8SlZcIZw6ntg1
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
wcD7XieDXOJDnNPqR+Tb8NM74/0mAy4c1FtXu5H7rV80WMM0bsX509muK6K4
eMZfUWJAOOtmsviafwsDV+HXv5r0TYPd57Eucr7zkzcEf3vKgBG9iLvtPcnF
Wm1Xk4huMnRsmUgc8VGbvzuvJpxVfTRT+1+elZhr9TebcHbS/bGzYSTPJoa8
szlD9IDo6B/3SJ7dXrNtCUuBjps/FpoV/qrCmfThV6nPCLcjthYHaNCR9+Z7
inRtFW737PVuuk98fYpj7aGDdOhrvVhUIlUFxd91gZE+FFpGd67exaRjYOsf
7QP7K9AtBgX1mRTuRf8Wm1rdCElbiQf94h8gcmboZoYeHz33rN4Yc5sRLOfu
H9tTjNHdVz0+Ed8mVRb5rr2lHT8eTY6XrCvCj7avYt/e9ODml8nT3bYzwUmc
o6cyuwj94Xo9LfrdGDIp0ru7kgXtF33PJNsKwf17LcOSycGjoj9Xfy7vwuig
LsNnZxHo3C6lPQXdsDzyKftHCANj8wMuJ0UWI/7Up4bgZb04HG578Og4HWK5
9qdshj/CYemlSiHx6RJlrrKPqxrADt1x/28CydlSYluy1ITIiBhz2lXUAJmm
xzKdEW0YvSW/eXhmH95eHVq1opEGiXWDF2yGmfjVtSak750Q+3w+BNJX0xGw
WEZRJZyNPZI7qmJihShOn8eyKafh+N1s8ZyHTGR4lfiqfxBi0PBUod4SGtwK
qhKqO9txNCtVwn9MCMepycGsIw1oMVh4qDqJ+N0Mv4tXO4SwKOD9ZNc14HDA
0uhONzrE1Xn3dRWF2NBe80lmOg2emzf7GlXWI7/+Z6V7jgAbFzFDl0fQIHXj
4E1ttVq46p2iv1kvQNuNkJW6DTS86xNZEyZfg7rdN8/6jpD+E17qfDpOw166
/mG9C9WIGDlOldcTnt6tRLMEHVNKuVJly6pxfPOdowvziV+L3JPgTfKsjVx7
dvqCasjpMRvXviR5InDz8MoCNuSFQzZdZO69frb7s080E4/kM5V06thotmFL
9JK8+ZTvyx72Y2Lt+NOgbwNseEhdrnm7/l/fHf1y0ZyJKbOO0VplOBA8tw/5
CpKTjedpNo51YXGIhlmJHgdBilEf/uyikOCmPNchswsu1OsZs8w52D7laFKd
JZljz9ntiiFdcPeMuvJhnI2wxkyLVxsouCbWTPLWZyLGU+yBvgcL8YE6e71H
+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
cn7Fv+8Lkh82uSTVCqlB20+sfB7cT/x6kPWWQvARBQuJWc2Ijak7uWrVAH74
SDu2r6EwVKJmUT/eiB0hDxqqVg3BfI+uvi/ZN/W0WyefzmhAx9b1sSdThlBj
VmJ89jwXnqPOc4N068H3X3+F7PsBNEtpqsV28dAjYH/6pG8j3C0bt7McuHD5
m2RVQXpUa8DgrxNRLXBZF1OwzrAXGepfRDSTKXyU7bA8PNGB+RPre/gsOai0
Zrb9e98qL1K6eIN0O0RKZXJV/uPhwa/cZ/nPKdzK6EtWpDXh0JeJ5/SRfnyR
nXkgaxPpMzqbhiMkaIBZxOWqEwMYK/bRy15GwfNH8DzngkYkqXao1eX3Q7M8
8Zs4KCQFvzsea0RDsOuK+ZIreNirre+Z8YmCisMy/hmvmyGWc1No9yU27jZU
LRAl/f7u9evnRI92QUhPw551iIEozWv7N3/iIcs45pT0ZhbWJkSe1xino3D0
v6DPuTzYU28TzF1YGGzK92ctZWK5x+yRr0IUNoh3CRYc7EF58YIa1l0Wru95
RE+0I7n/pWye+o9uFM1crVy4h40sr8HYUJIDqeclfXvedMHg45BVxupe+Gka
Lz7wgPQW1mo6T6MTsTZ+D9skObi/RVnwOJnHOd9WplUHtWPk3pk3VD7hbNf8
ne/I+Sk9tdIxPaENf8NW3T+oTEMmI6ZtS0MV8iv2pDWRffAt+2KXZ0DDr4x2
vm9uVXBcLKj+7RaFmXyqBuOXaOijJg8k5lRinXknu9CGzKW22izFZU0IUYn7
mBlZDlHphwUvO3gQXOLQ81u1GcUPX9lsjy7FJRvHlLcsMv9XBb6NOrfCyOGw
d+GnIty50i3/LKEPKnsKBbmV7Vjao3vqHYqwKqTvwvF4DrY73577q7QZI2of
7zsplcD92FTW8xNc3BIJHD4U14CfLR/SXS82Q3F/z4jypQF85Z5/SW9owjnN
+VuEq9m41ph78YT+v79vS9euy2rHkJzA87wNXMQskr8NwrcnI5nW92a3Q+9u
yBmDsT44DLN+K7zuw3Hv7gNCwc2we+y29e/TXmyv0AtYWkBhWe8lWoF1E8I2
x98r3saG5TX7e5KP+7GvOiE/KawJu/Y6TgV7srFneZWzv18/ylJ2B/mhGbeO
7vtZebAXjvY1mzW+Ush6Kas/w7QVDpxKp9Vk7hOXa//arcRDDrXz07uZXci2
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
F+Kld3z45T1cOBwuPCOr1YBjcy5vaQgV4pWmQqq/LQfazp7OInbEK+1z/YNJ
PvnZqVdMlyO+qWz0e2xtPTKwyz918npnnZNY8p30CYPvrrc06qAkm6xlSq53
TqXY82VBxEMH+3WNqLWI6GyS8yLHv4hbsqJ6KhuvGnrObt1ah8P9C7+ak/tg
farzfKkOC6+4DpXC5Fr0VASO1RJvDe+5fsXlvz6cLrwcE36Z5Jy8llOHCGe3
Fx7gfezvge+6deFnQquhQiu7+ucl8f18vwcFQXRcM7zZuvwOeb7mR+KGcoTY
xP3qwjaj4/qdh8oOgRT4hDzbHUT4Gx3tqxm4lY7f+89fUvWloNfYwm8OuV7t
swvSMuNpECjq9j/fQoHoFp1nLMLTg2/+jKcQnm58eejjfcLT7tpjoboH2ch7
3BpzjvC09ljCtF39VHytaB9Sv8iGQovv+5WZAvhvKHp65gkV/7TXNEWKcyDu
uPDsmRIBDJ2OVClkdCHp4L4PrlwOdqr9OqQ1+f6s0Lu7Dzh1wtZS/PkewqMZ
lMrsSR7dZQ+9XUt4tLBj1sd9XTxUBurbnyfrne9RbRg+g3BTnpK1MYsHpZOG
f8ZI3bQ4hV2/rR3xMlJeThe4aOLy6yIJTxt01eMfv+lAMZTD+pU4GPbZGkIv
F0Dmx/RZ2zy7YG7hqLKSyUa10cP1G98IwNj44t28UcL9tK7BHgHJz9fOr1Uh
4yy53+Wx6lQnvFi1InVSPDw4kJ/6goxz5pvrlvyv7ZDNiz/qJ80DsvY8zCV1
/2nXHeeTuuRW95X5elyIyD9u0pj8PO1Sg1X8eAeu9czdZPQ/RecdCPUbx3Eq
QqQUqaRF0aLI7Nc7GiRlVqhoSEJRRqGkokEqGUWhQSSVlDQoMs7OPDecm+7E
UahQyu/x7+Pre9/xfD6v9+vG9yH+zrYtW2JM/P3NdK3cfuLvb18/a0kv5KIg
xsQ54poIA95jEd1iOn7N0eU9387BueNtf5/ZirDkmsHqP+HtYCoHP7APYOPn
/qeuC+eLUGIRYlDIYSHUWHfEZjUHU3ZaRi2xEIHqd3zyg7J21H502PCxgINZ
OSdybUlfmrnIIjPsFfHc7wluGxdyIeVtLl0WKIJPVcvF9D8MjCqsKhwy46LB
Pr83hvC0LE91NOszA0st41f4kzrPFnSwlhE//TRrnqzbJgaGzJj+haQv8G6r
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
RYi4ozZ7Nkpx0f1YMTG7go5FL25cnMHrxI2jyWqBd3m4dl2TojirDaNjat/T
/grgwR+z/ZghwIKhazWRQa1wK2V+NB/kI3bM5/2PKUIc1lo/8MuAiinfN6TI
+AoQIbHWx8SjE46xL/0jtJk4r3BCdmS3EO/156uIY7gY9fl5QuIiuW6L0p7N
IPPq5l8PA2c7BiQkb/lTW/komfg9Znw9Vse5shfmB1PRKpzdqqXAQ4iBrNcO
kkPeaP9wfLCfjp3UKXWF2Sx8+tKSa9lEzvfg0+FFkhzY3j18ceFJJk4HZqnN
HveFwMhdZbu4KDT+/KP7QzusB85sXJkthN3uMzfP3eDA5UZOZW0im/z/n7Qe
DRHM97jFPyhggbug48Xv1zzIbHksyc0VQfFMtZTpOhrMVwSsFN4i/6+/efeV
zyK8yL56vmpRM1ZEa4j+U+mCcM7RsUrCNZnl+raj1EZw1txxyya554Xj1pzv
r8l935mprD3QBCkfy6isswKoFXgf8CN1LZ1kkeiY0wpTzRcbNHN5UMk91Lic
vO6VjJ6pmZtomCSWKp31mItTD/6TM7wqwslOZ921MxmYk1LBmneLg8s+klb1
+0V47fY2TuEnE8d1Kj4bS7Fx30ZWLlhehBw1lbc6hzug6RCg9ruCBdmw6RXS
hKepexYr3+WwseLG7wEx4dS++fWUmX50zHYcySzTomA/f13CLuKnPub2232J
n+6ffrZ3iPhp2bopDn+yxOg5yA18K89A/urT84w8KJhx33zoIuGaQDpvroNN
O4IzT31fu7US65aZPnYi/Txay0skmccGdZZb7p6EKrha8Q2LCe8GC+ZM367H
w+e5+dZ9bjWoG9qyI91NDPXDF4NH3vFhErg9LjyvFqrC/dV3d4qha05rDW/k
Q/ez0ZdeSi2kbvQaeL8TY6uQ3uIn4mGD3TcFykANPm7Pj9lPE+Olmm/BbtK3
btxyvrBMtgY7V/6yba4W4x3jyPfUj2R+GemXJNfVgLHtbu+yyh40XnzquHpe
J/Z5XzIZ/VkH28enHrw+3I2ShbVjw/vGn59cO7pvQgNedstM6dj1Ff1DIZYT
CWcV/ec/2VnWgN6pb9P3Sn7FiHZs0pmVJM9XfdoZr9CIwPDGwO3vv+J9fVmN
PlMIUfEVk9GQBpxb/tb1fGEPNl1fmxtl1Ilv01jKgqn1iD0Fz7nkembkH5I/
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
yf8DjYMXPA==
   "], {{0, 0}, {78, 52}}, {0, 1}],
  Frame->Automatic,
  FrameLabel->{None, None},
  FrameTicks->{{None, None}, {None, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic}]], "Output",
 CellChangeTimes->{{3.899911599980442*^9, 3.899911607690187*^9}, 
   3.899911650714118*^9, 3.899963982454208*^9, 3.899964119542658*^9, 
   3.8999641859632998`*^9, {3.8999642297468557`*^9, 3.899964238744321*^9}, 
   3.8999642900322533`*^9},
 CellLabel->
  "Out[106]=",ExpressionUUID->"eeff9078-b48f-4ade-a12b-37beb5d8e796"]
}, Open  ]],

Cell[TextData[StyleBox["Activations after the fourth layer. At this level the \
output is a convolution with three channels.",
 FontWeight->"Regular"]], "Text",
 CellChangeTimes->{
  3.899879273632566*^9, {3.899908206546857*^9, 3.899908224759359*^9}, {
   3.899908268428074*^9, 3.899908280345195*^9}, {3.899908335106683*^9, 
   3.8999083478077602`*^9}, {3.8999349137578506`*^9, 3.899934922396121*^9}, {
   3.899963518445606*^9, 3.899963573144479*^9}, {3.899963613584235*^9, 
   3.899963618726877*^9}, {3.899963959742036*^9, 3.8999639782802153`*^9}, {
   3.899964248885151*^9, 3.899964263813781*^9}, {3.8999643715466557`*^9, 
   3.899964428052596*^9}},ExpressionUUID->"9677fb0c-edfd-4671-b02b-\
86d4b720cdef"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"activations4", "=", 
   RowBox[{"NetMeasurements", "[", 
    RowBox[{"tdNet", ",", "testData", ",", 
     RowBox[{"NetPort", "[", 
      RowBox[{"{", 
       RowBox[{"4", ",", "\"\<Output\>\""}], "}"}], "]"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{"ArrayPlot", "[", 
  RowBox[{
   RowBox[{"Flatten", "[", 
    RowBox[{"activations4", ",", "1"}], "]"}], ",", 
   RowBox[{"ColorFunction", "->", "\"\<Rainbow\>\""}], ",", 
   RowBox[{"FrameTicks", "->", "None"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.899964270348881*^9, 3.89996431856929*^9}, {
  3.899964349987677*^9, 3.8999643955774*^9}},
 CellLabel->
  "In[124]:=",ExpressionUUID->"16d13f6a-e2c5-48b1-b476-c229f47d5ffb"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1: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
9SN8WF9o9uEpdcA5o6gxu4uMnK/JsXGVXNyipwTN1uvGZPfOmKV6ZNSf0jvn
FMLBAo29S0Oe0lDwQ+3pizQSUkd2yft7E7m65bThyr9eqC/4Ir93BwlvlI5a
5TSwYFNWDeEgHbHrZd2WEzk5kDXrsojoJaMnmvOyWXQY5Jc3Zy4g4fXv93tJ
/ixEdxmsEqAXCuXKK6KiSLhS+cS2VpuNtCTXoLR93QhYNTiHMo+MbYsM76zx
4MB/iVjE7y9tGG/X/zKkVooZ7U3uzZY8BG2aH9022gJTpaOh0RPVuJg57dKS
YT5kD6bEZrEouB8kce9OEhUZx7VGbkz+97yLnW8rRil4NN51daZhD35q+NU1
iQ3AgnZGh7OmFcmVdMtiGRZiHN1txcqFSG4yn3lZvQMfDHIOhLznIIn+comc
Jx/ddxuDDht0YtHmNL3oo1wsn/naISWIh7DPiz8E+XTg6h87Q2vCY2Xooa6v
CI5eHa1+7bID8f63n6xY58OG8YZfG5dxBJjY1FqRHtCCa4dTHb3lmLBi8QLK
vETwG1ZJ+xJAxYezew7dedmLje7R3h59IlBOPZLMJnrMbLH4yJXd3fjb8Ffh
4qwBTC3Vy40JoyBpW05O80Q7lHzE4gZKRcj/peOZSaWASylUC7VuwZS40oL7
GiLcMA9PeP+cCv4RyCc8q8exa60hYkpEPxs0MB6atMLxyAN150XVGNX81X+U
zEdAzlS42LU2vPK9P6flQDlsmp3Pqyfx4KwvtJla2wlRh+hE/32Cn28b1Jhs
4WKJdO3JkDPd0FrStKJQjQzhpQsqdo4cvDVYGymv2It9jLSTiTEkXE0sXnls
FRuKKZHdgbvo2N77KuMUSPBQvbylM4uFomAJ7QQjBlQmrPXt5UlQ+d039mUr
C2axtmk7mnuRdHv5H/19JBzND6GRmSwwjy72N1zeg8RIM4PZwyQ8uec55/c0
DsQo9TcXfWrHSF3D+aMiMlKFN98v43Hh3xg+cmtWK35Ix5geKqxGMkPLZymT
D26Pk48Xh4IlHqm88SsEjzw8xrzyh+DMNwbTU4nzKJl+RDNRuwebFn29XUb0
gOmHCfMN21tBz0XSuaUsBN3ZddsjT4gbJbUBuvGdcBBrWm74jAu/X25DH7R5
0Hibuu9eUy8KGYuLdC7x4VXzRuW2NpE7SaX9s/f1oShsM2P9EB8nvk7blL+y
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
2o4eLnWqw928y9rjeoPQ3//eNILg4Cm2cf7YoiYo1eUcG3pD3Oevqyp2nBXA
tnqPwyr9VqSF1a3O7GGg8bk/Q5fGx8pVyhOe9f0ofKRreiWpFcvlj/U1X2Qh
dpnhrPwwIX6n7H+e/ZaCXPH9QdpurRiyWfnGxF6E4lDaUW5hG5IC8rbtTy8D
2cZqOD2Uh/nea4LKiDnfNzEQaRhKQuOMK8FFMmxI7vx+4lwGA976jnqvfpdA
/6q34g81FpQvSflojTMg4/ZE/A+7BNNyX6+5OszEtS/r3t9dRnCR3vkeqzkk
CEPX11RtZ+GhKSueerkTIcyEixMxZLxZTKLZLuXCbX+n8bpYCoSHdI+nr26H
tdrXOL0UEYp84mKXKrehJKk9V5/gtoaukqlceSFO5+nVXdjUi4qrx/gp+/mY
5hnTSz7HwkiB2K5QZzbCH5xI080kuKVeOfnwl254vBlUn/zJRutWvQ8axQKs
qKyceaK5C4c2da3w6O7DANWv7buEAM6/F+3Jf9iHM4GGJqOfe7CyWVbqEpuH
oyN94acfsqGzsqD0KeEXB+ONvs9mEzyh6mntcrsfEuOkrkOneeDrXr97jTjv
5SrvfTwj2lF2NP/+6W8DqMgLHpQd56Gds/UwrCm4viv+bOPgF/zuTTW3/8zF
uKNSW0V2E+YPszd9+TAI9sfh7ylCNug/HNy7fzbA3u33Ka93g0hTFRy+942N
4icci61/GpDTmrRKuGMAkx2bdN4GENxVL3E9WZ4KqfMlj8ZE//3+qUTVrFoA
+1tjbRXf20Aq+zy8J6UfOv0bR3qWChBjP5kpWchAnHWIdnpoO1z2LcpU386B
MKvY8vMXPuQShf8USihwe/7uqtelbqLnWvwWzRzAjJhE+rvqFmKfTv15lFeD
HavDtNK0BfiUZ6Lfp0hDwZ59K16WkqCdt2BFcxobqdeXSN5KZaDK9+uQy2gJ
jK+52q7WYOHulN+8A7P70Gd14hSJmGtqNGO5LQNMMCQmztbHMLBMsZC5c7IE
Sx2r148sZkG4JT2paHY30jYtkz9A9J5Y1GTFScJvAwVnZ94qpcCpZvSj3N8W
aEwfc4pYL4Khm6Tw1mgr7urdOek/zkJRUIv0jGVCmMoX/1zj1ofpr7vf+xP+
sOnJV9YJ434U5fu+XFbKQ5yGBb+Y2Le+HVe+mi1tR8LzuOz3xP4+7134/kOV
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
ZYI796urO5GTZ1/+HjnS1Y3/A+SQKzM=
   "], {{0, 0}, {24, 72}}, {0, 1}],
  Frame->Automatic,
  FrameLabel->{None, None},
  FrameTicks->{{None, None}, {None, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic}]], "Output",
 CellChangeTimes->{{3.899964282011716*^9, 3.899964319153364*^9}, {
  3.899964351200427*^9, 3.899964395925502*^9}},
 CellLabel->
  "Out[125]=",ExpressionUUID->"eea61062-1cf9-4c2a-ae93-707c65754d20"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["tNet"], "Input",
 CellChangeTimes->{{3.8999657833161707`*^9, 3.89996579039228*^9}},
 CellLabel->
  "In[126]:=",ExpressionUUID->"ea88d566-0e9d-4c33-af14-457704b3630b"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {24., {0., 24.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  
                  TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Loss\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    StyleBox[{
                    InsetBox["\"Input\"", 
                    
                    Offset[{0, -7}, {-2.999999999999999, 
                    8.038469108735353*^-8}], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"MyNet\"", 
                    NCache[
                    Offset[{0, 
                    Rational[-31, 2]}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    
                    Offset[{0, -15.5}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"Target\"", 
                    
                    Offset[{0, -7}, {-1.9999999732051024`, 
                    1.0000000535897937`}], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"loss\"", 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-0.9999999732051026, 
                    1.0000000267948967`}], 
                    
                    Offset[{0, -13.5}, {-0.9999999732051026, 
                    1.0000000267948967`}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"Loss\"", 
                    
                    Offset[{0, -7}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}]}, StripOnInput -> 
                    False, FontColor -> GrayLevel[0.5]], 
                    StyleBox[{
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"28\"", "\"28\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{1.4737193366014818`*^-7, 
                    5.499999999999999}, {-2.4499999999999993`, 
                    6.564749772133872*^-8}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.679489702911785*^-8}], 
                    InsetBox[
                    SubscriptBox["\"\[DoubleStruckCapitalN]\"", "10"], 
                    
                    Offset[{1.4737193332337029`*^-7, 
                    5.499999999999999}, {-1.4499999732051023`, 
                    1.0000000388526005`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{1.4737193393399298`*^-7, 
                    5.499999999999999}, {-0.44999997320510277`, 
                    1.0000000120577033`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999999, -2.6794897078907816`*^-8}], 
                    InsetBox["\"10\"", 
                    
                    Offset[{-3.889087192318317, 
                    3.8890874007337035`}, {-1.449999985262806, 
                    0.5500000388526006}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334007,
                     0.7071067622396939}]}, StripOnInput -> False, FontSize -> 
                    8, FontWeight -> "Thin", FontColor -> GrayLevel[0.7]]}, {
                    GrayLevel[0.7], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999999999999, 
                    8.038469108735353*^-8}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]28\[Times]28\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 1\[Times]28\[Times]28\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"index \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\[VeryThinSpace]range: \"", "1", 
                    "\"..\"", "10", "\"\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}, {
                    
                    StyleBox[
                    TemplateBox[{"\"Target\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Target\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"index ", 
                    Style[
                    
                    Row[{"(\[VeryThinSpace]range: ", 1, "..", 10, 
                    "\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}], 
                    Style[
                    Row[{"Target", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Target"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-0.9999999732051026, 1.0000000267948967`}, {
                    2.6794897029117842`*^-8, 0.9999999999999997}}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Loss\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Loss\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Loss", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Loss"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999999999993`, 
                    5.3589794058235685`*^-8}, {-0.9999999732051026, 
                    1.0000000267948967`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 10\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4499999999999993`,
                     6.564749772133872*^-8}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999998, -2.679489702911785*^-8}], 
                    
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]28\[Times]28\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 1\[Times]28\[Times]28\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-1.4499999732051023`,
                     1.0000000388526005`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"index \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\[VeryThinSpace]range: \"", "1", 
                    "\"..\"", "10", "\"\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}, {
                    
                    StyleBox[
                    TemplateBox[{"\"Target\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Target\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"index ", 
                    Style[
                    
                    Row[{"(\[VeryThinSpace]range: ", 1, "..", 10, 
                    "\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}], 
                    Style[
                    Row[{"Target", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Target"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-0.44999997320510277`, 
                    1.0000000120577033`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999997, -2.679489707890781*^-8}], 
                    
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Loss\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Loss\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Loss", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Loss"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-1.449999985262806, 
                    0.5500000388526006}, {-0.25, 0}, 
                    Offset[8], {1.0000000267948967`, 0.9999999732051027}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 10\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], 
                    StyleBox[{
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-2.999999999999999, 8.038469108735353*^-8}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    GrayLevel[0.7]], 
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], {
                    EdgeForm[
                    RGBColor[0.5664, 0.5664, 0.5664]], 
                    FaceForm[
                    RGBColor[0.5664, 0.5664, 0.5664]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-25, 2], 
                    Rational[-25, 2]}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    Offset[{-12.5, -12.5}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}]], 
                    NCache[
                    Offset[{
                    Rational[25, 2], 
                    Rational[25, 2]}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    
                    Offset[{12.5, 12.5}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}]]]}, 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    
                    Offset[{-10.5, -10.5}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    
                    Offset[{10.5, 10.5}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}]]], 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, AspectRatio -> 0.7, ImageMargins -> 
                    0., ImagePadding -> 0, ImageSize -> 16, PlotRange -> All, 
                    PlotRangePadding -> 1], {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"MyNet\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetChain", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["MyNet", Bold], 
                    Style[
                    NetChain, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-1.9999999732051024`, 1.0000000535897937`}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Target\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Target", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    RGBColor[0.584, 0.51, 0.839]], 
                    FaceForm[
                    RGBColor[
                    0.7226666666666666, 0.6733333333333333, 
                    0.8926666666666666]], 
                    DiskBox[{-0.9999999732051026, 1.0000000267948967`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    StyleBox[
                    "\"CE\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.33], FrontFaceColor -> GrayLevel[0.33], 
                    BackFaceColor -> GrayLevel[0.33], GraphicsColor -> 
                    GrayLevel[0.33], FontSize -> 10, FontWeight -> Bold, 
                    FontColor -> GrayLevel[0.33]], {-0.9999999732051026, 
                    1.0000000267948967`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"loss\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "CrossEntropyLossLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["loss", Bold], 
                    Style[
                    CrossEntropyLossLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{2.6794897029117842`*^-8, 0.9999999999999997}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Loss\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Loss", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, FontSize -> 10]}, {
                    EdgeForm[{
                    GrayLevel[0.5], 
                    Thickness[Large], 
                    Dashing[{0, Small}]}], 
                    FaceForm[None], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    
                    Part[{{-2.999999999999999, 
                    8.038469108735353*^-8}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}, {-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 25, 8, 21, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, AspectRatio -> Full, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    ImagePadding -> {{29., 29.}, {29.5, 19.}}, 
                    ImageSize -> {223.0000014737193, 103.49999999999997`}, 
                    PlotRangePadding -> 0], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    GridBox[{{
                    ItemBox[
                    StyleBox[
                    RowBox[{"Input", " ", "Ports"}], FontWeight -> Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline), 
                    ImageSize -> {1, 11}], CacheGraphics -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"image\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{"\"Target\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TagBox[
                    TemplateBox[{"\"index \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\[VeryThinSpace]range: \"", "1", "\"..\"", "10", 
                    "\"\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Short], "SummaryItem"]}, {
                    ItemBox[
                    StyleBox[
                    RowBox[{"Output", " ", "Port"}], FontWeight -> Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline), 
                    ImageSize -> {1, 11}], CacheGraphics -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Loss\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`FormatSelectedParameterGraph[
                    
                    Part[<|"Nodes" -> <|
                    "MyNet" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{6, 1, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{6}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 6, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {26, 26}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{6, 26, 26}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {6, 26, 26}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{6, 26, 26}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{6, 26, 26}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{3, 6, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{3}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 3, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 6, "$InputSize" -> {26, 26}, 
                    "$OutputSize" -> {24, 24}, "$WeightsInputChannels" -> 6|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{6, 26, 26}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{3, 24, 24}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {3, 24, 24}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{3, 24, 24}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{3, 24, 24}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Flatten", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> DirectedInfinity[1]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{3, 24, 24}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1728}, NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{500, 1728}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{500}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {500}, "$OutputSize" -> 500, 
                    "$InputSize" -> 1728, "$InputDimensions" -> {1728}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1728}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]|>|>, 
                    "7" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {500}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]|>|>, 
                    "8" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{200, 500}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {200}, "$OutputSize" -> 200, 
                    "$InputSize" -> 500, "$InputDimensions" -> {500}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`RealT]|>|>, 
                    "9" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {200}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`RealT]|>|>, 
                    "10" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{10, 200}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 200, "$InputDimensions" -> {200}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "11" -> <|"Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "loss" -> <|
                    "Type" -> "CrossEntropyLoss", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "TargetForm" -> "Index", "$InputDimensions" -> {}, 
                    "$Classes" -> 10, "$IntegerType" -> 
                    NeuralNetworks`IndexIntegerT[1, 10]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT], "Target" -> 
                    NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[1, 10]]|>, 
                    "Outputs" -> <|
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|
                    "Input" -> <|
                    "Form" -> NeuralNetworks`TensorT[{1, 28, 28}, 
                    NeuralNetworks`RealT], "Type" -> "Image", "ImageSize" -> 
                    NeuralNetworks`ValidatedParameter[{28, 28}], "ColorSpace" -> 
                    "Grayscale", "ColorChannels" -> 1, "Interleaving" -> 
                    False, "MeanImage" -> None, "VarianceImage" -> None, 
                    "DataTransposed" -> False, "$Version" -> "12.3.3"|>, 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[1, 10]]|>, 
                    "Outputs" -> <|
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "MyNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MyNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Loss"]}|>, 
                    Apply[Sequence, 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "MyNet"], 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "loss"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "MyNet"], 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "loss"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"]}, 
                    NeuralNetworks`Private`NetGraph`selection], <||>, {}], 
                    ToBoxes[""]], ImageSizeCache -> {0., {0., 4.5}}, 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.899965791258768*^9},
 CellLabel->
  "Out[126]=",ExpressionUUID->"bfc1cb59-27bb-4081-bd01-92952f60961d"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{Full, Full},
WindowMargins->{{0, Automatic}, {Automatic, 180}},
TaggingRules-><|"TryRealOnly" -> False|>,
Magnification:>0.9 Inherited,
FrontEndVersion->"13.3 for Microsoft Windows (64-bit) (June 3, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"74e72533-71ef-4ede-9398-80fdb9883766"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 328, 5, 88, "Title",ExpressionUUID->"2a5e0de6-398a-46f0-85d1-ef56e92a81cf"],
Cell[911, 29, 469, 13, 31, "Text",ExpressionUUID->"7f3e9ead-0d57-4913-893e-29a272521e29"],
Cell[1383, 44, 1140, 31, 77, "Input",ExpressionUUID->"52223c95-b99b-4d49-9620-fd87ea3b2aff"],
Cell[2526, 77, 371, 8, 31, "Text",ExpressionUUID->"4898254f-1e5e-4127-a468-a8fa0aa2e8d8"],
Cell[2900, 87, 3432, 65, 283, "Input",ExpressionUUID->"88808776-4c24-4770-a608-88ac5c33c6d8"],
Cell[6335, 154, 360, 8, 31, "Text",ExpressionUUID->"6baafdb8-25b4-4957-8248-b39beb25f925"],
Cell[CellGroupData[{
Cell[6720, 166, 2326, 61, 163, "Input",ExpressionUUID->"185bd20e-b93d-420e-9e13-2035c0d7a18b"],
Cell[9049, 229, 31034, 648, 438, "Output",ExpressionUUID->"1721c39c-a9df-4920-9db5-f758d9c60b90"]
}, Open  ]],
Cell[40098, 880, 695, 19, 43, "Input",ExpressionUUID->"214c0df1-468a-46a6-850f-b34404d1d650"],
Cell[CellGroupData[{
Cell[40818, 903, 134, 3, 25, "Input",ExpressionUUID->"7a954f9d-5cf9-4004-ab2f-86e21c0e94de"],
Cell[40955, 908, 39280, 773, 79, "Output",ExpressionUUID->"9ee9b261-8c49-411f-bdfc-d2b4bd29bdd8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[80272, 1686, 129, 2, 25, "Input",ExpressionUUID->"0db68241-ebd0-411f-b33b-0f854674b7b7"],
Cell[80404, 1690, 439679, 7339, 57, "Output",ExpressionUUID->"80ecc5f9-4fc7-4497-ad5d-850c4e883205"]
}, Open  ]],
Cell[CellGroupData[{
Cell[520120, 9034, 159, 3, 59, "Section",ExpressionUUID->"fa2104ae-bd4a-4297-925c-ec46ad74fc80"],
Cell[520282, 9039, 558, 13, 31, "Text",ExpressionUUID->"3fd8a2d6-f15b-4889-8c01-b6cfbca36c2d"],
Cell[CellGroupData[{
Cell[520865, 9056, 293, 6, 25, "Input",ExpressionUUID->"54a4b80a-f8cf-45b5-9eb3-4b6a20613307"],
Cell[521161, 9064, 190726, 4237, 538, "Output",ExpressionUUID->"890d589d-ece7-4dc5-a492-5cff16b3e425"]
}, Open  ]],
Cell[CellGroupData[{
Cell[711924, 13306, 333, 6, 43, "Input",ExpressionUUID->"7c6d8178-e953-4db5-a435-722848b322c4"],
Cell[712260, 13314, 207, 3, 28, "Output",ExpressionUUID->"db4309ed-8b06-40a2-9fbf-99b7222b041f"],
Cell[712470, 13319, 7397, 174, 42, "Output",ExpressionUUID->"e2cfae0d-e991-47e6-9cf5-0bd790044212"]
}, Open  ]],
Cell[CellGroupData[{
Cell[719904, 13498, 241, 4, 25, "Input",ExpressionUUID->"f25a77b4-5974-4767-b348-045c3ed84c68"],
Cell[720148, 13504, 7164, 168, 42, "Output",ExpressionUUID->"0440478f-0f47-4098-a78b-1882c3b4f8f5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[727349, 13677, 232, 3, 25, "Input",ExpressionUUID->"7c02fe2f-c8ce-4484-ac92-873d0def9c4a"],
Cell[727584, 13682, 596, 14, 28, "Output",ExpressionUUID->"a7a5b434-e3e7-4588-8208-35cdccaf54f1"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[728229, 13702, 219, 4, 60, "Section",ExpressionUUID->"265cf13c-abfc-42b8-bd87-513cbaab6935"],
Cell[728451, 13708, 788, 16, 52, "Text",ExpressionUUID->"13d45ae9-64cf-4981-8d2a-be20218175b5"],
Cell[CellGroupData[{
Cell[729264, 13728, 948, 22, 43, "Input",ExpressionUUID->"a901ff96-8a4e-4a6f-988d-f2dfc6a550e8"],
Cell[730215, 13752, 123121, 2026, 235, "Output",ExpressionUUID->"eeff9078-b48f-4ade-a12b-37beb5d8e796"]
}, Open  ]],
Cell[853351, 15781, 708, 11, 31, "Text",ExpressionUUID->"9677fb0c-edfd-4671-b02b-86d4b720cdef"],
Cell[CellGroupData[{
Cell[854084, 15796, 710, 18, 43, "Input",ExpressionUUID->"16d13f6a-e2c5-48b1-b476-c229f47d5ffb"],
Cell[854797, 15816, 53476, 884, 404, "Output",ExpressionUUID->"eea61062-1cf9-4c2a-ae93-707c65754d20"]
}, Open  ]],
Cell[CellGroupData[{
Cell[908310, 16705, 180, 3, 25, "Input",ExpressionUUID->"ea88d566-0e9d-4c33-af14-457704b3630b"],
Cell[908493, 16710, 89469, 1840, 210, "Output",ExpressionUUID->"bfc1cb59-27bb-4081-bd01-92952f60961d"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

