(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    430560,       7668]
NotebookOptionsPosition[    428748,       7636]
NotebookOutlinePosition[    429148,       7652]
CellTagsIndexPosition[    429105,       7649]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"extractData", "[", "dir_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"fileNames", ",", "allData"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"fileNames", "=", 
       RowBox[{"FileNames", "[", 
        RowBox[{"\"\<*.txt\>\"", ",", "dir"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"allData", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"data", "=", 
           RowBox[{"Import", "[", "file", "]"}]}], ";", "data"}], ",", 
         RowBox[{"{", 
          RowBox[{"file", ",", "fileNames"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"allData", "=", 
       RowBox[{"Flatten", "[", "allData", "]"}]}], ";", "\[IndentingNewLine]",
       "allData"}]}], "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gloveResource", "=", 
   RowBox[{
   "NetModel", "[", 
    "\"\<GloVe 300-Dimensional Word Vectors Trained on Common Crawl 42B\>\"", 
    "]"}]}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"spamData", "=", 
   RowBox[{
   "extractData", "[", 
    "\"\<C:\\\\Users\\\\borja\\\\Downloads\\\\spam\\\\enron6\\\\spam\>\"", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"hamData", "=", 
    RowBox[{
    "extractData", "[", 
     "\"\<C:\\\\Users\\\\borja\\\\Downloads\\\\spam\\\\enron6\\\\ham\>\"", 
     "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"Data", " ", "size", " ", "reduced", " ", "for", " ", "testing"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"spamData", "=", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"spamData", ",", "300"}], "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"hamData", "=", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"hamData", ",", "100"}], "]"}]}], ";"}], " ", 
  "\[IndentingNewLine]", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"processedSpamData", " ", "=", 
   RowBox[{"gloveResource", "/@", "spamData"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"processedHamData", " ", "=", " ", 
    RowBox[{"gloveResource", " ", "/@", " ", "hamData"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"spamData", "=", 
   RowBox[{"Thread", "[", 
    RowBox[{"processedSpamData", "->", "\"\<spam\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"hamData", "=", 
   RowBox[{"Thread", "[", 
    RowBox[{"processedHamData", "->", "\"\<ham\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"combinedData", "=", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"Join", "[", 
      RowBox[{"spamData", ",", "hamData"}], "]"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"train", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"combinedData", ",", "30"}], "]"}]}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Should", " ", "be", " ", "4800"}], " ", "-", " ", 
    RowBox[{"Changed", " ", "for", " ", "testing"}]}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"test", "=", 
    RowBox[{"Complement", "[", 
     RowBox[{"combinedData", ",", "train"}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Should", " ", "be", " ", "1200"}], " ", "-", " ", 
    RowBox[{"Changed", " ", "for", " ", "testing"}]}], "*)"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.9000786187599263`*^9, 3.900078641547231*^9}, {
   3.9000797534585333`*^9, 3.9000797574898767`*^9}, {3.9000799944439955`*^9, 
   3.900080077105981*^9}, {3.900080975489911*^9, 3.9000810632918563`*^9}, 
   3.900081206028318*^9, {3.9000885903455715`*^9, 3.900088687191193*^9}, 
   3.9000892625810184`*^9},
 CellLabel->"In[57]:=",ExpressionUUID->"1bb2796d-19f7-43b2-ac04-ac80ca1d7e9f"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["EmbeddingLayer", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                   "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[
                  
                  GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {
                    1, 0}}, {{
                    Opacity[0.3], 
                    
                    LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                    AbsolutePointSize[5], 
                    RGBColor[0.33, 0.33, 0.33], 
                    PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37], 
                 GridBox[{{
                    TagBox[
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Input\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Input\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Input"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Input\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Input"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], "SummaryItem"], 
                    TagBox[
                    StyleBox["\"string\"", "SummaryItem"], "SummaryItem"]}, {
                    TagBox[
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Output\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Output\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Output"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Output\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Output"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], "SummaryItem"], 
                    TagBox[
                    StyleBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]300\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"], 
                    "SummaryItem"]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                   "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[
                  
                  GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {
                    1, 0}}, {{
                    Opacity[0.3], 
                    
                    LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                    AbsolutePointSize[5], 
                    RGBColor[0.33, 0.33, 0.33], 
                    PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37], 
                 GridBox[{{
                    TagBox[
                    
                    DynamicModuleBox[{
                    NeuralNetworks`Private`FormattingLayers`opart, 
                    NeuralNetworks`Private`FormattingLayers`part, 
                    NeuralNetworks`Private`FormattingLayers`selection = Null}, 
                    DynamicBox[
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    ItemBox[
                    StyleBox["Parameters", Bold]], 
                    ItemBox[""]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox["\"OutputDimensions\"", FrameStyle -> 
                    GrayLevel[0, 0], FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False], 
                    True -> FrameBox["\"OutputDimensions\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"OutputDimensions"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"OutputDimensions\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"OutputDimensions"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"300\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox["\"ClassCount\"", FrameStyle -> 
                    GrayLevel[0, 0], FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False], 
                    True -> FrameBox["\"ClassCount\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"ClassCount"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"ClassCount\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"ClassCount"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["1917495", "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Arrays", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox["\"Weights\"", FrameStyle -> 
                    GrayLevel[0, 0], FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False], 
                    True -> FrameBox["\"Weights\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Weights"}, InputForm]], Method -> "Preemptive",
                     PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Weights\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Weights"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1917495\[Times]300\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Input Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox["\"Input\"", FrameStyle -> 
                    GrayLevel[0, 0], FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False], 
                    True -> FrameBox["\"Input\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Input"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Input\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Input"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"string\"", "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Output Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox["\"Output\"", FrameStyle -> 
                    GrayLevel[0, 0], FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False], 
                    True -> FrameBox["\"Output\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Output"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Output\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Output"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]300\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`FormattingLayers`part = 
                    MouseAnnotation[]], 
                    If[NeuralNetworks`Private`FormattingLayers`opart === 
                    NeuralNetworks`Private`FormattingLayers`part, 
                    NeuralNetworks`Private`FormattingLayers`selection = Null; 
                    NeuralNetworks`Private`FormattingLayers`opart = Null, 
                    NeuralNetworks`Private`FormattingLayers`selection = 
                    NeuralNetworks`Private`FormattingLayers`part; 
                    NeuralNetworks`Private`FormattingLayers`opart = 
                    NeuralNetworks`Private`FormattingLayers`part; Null]; 
                    Null], Method -> "Preemptive", PassEventsDown -> 
                    Automatic, PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterLayer[
                    
                    Lookup[<|{"Inputs", "Input"} -> <|
                    "Form" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[0]}, 
                    NeuralNetworks`IndexIntegerT[1, 1917495]], "Type" -> 
                    "Tokens", "Tokens" -> NeuralNetworks`ValidatedParameter[
                    Skeleton[
                    Row[{1917494, " strings"}]]], "SplitPattern" -> 
                    NeuralNetworks`ValidatedParameter[WordBoundary], 
                    "IgnoreCase" -> True, "Count" -> 1917495, "$Version" -> 
                    "13.3.0"|>|>, 
                    Key[NeuralNetworks`Private`FormattingLayers`selection], 
                    Null], NeuralNetworks`Private`FormattingLayers`part, \
<||>, {}]}, GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`FormattingLayers`selection}], 
                    Initialization :> {NetChain}], "SummaryItem"]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[EmbeddingLayer, 2312115368, 
              Dynamic[Typeset`embedState$$], Automatic]], StandardForm]], 
          ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           "Choose", EmbeddingLayer, 2312115368, 
            5913535840491490489629698686098165472425738034706976642408, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm, 
            ElisionsDump`embedSummaryBoxes], DefaultBaseStyle -> 
          "SummaryEmbedButton", ImageSize -> Inherited, 
          BaseStyle -> {"DialogStyle"}, Enabled -> Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("EmbeddingLayer[<>]"& )],
  False,
  BoxID -> 5913535840491490489629698686098165472425738034706976642408,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.9000810641885643`*^9, 3.9000812068616805`*^9, 
  3.900086080042444*^9, 3.900090042455477*^9, 3.900090923366765*^9, 
  3.900097839380532*^9},
 CellLabel->"Out[58]=",ExpressionUUID->"42b5f671-8af6-433f-b7b2-c157d823552c"],

Cell[BoxData[
 TemplateBox[<|"shortenedBoxes" -> TagBox[
     RowBox[{"{", 
       RowBox[{
         RowBox[{
           RowBox[{"{", 
             TemplateBox[{"1"}, "OutputSizeLimit`Skeleton"], "}"}], "\[Rule]",
            "\"ham\""}], ",", 
         TemplateBox[{"28"}, "OutputSizeLimit`Skeleton"], ",", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"-", "0.03893899917602539`"}], ",", 
                   RowBox[{"-", "0.023638999089598656`"}], ",", 
                   RowBox[{"-", "0.11359000205993652`"}], ",", 
                   RowBox[{"-", "0.06080399826169014`"}], ",", 
                   RowBox[{"-", "0.13589000701904297`"}], ",", 
                   "0.5316799879074097`", ",", 
                   RowBox[{"-", "2.882699966430664`"}], ",", 
                   "0.7473300099372864`", ",", 
                   RowBox[{"-", "0.38971999287605286`"}], ",", 
                   "0.1863200068473816`", ",", 
                   RowBox[{"-", "0.2331099957227707`"}], ",", 
                   "0.32653000950813293`", ",", 
                   RowBox[{"-", "0.16068999469280243`"}], ",", 
                   "0.1795399934053421`", ",", "0.3649600148200989`", ",", 
                   RowBox[{"-", "0.44321000576019287`"}], ",", 
                   "0.3893299996852875`", ",", "0.3370800018310547`", ",", 
                   TemplateBox[{"264"}, "OutputSizeLimit`Skeleton"], ",", 
                   "0.18743999302387238`", ",", 
                   RowBox[{"-", "0.008273599669337273`"}], ",", 
                   RowBox[{"-", "0.3408600091934204`"}], ",", 
                   "0.04434800148010254`", ",", 
                   RowBox[{"-", "0.19442999362945557`"}], ",", 
                   RowBox[{"-", "0.03175999969244003`"}], ",", 
                   "0.13808999955654144`", ",", 
                   RowBox[{"-", "0.447160005569458`"}], ",", 
                   RowBox[{"-", "0.20928999781608582`"}], ",", 
                   "0.2808000147342682`", ",", 
                   RowBox[{"-", "0.41909998655319214`"}], ",", 
                   RowBox[{"-", "0.29541000723838806`"}], ",", 
                   "0.040516000241041183`", ",", "0.3560299873352051`", ",", 
                   RowBox[{"-", "0.2560400068759918`"}], ",", 
                   RowBox[{"-", "0.23621000349521637`"}], ",", 
                   RowBox[{"-", "0.6620799899101257`"}], ",", 
                   RowBox[{"-", "0.27959999442100525`"}]}], "}"}], ",", 
               TemplateBox[{"91"}, "OutputSizeLimit`Skeleton"], ",", 
               RowBox[{"{", 
                 TemplateBox[{"1"}, "OutputSizeLimit`Skeleton"], "}"}]}], 
             "}"}], "\[Rule]", "\"spam\""}]}], "}"}], Short[#, 8]& ], "line" -> 
   68, "sessionID" -> 17378319934707187358, "byteCount" -> 17377968, "size" -> 
   8, "stored" -> False, "expr" -> Missing["NotStored"], "wrap" -> 
   OutputSizeLimit`Defer, "version" -> 1|>,
  "OutputSizeLimitTemplate"]], "Output",
 CellChangeTimes->{3.9000810641885643`*^9, 3.9000812068616805`*^9, 
  3.900086080042444*^9, 3.900090042455477*^9, 3.900090923366765*^9, 
  3.9000979116672397`*^9},
 CellLabel->"Out[68]=",ExpressionUUID->"1c800ea8-5962-4842-9d44-d971a296854b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Step", " ", "2"}], ":", 
    RowBox[{"Define", " ", "the", " ", "NetChain"}]}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"embeddingSize", "=", "300"}], ";"}], " ", 
   RowBox[{"(*", 
    RowBox[{
    "Same", " ", "as", " ", "GloVe", " ", "word", " ", "vector", " ", 
     "size"}], "*)"}], "\n", 
   RowBox[{
    RowBox[{"numClasses", "=", "2"}], ";"}], " ", 
   RowBox[{"(*", 
    RowBox[{"spam", " ", "or", " ", "ham"}], "*)"}], "\n", 
   RowBox[{"net", "=", 
    RowBox[{"NetChain", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"EmbeddingLayer", "[", 
         RowBox[{"embeddingSize", ",", 
          RowBox[{"\"\<Input\>\"", "->", 
           RowBox[{"{", "embeddingSize", "}"}]}], ",", 
          RowBox[{"\"\<ClassCount\>\"", "->", "numClasses"}]}], "]"}], ",", 
        RowBox[{"GatedRecurrentLayer", "[", "32", "]"}], ",", 
        RowBox[{"GatedRecurrentLayer", "[", "16", "]"}], ",", 
        RowBox[{"FlattenLayer", "[", "]"}], ",", 
        RowBox[{"LinearLayer", "[", "numClasses", "]"}], ",", 
        RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", 
      RowBox[{"\"\<Input\>\"", "->", 
       RowBox[{"{", "embeddingSize", "}"}]}], ",", 
      RowBox[{"\"\<Output\>\"", "->", 
       RowBox[{"NetDecoder", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<Class\>\"", ",", 
          RowBox[{"{", 
           RowBox[{"\"\<spam\>\"", ",", "\"\<ham\>\""}], "}"}]}], "}"}], 
        "]"}]}]}], "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"Step", " ", "3"}], ":", 
     RowBox[{"Train", " ", "the", " ", "NetChain"}]}], "*)"}], "\n", 
   RowBox[{
    RowBox[{"trainingData", "=", 
     RowBox[{"Keys", "[", "train", "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"trainingLabels", "=", 
     RowBox[{"Values", "[", "train", "]"}]}], ";"}], "\n", 
   RowBox[{"trainedNet", "=", 
    RowBox[{"NetTrain", "[", 
     RowBox[{"net", ",", 
      RowBox[{"trainingData", "->", "trainingLabels"}], ",", 
      RowBox[{"MaxTrainingRounds", "->", "100"}]}], "]"}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"Step", " ", "4"}], ":", 
     RowBox[{"Evaluate", " ", "the", " ", "trained", " ", "NetChain"}]}], 
    "*)"}], "\n", 
   RowBox[{
    RowBox[{"testData", "=", 
     RowBox[{"Keys", "[", "test", "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"trueLabels", "=", 
     RowBox[{"Values", "[", "test", "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"predictedLabels", "=", 
     RowBox[{"trainedNet", "[", "testData", "]"}]}], ";"}], "\n", 
   RowBox[{"accuracy", "=", 
    RowBox[{"Mean", "[", 
     RowBox[{"Boole", "[", 
      RowBox[{"predictedLabels", "==", "trueLabels"}], "]"}], "]"}], 
    "\n"}]}]}]], "Input",
 CellChangeTimes->{{3.9000862569732647`*^9, 3.900086353880096*^9}, {
  3.900088727211033*^9, 3.9000887491432724`*^9}, {3.9000900096969023`*^9, 
  3.90009003117808*^9}, {3.9000902861947556`*^9, 3.9000903032165923`*^9}, {
  3.900090381237147*^9, 3.9000903968782597`*^9}, {3.9000904289277096`*^9, 
  3.900090447385618*^9}, {3.900090518124116*^9, 3.900090556225013*^9}, {
  3.900090911952058*^9, 3.900090912689599*^9}, {3.9000976988853436`*^9, 
  3.90009771202113*^9}},ExpressionUUID->"549de360-4fd0-472d-bec6-\
0dfd3f50462a"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["EmbeddingLayer", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                   "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[
                  
                  GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {
                    1, 0}}, {{
                    Opacity[0.3], 
                    
                    LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                    AbsolutePointSize[5], 
                    RGBColor[0.33, 0.33, 0.33], 
                    PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37], 
                 GridBox[{{
                    TagBox[
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Input\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Input\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Input"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Input\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Input"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], "SummaryItem"], 
                    TagBox[
                    StyleBox["\"string\"", "SummaryItem"], "SummaryItem"]}, {
                    TagBox[
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Output\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Output\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Output"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Output\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Output"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], "SummaryItem"], 
                    TagBox[
                    StyleBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]300\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"], 
                    "SummaryItem"]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                   "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[
                  
                  GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {
                    1, 0}}, {{
                    Opacity[0.3], 
                    
                    LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                    AbsolutePointSize[5], 
                    RGBColor[0.33, 0.33, 0.33], 
                    PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37], 
                 GridBox[{{
                    TagBox[
                    
                    DynamicModuleBox[{
                    NeuralNetworks`Private`FormattingLayers`opart, 
                    NeuralNetworks`Private`FormattingLayers`part, 
                    NeuralNetworks`Private`FormattingLayers`selection = Null}, 
                    DynamicBox[
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    ItemBox[
                    StyleBox["Parameters", Bold]], 
                    ItemBox[""]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox["\"OutputDimensions\"", FrameStyle -> 
                    GrayLevel[0, 0], FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False], 
                    True -> FrameBox["\"OutputDimensions\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"OutputDimensions"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"OutputDimensions\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"OutputDimensions"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"300\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox["\"ClassCount\"", FrameStyle -> 
                    GrayLevel[0, 0], FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False], 
                    True -> FrameBox["\"ClassCount\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"ClassCount"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"ClassCount\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"ClassCount"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["1917495", "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Arrays", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox["\"Weights\"", FrameStyle -> 
                    GrayLevel[0, 0], FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False], 
                    True -> FrameBox["\"Weights\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Weights"}, InputForm]], Method -> "Preemptive",
                     PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Weights\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Weights"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1917495\[Times]300\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Input Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox["\"Input\"", FrameStyle -> 
                    GrayLevel[0, 0], FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False], 
                    True -> FrameBox["\"Input\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Input"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Input\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Input"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"string\"", "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Output Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox["\"Output\"", FrameStyle -> 
                    GrayLevel[0, 0], FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False], 
                    True -> FrameBox["\"Output\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Output"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Output\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Output"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]300\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`FormattingLayers`part = 
                    MouseAnnotation[]], 
                    If[NeuralNetworks`Private`FormattingLayers`opart === 
                    NeuralNetworks`Private`FormattingLayers`part, 
                    NeuralNetworks`Private`FormattingLayers`selection = Null; 
                    NeuralNetworks`Private`FormattingLayers`opart = Null, 
                    NeuralNetworks`Private`FormattingLayers`selection = 
                    NeuralNetworks`Private`FormattingLayers`part; 
                    NeuralNetworks`Private`FormattingLayers`opart = 
                    NeuralNetworks`Private`FormattingLayers`part; Null]; 
                    Null], Method -> "Preemptive", PassEventsDown -> 
                    Automatic, PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterLayer[
                    
                    Lookup[<|{"Inputs", "Input"} -> <|
                    "Form" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[0]}, 
                    NeuralNetworks`IndexIntegerT[1, 1917495]], "Type" -> 
                    "Tokens", "Tokens" -> NeuralNetworks`ValidatedParameter[
                    Skeleton[
                    Row[{1917494, " strings"}]]], "SplitPattern" -> 
                    NeuralNetworks`ValidatedParameter[WordBoundary], 
                    "IgnoreCase" -> True, "Count" -> 1917495, "$Version" -> 
                    "13.3.0"|>|>, 
                    Key[NeuralNetworks`Private`FormattingLayers`selection], 
                    Null], NeuralNetworks`Private`FormattingLayers`part, \
<||>, {}]}, GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`FormattingLayers`selection}], 
                    Initialization :> {NetChain}], "SummaryItem"]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[EmbeddingLayer, 2312115368, 
              Dynamic[Typeset`embedState$$], Automatic]], StandardForm]], 
          ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           "Choose", EmbeddingLayer, 2312115368, 
            5913535840491490489629698686098165472425738034706976642408, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm, 
            ElisionsDump`embedSummaryBoxes], DefaultBaseStyle -> 
          "SummaryEmbedButton", ImageSize -> Inherited, 
          BaseStyle -> {"DialogStyle"}, Enabled -> Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("EmbeddingLayer[<>]"& )],
  False,
  BoxID -> 5913535840491490489629698686098165472425738034706976642408,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.9000900349170456`*^9, 3.9000901452666073`*^9, 
  3.9000903066079683`*^9, 3.900090403069047*^9, 3.9000904522898736`*^9, 
  3.9000905448505836`*^9, 3.900090913696537*^9, 3.9000909815974607`*^9, 
  3.9000976997236404`*^9},
 CellLabel->"Out[35]=",ExpressionUUID->"6080d750-e9b8-4cf6-a8ab-f3d3fc375bf8"],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{3.9000900349170456`*^9, 3.9000901452666073`*^9, 
  3.9000903066079683`*^9, 3.900090403069047*^9, 3.9000904522898736`*^9, 
  3.9000905448505836`*^9, 3.900090913696537*^9, 3.9000909815974607`*^9, 
  3.900097724653102*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"4dda705a-3e64-4e17-adba-6098c4ca8fa6"],

Cell[BoxData[
 TemplateBox[{
  "EmbeddingLayer", "invindata3", 
   "\"Data supplied to \\!\\(\\*RowBox[{\\\"\\\\\\\"port \
\\\\\\\\\\\\\\\"Input\\\\\\\\\\\\\\\"\\\\\\\"\\\"}]\\) could not be encoded; \
\\!\\(\\*RowBox[{\\\"\\\\\\\"input was not a string\\\\\\\"\\\"}]\\).\"", 2, 
   40, 7, 17378319934707187358, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.9000863076380653`*^9, 3.90008640505745*^9, 
  3.9000900346188693`*^9, 3.9000901452509823`*^9, 3.900090306623606*^9, 
  3.900090403115935*^9, 3.9000904522898736`*^9, 3.900090544803298*^9, 
  3.9000909137479167`*^9, 3.900090981833113*^9, 3.900097743223858*^9},
 CellLabel->
  "During evaluation of \
In[34]:=",ExpressionUUID->"d4d04dd7-0db5-440c-b62b-ec3c4ee71cb1"],

Cell[BoxData[
 TemplateBox[{
  "EmbeddingLayer", "invindata3", 
   "\"Data supplied to \\!\\(\\*RowBox[{\\\"\\\\\\\"port \
\\\\\\\\\\\\\\\"Input\\\\\\\\\\\\\\\"\\\\\\\"\\\"}]\\) could not be encoded; \
\\!\\(\\*RowBox[{\\\"\\\\\\\"input was not a string\\\\\\\"\\\"}]\\).\"", 2, 
   40, 8, 17378319934707187358, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.9000863076380653`*^9, 3.90008640505745*^9, 
  3.9000900346188693`*^9, 3.9000901452509823`*^9, 3.900090306623606*^9, 
  3.900090403115935*^9, 3.9000904522898736`*^9, 3.900090544803298*^9, 
  3.9000909137479167`*^9, 3.900090981833113*^9, 3.9000977432398577`*^9},
 CellLabel->
  "During evaluation of \
In[34]:=",ExpressionUUID->"768d888b-7ccd-4b1c-a6d3-0959fe6d36a6"],

Cell[BoxData[
 TemplateBox[{
  "EmbeddingLayer", "invindata3", 
   "\"Data supplied to \\!\\(\\*RowBox[{\\\"\\\\\\\"port \
\\\\\\\\\\\\\\\"Input\\\\\\\\\\\\\\\"\\\\\\\"\\\"}]\\) could not be encoded; \
\\!\\(\\*RowBox[{\\\"\\\\\\\"input was not a string\\\\\\\"\\\"}]\\).\"", 2, 
   40, 9, 17378319934707187358, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.9000863076380653`*^9, 3.90008640505745*^9, 
  3.9000900346188693`*^9, 3.9000901452509823`*^9, 3.900090306623606*^9, 
  3.900090403115935*^9, 3.9000904522898736`*^9, 3.900090544803298*^9, 
  3.9000909137479167`*^9, 3.900090981833113*^9, 3.900097743247859*^9},
 CellLabel->
  "During evaluation of \
In[34]:=",ExpressionUUID->"892eceae-91cd-4b8a-b718-a6fc24e33abd"],

Cell[BoxData[
 TemplateBox[{
  "General", "stop", 
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"EmbeddingLayer\\\", \
\\\"::\\\", \\\"invindata3\\\"}], \\\"MessageName\\\"]\\) will be suppressed \
during this calculation.\"", 2, 40, 10, 17378319934707187358, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.9000863076380653`*^9, 3.90008640505745*^9, 
  3.9000900346188693`*^9, 3.9000901452509823`*^9, 3.900090306623606*^9, 
  3.900090403115935*^9, 3.9000904522898736`*^9, 3.900090544803298*^9, 
  3.9000909137479167`*^9, 3.900090981833113*^9, 3.900097743256203*^9},
 CellLabel->
  "During evaluation of \
In[34]:=",ExpressionUUID->"52780104-9fb8-4b64-9739-0719e267711e"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["NetChain",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            OverlayBox[{
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 GrayLevel[0.6], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{
                   Style[
                   "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                   10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 GrayLevel[0.6], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{
                   Style[
                   "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                   10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.84, 0.84, 0.84], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   GrayLevel[0.6], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.84, 0.84, 0.84], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   GrayLevel[0.6], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.84, 0.84, 0.84], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   GrayLevel[0.6], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   GrayLevel[0.6], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              StyleBox["uninitialized", 
               RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
               Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
               Scaled[0.0001]}], 
            GridBox[{{
               TagBox[
                StyleBox[
                 TemplateBox[{
                   TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], "SummaryItem"], 
               TagBox[
                StyleBox[
                 TagBox[
                  TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 300\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of indices \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\[VeryThinSpace]range: \"", "1", "\"..\"", "2", 
                    "\"\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  Short], "SummaryItem"], "SummaryItem"]}, {
               TagBox[
                StyleBox[
                 TemplateBox[{
                   TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], "SummaryItem"], 
               TagBox[
                StyleBox["\"class\"", "SummaryItem"], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            OverlayBox[{
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 GrayLevel[0.6], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{
                   Style[
                   "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                   10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 GrayLevel[0.6], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{
                   Style[
                   "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                   10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.84, 0.84, 0.84], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   GrayLevel[0.6], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.84, 0.84, 0.84], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   GrayLevel[0.6], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.84, 0.84, 0.84], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   GrayLevel[0.6], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   GrayLevel[0.6], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              StyleBox["uninitialized", 
               RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
               Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
               Scaled[0.0001]}], 
            GridBox[{{
               TagBox[
                
                DynamicModuleBox[{
                 NeuralNetworks`Private`NetChain`assoc3 = <|
                   "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Embedding", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{2, 300}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {300}, "ClassCount" -> 2, 
                    "$Dimensions" -> {300}, "$OutputDimension" -> 300|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{300}, 
                    NeuralNetworks`IndexIntegerT[1, 2]]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{300, 300}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "GatedRecurrent", 
                    "Arrays" -> <|
                    "InputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{32, 300}, NeuralNetworks`RealT], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{32, 32}, NeuralNetworks`RealT], 
                    "InputGateBiases" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "ResetGateInputWeights" -> 
                    NeuralNetworks`TensorT[{32, 300}, NeuralNetworks`RealT], 
                    "ResetGateStateWeights" -> 
                    NeuralNetworks`TensorT[{32, 32}, NeuralNetworks`RealT], 
                    "ResetGateBiases" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`TensorT[{32, 300}, NeuralNetworks`RealT], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`TensorT[{32, 32}, NeuralNetworks`RealT], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "OutputSize" -> 32, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    300, "$SequenceLength" -> 300|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{300, 300}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{300, 32}, NeuralNetworks`RealT]|>,
                     "States" -> <|
                    "State" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "GatedRecurrent", 
                    "Arrays" -> <|
                    "InputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{16, 32}, NeuralNetworks`RealT], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{16, 16}, NeuralNetworks`RealT], 
                    "InputGateBiases" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "ResetGateInputWeights" -> 
                    NeuralNetworks`TensorT[{16, 32}, NeuralNetworks`RealT], 
                    "ResetGateStateWeights" -> 
                    NeuralNetworks`TensorT[{16, 16}, NeuralNetworks`RealT], 
                    "ResetGateBiases" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`TensorT[{16, 32}, NeuralNetworks`RealT], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`TensorT[{16, 16}, NeuralNetworks`RealT], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "OutputSize" -> 16, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    32, "$SequenceLength" -> 300|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{300, 32}, NeuralNetworks`RealT]|>,
                     "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{300, 16}, NeuralNetworks`RealT]|>,
                     "States" -> <|
                    "State" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Flatten", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> DirectedInfinity[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{300, 16}, NeuralNetworks`RealT]|>,
                     "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4800}, NeuralNetworks`RealT]|>|>, 
                    "5" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{2, 4800}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 4800, "$InputDimensions" -> {4800}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4800}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>, 
                    "6" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{300}, 
                    NeuralNetworks`IndexIntegerT[1, 2]]|>, 
                    "Outputs" -> <|
                    "Output" -> <|
                    "Form" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "Type" -> "Class", 
                    "Labels" -> {"\"spam\"", "\"ham\""}, "InputDepth" -> 1, 
                    "Multilabel" -> False, "Dimensions" -> 2, "$Rank" -> 0, 
                    "$Version" -> "13.3.0"|>|>, 
                    "InteriorStates" -> <|{2, "State"} -> 
                    NeuralNetworks`NetPath["Nodes", "2", "States", "State"], {
                    3, "State"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "States", "State"]|>|>, 
                  NeuralNetworks`Private`NetChain`opart, 
                  NeuralNetworks`Private`NetChain`part, 
                  NeuralNetworks`Private`NetChain`selected = Null}, 
                 DynamicBox[
                  GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 300\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of indices \"", 
                    StyleBox[
                    TemplateBox[{
                    "\"(\[VeryThinSpace]range: \"", "1", "\"..\"", "2", 
                    "\"\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["EmbeddingLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 300\[Times]300\[VeryThinSpace])\
\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["GatedRecurrentLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
300\[Times]32\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["GatedRecurrentLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
300\[Times]16\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4800\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                   GridBoxSpacings -> {"Columns" -> {{1}}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridFrameMargins -> {{0, 0}, {0, 0}}], 
                  TrackedSymbols :> {
                   NeuralNetworks`Private`NetChain`selected}], 
                 Initialization :> {NetChain}], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  NetChain[<|
   "Type" -> "Chain", 
    "Nodes" -> <|
     "1" -> <|"Type" -> "Embedding", 
        "Arrays" -> <|
         "Weights" -> 
          NeuralNetworks`TensorT[{2, 300}, NeuralNetworks`RealT]|>, 
        "Parameters" -> <|
         "OutputDimensions" -> {300}, "ClassCount" -> 2, 
          "$Dimensions" -> {300}, "$OutputDimension" -> 300|>, 
        "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{300}, 
            NeuralNetworks`IndexIntegerT[1, 2]]|>, 
        "Outputs" -> <|
         "Output" -> 
          NeuralNetworks`TensorT[{300, 300}, NeuralNetworks`RealT]|>|>, 
      "2" -> <|"Type" -> "GatedRecurrent", 
        "Arrays" -> <|
         "InputGateInputWeights" -> 
          NeuralNetworks`TensorT[{32, 300}, NeuralNetworks`RealT], 
          "InputGateStateWeights" -> 
          NeuralNetworks`TensorT[{32, 32}, NeuralNetworks`RealT], 
          "InputGateBiases" -> 
          NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
          "ResetGateInputWeights" -> 
          NeuralNetworks`TensorT[{32, 300}, NeuralNetworks`RealT], 
          "ResetGateStateWeights" -> 
          NeuralNetworks`TensorT[{32, 32}, NeuralNetworks`RealT], 
          "ResetGateBiases" -> 
          NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
          "MemoryGateInputWeights" -> 
          NeuralNetworks`TensorT[{32, 300}, NeuralNetworks`RealT], 
          "MemoryGateStateWeights" -> 
          NeuralNetworks`TensorT[{32, 32}, NeuralNetworks`RealT], 
          "MemoryGateBiases" -> 
          NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>, 
        "Parameters" -> <|
         "OutputSize" -> 32, "Dropout" -> 
          NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 300, 
          "$SequenceLength" -> 300|>, 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{300, 300}, 
            NeuralNetworks`RealT]|>, 
        "Outputs" -> <|
         "Output" -> 
          NeuralNetworks`TensorT[{300, 32}, NeuralNetworks`RealT]|>, 
        "States" -> <|
         "State" -> NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>|>, 
      "3" -> <|"Type" -> "GatedRecurrent", 
        "Arrays" -> <|
         "InputGateInputWeights" -> 
          NeuralNetworks`TensorT[{16, 32}, NeuralNetworks`RealT], 
          "InputGateStateWeights" -> 
          NeuralNetworks`TensorT[{16, 16}, NeuralNetworks`RealT], 
          "InputGateBiases" -> 
          NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
          "ResetGateInputWeights" -> 
          NeuralNetworks`TensorT[{16, 32}, NeuralNetworks`RealT], 
          "ResetGateStateWeights" -> 
          NeuralNetworks`TensorT[{16, 16}, NeuralNetworks`RealT], 
          "ResetGateBiases" -> 
          NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
          "MemoryGateInputWeights" -> 
          NeuralNetworks`TensorT[{16, 32}, NeuralNetworks`RealT], 
          "MemoryGateStateWeights" -> 
          NeuralNetworks`TensorT[{16, 16}, NeuralNetworks`RealT], 
          "MemoryGateBiases" -> 
          NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]|>, 
        "Parameters" -> <|
         "OutputSize" -> 16, "Dropout" -> 
          NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 32, 
          "$SequenceLength" -> 300|>, 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{300, 32}, NeuralNetworks`RealT]|>,
         "Outputs" -> <|
         "Output" -> 
          NeuralNetworks`TensorT[{300, 16}, NeuralNetworks`RealT]|>, 
        "States" -> <|
         "State" -> NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]|>|>, 
      "4" -> <|"Type" -> "Flatten", "Arrays" -> <||>, 
        "Parameters" -> <|"Level" -> DirectedInfinity[1]|>, 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{300, 16}, NeuralNetworks`RealT]|>,
         "Outputs" -> <|
         "Output" -> NeuralNetworks`TensorT[{4800}, NeuralNetworks`RealT]|>|>,
       "5" -> <|"Type" -> "Linear", 
        "Arrays" -> <|
         "Weights" -> NeuralNetworks`TensorT[{2, 4800}, NeuralNetworks`RealT],
           "Biases" -> NeuralNetworks`Nullable[
            NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]|>, 
        "Parameters" -> <|
         "OutputDimensions" -> {2}, "$OutputSize" -> 2, "$InputSize" -> 4800, 
          "$InputDimensions" -> {4800}|>, 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{4800}, NeuralNetworks`RealT]|>, 
        "Outputs" -> <|
         "Output" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>, 
      "6" -> <|"Type" -> "Softmax", "Arrays" -> <||>, 
        "Parameters" -> <|"Level" -> -1|>, 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>, 
        "Outputs" -> <|
         "Output" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>|>, 
    "Edges" -> {
     NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Inputs", "Input"], 
      NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
      NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
      NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
      NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
      NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
      NeuralNetworks`NetPath["Outputs", "Output"] -> 
      NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"]}, 
    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{300}, 
        NeuralNetworks`IndexIntegerT[1, 2]]|>, 
    "Outputs" -> <|
     "Output" -> NetDecoder[
       "Class", <|
        "Labels" -> {"spam", "ham"}, "InputDepth" -> 1, "Multilabel" -> False,
          "Dimensions" -> 2, "$Rank" -> 0, "$Version" -> "13.3.0"|>, 
        NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]|>, 
    "InteriorStates" -> <|{2, "State"} -> 
      NeuralNetworks`NetPath["Nodes", "2", "States", "State"], {3, "State"} -> 
      NeuralNetworks`NetPath["Nodes", "3", "States", "State"]|>|>, <|
   "Version" -> "13.3.0", "Unstable" -> False|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.9000900349170456`*^9, 3.9000901452666073`*^9, 
  3.9000903066079683`*^9, 3.900090403069047*^9, 3.9000904522898736`*^9, 
  3.9000905448505836`*^9, 3.900090913696537*^9, 3.9000909815974607`*^9, 
  3.9000977437117605`*^9},
 CellLabel->"Out[49]=",ExpressionUUID->"13fef062-44a0-4a24-b60d-a70a52b9c730"],

Cell[BoxData[
 TemplateBox[{
  "NetTrain", "skipbatch", 
   "\"Batch #\\!\\(\\*RowBox[{\\\"1\\\"}]\\) will be skipped, because one or \
or more inputs provided to port \
\\\"\\!\\(\\*RowBox[{\\\"\\\\\\\"Input\\\\\\\"\\\"}]\\)\\\" was invalid: \
\\!\\(\\*RowBox[{\\\"\\\\\\\"input is not a length-300 vector of integers \
between 1 and 2\\\\\\\"\\\"}]\\). This batch will be ignored in subsequent \
training rounds. More information can be obtained via the \
\\\"SkippedTrainingData\\\" property.\"", 2, 52, 11, 17378319934707187358, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.9000863076380653`*^9, 3.90008640505745*^9, 
  3.9000900346188693`*^9, 3.9000901452509823`*^9, 3.900090306623606*^9, 
  3.900090403115935*^9, 3.9000904522898736`*^9, 3.900090544803298*^9, 
  3.9000909137479167`*^9, 3.900090981833113*^9, 3.900097746186905*^9},
 CellLabel->
  "During evaluation of \
In[34]:=",ExpressionUUID->"d49de016-c7b2-4311-8528-9e5f4ccb3d0d"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["NetChain",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.014925373134328358`], {
               RGBColor[0.729, 0.729, 0.729], 
               Thickness[0.018686567164179105`], 
               Opacity[1.], 
               JoinForm[{"Miter", 10.}], 
               
               JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                CurveClosed -> {0}]}, {
               RGBColor[0.729, 0.729, 0.729], 
               Thickness[0.018686567164179105`], 
               Opacity[1.], 
               JoinForm[{"Miter", 10.}], 
               
               JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                CurveClosed -> {0}]}, {
               FaceForm[{
                 RGBColor[0.631, 0.8160000000000001, 0.498], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
               FaceForm[{
                 RGBColor[0.40800000000000003`, 0.627, 0.196], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {15., 
                79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 103.}, {23.,
                 103.}}}]}, {
               FaceForm[{
                 RGBColor[0.38, 0.753, 0.89], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
               FaceForm[{
                 RGBColor[0.24300000000000002`, 0.608, 0.71], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {29., 
                79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 103.}, {37.,
                 103.}}}]}, {
               FaceForm[{
                 RGBColor[0.584, 0.51, 0.8390000000000001], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
               FaceForm[{
                 RGBColor[0.4, 0.396, 0.659], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {43., 
                79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 103.}, {51.,
                 103.}}}]}, {
               FaceForm[{
                 RGBColor[0.549, 0.549, 0.549], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25., 
                95.}, {25., 88.}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39., 
                95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
             ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
            GridBox[{{
               TagBox[
                StyleBox[
                 TemplateBox[{
                   TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], "SummaryItem"], 
               TagBox[
                StyleBox[
                 TagBox[
                  TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 300\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of indices \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\[VeryThinSpace]range: \"", "1", "\"..\"", "2", 
                    "\"\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  Short], "SummaryItem"], "SummaryItem"]}, {
               TagBox[
                StyleBox[
                 TemplateBox[{
                   TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], "SummaryItem"], 
               TagBox[
                StyleBox["\"class\"", "SummaryItem"], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.014925373134328358`], {
               RGBColor[0.729, 0.729, 0.729], 
               Thickness[0.018686567164179105`], 
               Opacity[1.], 
               JoinForm[{"Miter", 10.}], 
               
               JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                CurveClosed -> {0}]}, {
               RGBColor[0.729, 0.729, 0.729], 
               Thickness[0.018686567164179105`], 
               Opacity[1.], 
               JoinForm[{"Miter", 10.}], 
               
               JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                CurveClosed -> {0}]}, {
               FaceForm[{
                 RGBColor[0.631, 0.8160000000000001, 0.498], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
               FaceForm[{
                 RGBColor[0.40800000000000003`, 0.627, 0.196], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {15., 
                79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 103.}, {23.,
                 103.}}}]}, {
               FaceForm[{
                 RGBColor[0.38, 0.753, 0.89], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
               FaceForm[{
                 RGBColor[0.24300000000000002`, 0.608, 0.71], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {29., 
                79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 103.}, {37.,
                 103.}}}]}, {
               FaceForm[{
                 RGBColor[0.584, 0.51, 0.8390000000000001], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
               FaceForm[{
                 RGBColor[0.4, 0.396, 0.659], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {43., 
                79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 103.}, {51.,
                 103.}}}]}, {
               FaceForm[{
                 RGBColor[0.549, 0.549, 0.549], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25., 
                95.}, {25., 88.}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39., 
                95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
             ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
            GridBox[{{
               TagBox[
                
                DynamicModuleBox[{
                 NeuralNetworks`Private`NetChain`assoc3 = <|
                   "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Embedding", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 300}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {300}, "ClassCount" -> 2, 
                    "$Dimensions" -> {300}, "$OutputDimension" -> 300|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{300}, 
                    NeuralNetworks`IndexIntegerT[1, 2]]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{300, 300}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "GatedRecurrent", 
                    "Arrays" -> <|
                    "InputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{32, 300}], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{32, 32}], 
                    "InputGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{32}], 
                    "ResetGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{32, 300}], 
                    "ResetGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{32, 32}], 
                    "ResetGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{32}], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{32, 300}], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{32, 32}], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{32}]|>, 
                    "Parameters" -> <|
                    "OutputSize" -> 32, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    300, "$SequenceLength" -> 300|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{300, 300}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{300, 32}, NeuralNetworks`RealT]|>,
                     "States" -> <|
                    "State" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "GatedRecurrent", 
                    "Arrays" -> <|
                    "InputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{16, 32}], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{16, 16}], 
                    "InputGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{16}], 
                    "ResetGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{16, 32}], 
                    "ResetGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{16, 16}], 
                    "ResetGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{16}], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{16, 32}], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{16, 16}], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{16}]|>, 
                    "Parameters" -> <|
                    "OutputSize" -> 16, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    32, "$SequenceLength" -> 300|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{300, 32}, NeuralNetworks`RealT]|>,
                     "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{300, 16}, NeuralNetworks`RealT]|>,
                     "States" -> <|
                    "State" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Flatten", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> DirectedInfinity[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{300, 16}, NeuralNetworks`RealT]|>,
                     "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4800}, NeuralNetworks`RealT]|>|>, 
                    "5" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2, 4800}],
                     "Biases" -> NeuralNetworks`Private`DummyArray[{2}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 4800, "$InputDimensions" -> {4800}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4800}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>, 
                    "6" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{300}, 
                    NeuralNetworks`IndexIntegerT[1, 2]]|>, 
                    "Outputs" -> <|
                    "Output" -> <|
                    "Form" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "Type" -> "Class", 
                    "Labels" -> {"\"spam\"", "\"ham\""}, "InputDepth" -> 1, 
                    "Multilabel" -> False, "Dimensions" -> 2, "$Rank" -> 0, 
                    "$Version" -> "13.3.0"|>|>, 
                    "InteriorStates" -> <|{2, "State"} -> 
                    NeuralNetworks`NetPath["Nodes", "2", "States", "State"], {
                    3, "State"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "States", "State"]|>|>, 
                  NeuralNetworks`Private`NetChain`opart, 
                  NeuralNetworks`Private`NetChain`part, 
                  NeuralNetworks`Private`NetChain`selected = Null}, 
                 DynamicBox[
                  GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 300\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of indices \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\[VeryThinSpace]range: \"", "1", "\"..\"", "2", 
                    "\"\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["EmbeddingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 300\[Times]300\[VeryThinSpace])\
\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["GatedRecurrentLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
300\[Times]32\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["GatedRecurrentLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
300\[Times]16\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4800\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                   GridBoxSpacings -> {"Columns" -> {{1}}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridFrameMargins -> {{0, 0}, {0, 0}}], 
                  TrackedSymbols :> {
                   NeuralNetworks`Private`NetChain`selected}], 
                 Initialization :> {NetChain}], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  NetChain[<|
   "Type" -> "Chain", 
    "Nodes" -> <|
     "1" -> <|"Type" -> "Embedding", 
        "Arrays" -> <|"Weights" -> CompressedData["
1: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
wP76r+CoMZsMWHTD/wHywJ2n
           "]|>, 
        "Parameters" -> <|
         "OutputDimensions" -> {300}, "ClassCount" -> 2, 
          "$Dimensions" -> {300}, "$OutputDimension" -> 300|>, 
        "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{300}, 
            NeuralNetworks`IndexIntegerT[1, 2]]|>, 
        "Outputs" -> <|
         "Output" -> 
          NeuralNetworks`TensorT[{300, 300}, NeuralNetworks`RealT]|>|>, 
      "2" -> <|"Type" -> "GatedRecurrent", 
        "Arrays" -> <|"InputGateInputWeights" -> CompressedData["
1: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
2oi9+nsnEZZ8gdhyn130IgXeaPbCCsVYxqYtl7FP9EDV4fOgEJJK5gf5kxrr
l8TVRBDvTo5j219hXJAjje/UxukLVhE1PZwDsf1a2C9VAB+7n7MFZknjqr2J
KO5VVb+g4jM9G/uXNm42RgpD9GySMCRUTrDtTt0Cl4oduKpqLWdMsIxktJvC
ypEF0HIrDpW+LILJg4swSXaMFblAhipFXCHqO3sgO+oieC2TgrgiMchIaqGp
PL7gt2MHHHs4QG4954Nj08/Zx7GcurLyceZTOJ7u5WV9M7RAOHobDSbTafbI
bNDwSyA+DRfJc6WQ+msq2tipxhA5wSbaK7EYS8IbqPHF2TSuOguylZZB+ZJc
zHx/CiPalMmnl850l/walPoRDWnerSjtMox+7p7AqREB470rMDP0Ez0ergEu
SyUxa7SN6N+Whpi7txnPpZvp6SP1NFjwA/7wDEeu1lZIqJUAhd0D7HuV0TCu
1UCtCuahVKwclBrL4Orts5idS/iJIGs3faj9Gto01GDNQn0y1bQZXu4ZpmZp
pdT5XCGTWpOG12ViIf6cFVYNVxCemEhc8N4fhsTW4mL/d2yqOFJf9uYMubZg
KcSmu1CNj5fo6s0h4OIzB6r+seTthjLcZqvccHNnPg4euU2mjVwJz9IqusV/
il4314dv3Pdx/VukE1/+eZ6qIIDYTsxg/6H/pX5jnk3mkzNm8STlTDKpY4kR
N/tKJHVaKHyCG40sRRp2CC1n4u/OkPCiAnjsMZdemlSF9OAQPG0ZjcvmnEP7
8Gyc8FWDgqpQsiM3h8orbIf188Mpv5UYpz2wi+QrzCbf14jQg5rh+HtBGOpO
PKZXmx6gtw8l7y3SmZk911GC0YG6+WIN4de+Qub9o+gn50CGndzwgLc2fC9R
hbh7yUTiqxysi+JDoV3XyHOht/SEhDARbfVG8Y5geKKWAQsDb7LGU2JouZAh
6bneCWVVBwgJN8aJJRPEd7UZ02ZmwHpWVAxd26OxcCaJrbNKjy7UjiUqlsn0
R84lbFgmRhxMm/BTvz1ZbdxPT0/4Y3uPMjUR3EO3OLti3a1yMFlVBWlvBCFc
dCH8N4ZUOkoA2ldqQkXydzLRoUJfJm8mGZ3u6KmoCVrBjaCycQXmPnuNvXaX
/nG8LlFyygKLBzwcZT5HFGlppy2DIbRKYzHbi1sCjJwPQ9r5Sfq20xbvSJiA
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
m5lHKQ9ZZzdNHOZ9wv4P3A9Y6A==
           "], "InputGateStateWeights" -> CompressedData["
1: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
ifq7HfD/AKuC0+w=
           "], "InputGateBiases" -> 
          RawArray["Real32",{0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
            0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
            0., 0., 0., 0.}], "ResetGateInputWeights" -> CompressedData["
1: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
           "], "ResetGateStateWeights" -> CompressedData["
1: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
/h/iIfue
           "], "ResetGateBiases" -> 
          RawArray["Real32",{0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
            0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
            0., 0., 0., 0.}], "MemoryGateInputWeights" -> CompressedData["
1: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
3aUjPydJooMy6v5oIWH+hXSukg79H8mplak=
           "], "MemoryGateStateWeights" -> CompressedData["
1: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
6QI=
           "], "MemoryGateBiases" -> 
          RawArray["Real32",{0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
            0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
            0., 0., 0., 0.}]|>, 
        "Parameters" -> <|
         "OutputSize" -> 32, "Dropout" -> 
          NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 300, 
          "$SequenceLength" -> 300|>, 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{300, 300}, 
            NeuralNetworks`RealT]|>, 
        "Outputs" -> <|
         "Output" -> 
          NeuralNetworks`TensorT[{300, 32}, NeuralNetworks`RealT]|>, 
        "States" -> <|
         "State" -> NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>|>, 
      "3" -> <|"Type" -> "GatedRecurrent", 
        "Arrays" -> <|"InputGateInputWeights" -> CompressedData["
1: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
0LzxN/w/Ad7acQ==
           "], "InputGateStateWeights" -> CompressedData["
1:eJwtiXswG3YcwFUdqxJJttm8H0Fx7bwzueT3zelK3dmVWeuxzSyddi3BTl2z
bkOxId5bvTXVlq56XRrGrEd+3xyKek7rcGKqHlVMGSsxHFvv9sfnc/e5j83p
+OCz2lpaWhde+0/BIolPQoLo0oe6r+KMSOzhLn41mf/DahHSrPhWYFX7gSb/
G7jW6ip0SHhEDAM1xOOtLOzf4+B36iUicXZAedEfsHOHDZJfk0Ed7g2mVSFo
yYnCDq9I4nq7FiU9rsR/cwZ8p+1UHG4PlURyqZMsEw/yuLiv3B7uFvQhz2ud
suvCyX2PBsiryYSTnmZYYMaAFXMTXKlqQmz0gaJTv+H8cjE8HjLCGcMkIvor
Bp6fv4gun4iBip5CW9fPYF1XQVTMb2HqRCx5dsFGOP3wKmzvMHBvtBr8x2S0
hgbA9tQmuTYqpm4LH1OvXiGazTjiWqeeqj1tH/pN9eMboxmotmDDiexqSI9t
oPIDhrAu76c/uo/jil0oit4daAmKCULWP2ywT9PHifAF6u74OnyWYCHo5R2D
siY2ZNt2EfeVs1CRIYX3SCEk3ZVRoQ4bvObOkTe52ij+yUx4SC8FrEIfkLSB
oZbEoFywk+fBlat8uF7QAVkLSKwDhJDL6IGM0HFBYv0eyckvBetSLu352pc0
fKSjdD6sqyruKEbNg/2wVR8MNwZlmLMsxkUHTwzmLwpcjK4Ao2+dvxsvo5re
cqz+dENpFFYBPg4VOK3vDXYlaehUOKdskT7BFiMF3Ztdxb8tHtJ+ogDnWiY8
WzIDLdEIyYkNwKNhrVBeooChr8JVswoBmodKMW7VHNqnBkgJcxhSFj9vjuZ5
E6WuFMqWejFB+wcsVj+mk+oRzNu9p/w9OpEuHd+lL2338M/LA3iodD8e7fBC
p4XvlZvr3bTVxxMEdk3kF04e1j3JxqLL6dDsVI3cuFWliBWBE4MvSKrxKRzl
GascbEtw+Mt3QHBeW5XmLsW1kRCQTgYDN+VtlBnEgcGBp7iZb6IKHCsiw0lR
lEfuEUkGXyBkoWD+jDHs5A8rTTPsSfT7jlBzbI5sbQqBP6Khlqs62DhwC1ij
rtD1Mg0fRVH+TWtjWH/eCYbhi8SN000z63cosypVkHwuEHgngRbGDUDfiz0Y
W1ygRxorMbI9AmYVTJVHmQacRG1wukoJPbvj2FYqV+p1yej13Gxk+lmAZYgV
bExU4oxxFGX0LxAZnSRfVNwn1N8SNlwK0DeaKdQfs0FGrzs2q/OVM0WzsFbc
AxLQF+pqBeFtmyq4tcZSDSo+ILwtK1VqbQFuLzPBUNNNLlW2o0sdH8oN5mhY
jZyk2IzRJfkdejPmCHbeOEwNTDjgdjESJ5XzJML0oMrXmgkycyJoPR4GKW11
NL02mfwLnT8HLA==
           "], "InputGateBiases" -> 
          RawArray["Real32",{0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
            0., 0., 0., 0.}], "ResetGateInputWeights" -> CompressedData["
1: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
MuFwCHDZ3NH4Lxrn7pQ=
           "], "ResetGateStateWeights" -> CompressedData["
1:eJwtkHlQ1HUYhxd0aTmSezgMWixZQG42gvh93+UGXY5hIR2mWFyIZhAQBSZm
hQICFYkrQRYhAoIQqVxSHIPd77saDCKRXFLgsCAxjsGKymlZYjrTH59n5pnn
v49dUqboY20Wi5XNeQmRJDcgK0sijdV5JSmSdC/P9FfR6P+NcBuUQS4NzLZw
HEo7yggvWgaF5fpgMlsK/osG+PCZGmLmUpHe3egLyRgDn03AOjHTmyqREKPN
Ymxe5eKwI5eu1BRTdvQ+muNUR8WR8RiaFoJbHFNBdP0ViBNx6AXnPbBmWY46
8kqI2VLQzUiZ8l5PJCznXILgxCXys/oCGExWKs2fTyllZ/iq8PEqerC1BQzu
VmHElgU1N92iv39EqJQXAJOjasoJnYISmguvB94mhn27VGn6h/B+QjvRyA9C
w/l0YD+0xzWhP9PX2oz2/Z3QuMQD9tKvZNMvApPkfAhaEUL13qt+MRcBp+eW
6EWWFKfXEqlk/wjNMNwnUEf3QG2qBYaX7qL6CTUQH20MybkjGGh8jLjK52Fm
gks0TXrwIvIW01oQKLAVJuE7Jetk6EQWbTm9AcuNM3T0q4fKUzMD2GvtCKcr
bPBE2n1qMnENKnb3ULubdeDd+RyG7b1o/uwkceX9STVNT2jC/FGQGffQR04Z
YI0PSIdKTT7RMsGVo47KWssbaPYoGPjsZ5jm7YEZHz6mXflzjLGDNyrydJXN
XclYoLLwQ5TS3KTXIFP4OW25YgsmKjm48yxox9V8ZJ1zB47qM5iGdioO28a4
vDcgJfOy4vY5K8EG4Qq85lPpvDEbr7lFwIF1f1xLG8fvvAew7OXfDkN1kLDD
XRVvOQ6Pv1ihfJ2vwTG6F22qrGC/iyWJOHJAMFQ2Ctfb79AC7zZG6FyMLi+e
4tMkLnQ4eBKWbjXzl8c8+ZsRK9zqPKFvQYYi5/dIyT/f0MKVeqz2zyaG/VN0
O9RGoK3pJLlT5TilWWaszXpgtrueJI/dYorKnOBH97NQqLYmskpdZZssAEUz
YdgVtwfR2BBaV8qZdmchaHz7ych5E2wMbO3zrNfDopRi3DryAw6uvo21HD6M
9E1QaZs52Kh88X0xYPFwISj+OAzeh3hKLV93CL4kpVGnNknIuC+6dgXBOr6L
T8I7wM4iFsWLnhg77ENDO5uBrR2ORde1YNFdDpF+a0ruv0Dv3TFQZdqq0WFh
EVJHxWif+cDv2GARHuezofjwTaj0HVKerDHCGaERFVmpYKI7TJEvyCPx37sB
T/QL+lw2FZhG/UZn2x3A5SdXXIixRX7UKi1NGsZkRRXdCc3oUTgGE4Ph1Jr/
AXwqb1LcmNLD6Vwz1d4sNXM28S3M3rFKT+p8CdLKIdz9bT6+WVtPnCoG4HhO
qKLHrYAue3YzO23X8D/Foft8
           "], "ResetGateBiases" -> 
          RawArray["Real32",{0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
            0., 0., 0., 0.}], "MemoryGateInputWeights" -> CompressedData["
1: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
1VsN/wKWiOFG
           "], "MemoryGateStateWeights" -> CompressedData["
1:eJwtkXlQ1HUYxlduTQbEhZIzlpKzpWETyf193xVCMhLaCEi5piUwSW6EYMVw
5MhAwQBRINxgYQIJFeVw5fd9NxARjSOOymSWWxxGZWKDlQyGcKY/nmfmM89f
n3lsIxMCDmtxOJwUg40KkHzlmZwsyfhE7yVES2IFbrEvR+P/oxm4id85JZMP
pjtxQq6heQUqojMjhr5LiTTcPgtOHFUIA73245JPDE67tkOl3QHmzX0a1Gk5
C03y48CGxJF/qhbZvbV8EjByUFg4Vg/ORRX4W8V6R9hyLIZlXKZW/cW4POIC
IeE3ULZoKgpxkZI3uKVQOX4S7rZSjNq9iclNzcPOlC00s4SjdGp2Rq/tnswi
/E3511bI6qIYjZRnMCBynebcKUG/rRaQVd7LpLpziJ5iFs6F3CM2pS0d/M+H
mDmfYDIiLICM8RWa4NVKHrrVIDt1Fs3YIXSSZ5FhVwXJKlqhzcX6KNakAS/G
BNKFvqTOeLPyes8vOD8TDDkdkyQoKYLIluUk/8A6WdX3wmcTS3BM0MMUslIM
HVlg5msi4UjlIzIweh3MMrWUZd4/YIluHa11aGBtXdOB672GP/c8oTJ7a2Vg
Fw8MddaYr/uE8LR6DhyqH5A/L9RBdvtb2DnrCI0xt8g1WQka1HwMSY9T4Nma
D7jPlkFpcxvVNq+hcdZiEpX/BfLEByFaMEbGJrWJVW8v4W77ld2015G2ndSQ
IKut+FfCh/i0whi+iZJDUp8j7BQvwXkfBq/I4mBCdIrNdgjGWPUwCgYX4MFP
CZCgUwufinXZbLNI+GzmNHgYn8YjRxthx/QIyxrWYf6hxj1BNlNEO/U1Epiu
oOe2GRPN/ThYq5fg797voCO3BKvNisFg/x+oNLaEHoEJsY2vQ8KntGCiiPF9
mAtdm/sZK+1uEl5+EUd6w4limou+8dlgNb8b3jbSEYVfrESVNJi0tfcTTZU2
aD2+THM2XFRd+XBoKgobj2/8M+3HhvlHwq3k7RDLjwDpj2swGWRJi0kE2qjs
QGrkxYxK/NCO4SHv5iBZfX0c1KHaorm05/TRlCuWyRrgyzlnpXTMAPcZUvCU
yoh0IJgk9lSA6l4XhqZJkDOYDeU2MaDLb4DkLRdg3N8beHI+piVwccFjEP0b
EP1MfWiEVj2OqlvgRp4C1Ot3yQt1N2N6vorWnRFApnIncXd/Ti9djYaP1Hdg
l7MYzJO5qCU0Eel7f08q4/VIl6oQXW97w6vN42T1FIOJVYtMuGQWhZbVKA95
wUZeUbH3lVUkvrGfNIXY4/tXrSHX2Q6O/dvKBLe6gHhIxljsEhGT4sPg4RaP
OwxPYfG7OeieI8Ig3/ewu0UJTbIqjDIzB8chDuYP6xFFrwVyb1czw5pXRA3f
+kPciSWq/2QPmggm8T8z9Pbr
           "], "MemoryGateBiases" -> 
          RawArray["Real32",{0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
            0., 0., 0., 0.}]|>, 
        "Parameters" -> <|
         "OutputSize" -> 16, "Dropout" -> 
          NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 32, 
          "$SequenceLength" -> 300|>, 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{300, 32}, NeuralNetworks`RealT]|>,
         "Outputs" -> <|
         "Output" -> 
          NeuralNetworks`TensorT[{300, 16}, NeuralNetworks`RealT]|>, 
        "States" -> <|
         "State" -> NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]|>|>, 
      "4" -> <|"Type" -> "Flatten", "Arrays" -> <||>, 
        "Parameters" -> <|"Level" -> DirectedInfinity[1]|>, 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{300, 16}, NeuralNetworks`RealT]|>,
         "Outputs" -> <|
         "Output" -> NeuralNetworks`TensorT[{4800}, NeuralNetworks`RealT]|>|>,
       "5" -> <|"Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1: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
J3FF8zNYP9MWSckTaPO5gf8DFbabaQ==
           "], "Biases" -> RawArray["Real32",{0., 0.}]|>, 
        "Parameters" -> <|
         "OutputDimensions" -> {2}, "$OutputSize" -> 2, "$InputSize" -> 4800, 
          "$InputDimensions" -> {4800}|>, 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{4800}, NeuralNetworks`RealT]|>, 
        "Outputs" -> <|
         "Output" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>, 
      "6" -> <|"Type" -> "Softmax", "Arrays" -> <||>, 
        "Parameters" -> <|"Level" -> -1|>, 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>, 
        "Outputs" -> <|
         "Output" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>|>, 
    "Edges" -> {
     NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Inputs", "Input"], 
      NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
      NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
      NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
      NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
      NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
      NeuralNetworks`NetPath["Outputs", "Output"] -> 
      NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"]}, 
    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{300}, 
        NeuralNetworks`IndexIntegerT[1, 2]]|>, 
    "Outputs" -> <|
     "Output" -> NetDecoder[
       "Class", <|
        "Labels" -> {"spam", "ham"}, "InputDepth" -> 1, "Multilabel" -> False,
          "Dimensions" -> 2, "$Rank" -> 0, "$Version" -> "13.3.0"|>, 
        NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]|>, 
    "InteriorStates" -> <|{2, "State"} -> 
      NeuralNetworks`NetPath["Nodes", "2", "States", "State"], {3, "State"} -> 
      NeuralNetworks`NetPath["Nodes", "3", "States", "State"]|>|>, <|
   "Version" -> "13.3.0", "Unstable" -> False|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.9000900349170456`*^9, 3.9000901452666073`*^9, 
  3.9000903066079683`*^9, 3.900090403069047*^9, 3.9000904522898736`*^9, 
  3.9000905448505836`*^9, 3.900090913696537*^9, 3.9000909815974607`*^9, 
  3.900097746427356*^9},
 CellLabel->"Out[52]=",ExpressionUUID->"f28bcadc-89f8-408d-8ae8-16a869c7569f"],

Cell[BoxData[
 TemplateBox[{
  "NetChain", "invindata3", 
   "\"Data supplied to \\!\\(\\*RowBox[{\\\"\\\\\\\"port \
\\\\\\\\\\\\\\\"Input\\\\\\\\\\\\\\\"\\\\\\\"\\\"}]\\) could not be encoded; \
\\!\\(\\*RowBox[{\\\"\\\\\\\"input is not a length-300 vector of integers \
between 1 and 2\\\\\\\"\\\"}]\\).\"", 2, 55, 12, 17378319934707187358, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.9000863076380653`*^9, 3.90008640505745*^9, 
  3.9000900346188693`*^9, 3.9000901452509823`*^9, 3.900090306623606*^9, 
  3.900090403115935*^9, 3.9000904522898736`*^9, 3.900090544803298*^9, 
  3.9000909137479167`*^9, 3.900090981833113*^9, 3.900097746483359*^9},
 CellLabel->
  "During evaluation of \
In[34]:=",ExpressionUUID->"55ec5d43-92a2-461e-86d7-12afa95109af"],

Cell[BoxData[
 RowBox[{"Mean", "[", 
  RowBox[{"Boole", "[", 
   RowBox[{"$Failed", "\[Equal]", 
    RowBox[{"{", 
     RowBox[{"\<\"ham\"\>", ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", 
      ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", 
      ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", 
      ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", 
      ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", 
      ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", 
      ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", 
      ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", 
      ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", 
      ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", 
      ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", 
      ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", 
      ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", 
      ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", 
      ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", 
      ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", 
      ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", 
      ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", 
      ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", 
      ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", 
      ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", 
      ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", 
      ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", 
      ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", 
      ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", 
      ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", 
      ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", 
      ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", 
      ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", 
      ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", 
      ",", "\<\"ham\"\>", ",", "\<\"ham\"\>", ",", "\<\"ham\"\>"}], "}"}]}], 
   "]"}], "]"}]], "Output",
 CellChangeTimes->{3.9000900349170456`*^9, 3.9000901452666073`*^9, 
  3.9000903066079683`*^9, 3.900090403069047*^9, 3.9000904522898736`*^9, 
  3.9000905448505836`*^9, 3.900090913696537*^9, 3.9000909815974607`*^9, 
  3.900097746498884*^9},
 CellLabel->"Out[56]=",ExpressionUUID->"d834790e-8fc7-4d0b-b5a3-25b1b6756bbf"]
}, Open  ]]
},
WindowSize->{1141.2, 573.6},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"13.3 for Microsoft Windows (64-bit) (June 3, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"feaf7ae2-cc2f-42dc-95b1-c203ad191843"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 4115, 112, 581, "Input",ExpressionUUID->"1bb2796d-19f7-43b2-ac04-ac80ca1d7e9f"],
Cell[4698, 136, 56533, 1026, 89, "Output",ExpressionUUID->"42b5f671-8af6-433f-b7b2-c157d823552c"],
Cell[61234, 1164, 3263, 59, 129, "Output",ExpressionUUID->"1c800ea8-5962-4842-9d44-d971a296854b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[64534, 1228, 3408, 84, 371, "Input",ExpressionUUID->"549de360-4fd0-472d-bec6-0dfd3f50462a"],
Cell[67945, 1314, 56612, 1027, 89, "Output",ExpressionUUID->"6080d750-e9b8-4cf6-a8ab-f3d3fc375bf8"],
Cell[124560, 2343, 353, 5, 32, "Output",ExpressionUUID->"4dda705a-3e64-4e17-adba-6098c4ca8fa6"],
Cell[124916, 2350, 747, 14, 28, "Message",ExpressionUUID->"d4d04dd7-0db5-440c-b62b-ec3c4ee71cb1"],
Cell[125666, 2366, 749, 14, 28, "Message",ExpressionUUID->"768d888b-7ccd-4b1c-a6d3-0959fe6d36a6"],
Cell[126418, 2382, 747, 14, 28, "Message",ExpressionUUID->"892eceae-91cd-4b8a-b718-a6fc24e33abd"],
Cell[127168, 2398, 703, 13, 28, "Message",ExpressionUUID->"52780104-9fb8-4b64-9739-0719e267711e"],
Cell[127874, 2413, 36823, 745, 62, "Output",ExpressionUUID->"13fef062-44a0-4a24-b60d-a70a52b9c730"],
Cell[164700, 3160, 972, 18, 46, "Message",ExpressionUUID->"d49de016-c7b2-4311-8528-9e5f4ccb3d0d"],
Cell[165675, 3180, 259719, 4393, 62, "Output",ExpressionUUID->"f28bcadc-89f8-408d-8ae8-16a869c7569f"],
Cell[425397, 7575, 782, 15, 28, "Message",ExpressionUUID->"55ec5d43-92a2-461e-86d7-12afa95109af"],
Cell[426182, 7592, 2550, 41, 109, "Output",ExpressionUUID->"d834790e-8fc7-4d0b-b5a3-25b1b6756bbf"]
}, Open  ]]
}
]
*)

