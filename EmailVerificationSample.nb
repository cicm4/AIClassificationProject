(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    190713,       3512]
NotebookOptionsPosition[    188135,       3468]
NotebookOutlinePosition[    188566,       3485]
CellTagsIndexPosition[    188523,       3482]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"extractData", "[", "dir_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"fileNames", ",", "allData"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"fileNames", "=", 
       RowBox[{"FileNames", "[", 
        RowBox[{"\"\<*.txt\>\"", ",", "dir"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"allData", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"data", "=", 
           RowBox[{"Import", "[", "file", "]"}]}], ";", "data"}], ",", 
         RowBox[{"{", 
          RowBox[{"file", ",", "fileNames"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"allData", "=", 
       RowBox[{"Flatten", "[", "allData", "]"}]}], ";", "\[IndentingNewLine]",
       "allData"}]}], "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"spamData", "=", 
   RowBox[{
   "extractData", "[", 
    "\"\<C:\\\\Users\\\\camil\\\\OneDrive\\\\Documents\\\\Harvard\\\\\
FinalProject\\\\enron6\\\\spam\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"hamData", "=", 
    RowBox[{
    "extractData", "[", 
     "\"\<C:\\\\Users\\\\camil\\\\OneDrive\\\\Documents\\\\Harvard\\\\\
FinalProject\\\\enron6\\\\ham\>\"", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"spamData", "=", 
   RowBox[{"Thread", "[", 
    RowBox[{"spamData", "->", "\"\<spam\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"hamData", "=", 
   RowBox[{"Thread", "[", 
    RowBox[{"hamData", "->", "\"\<ham\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"combinedData", "=", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"Join", "[", 
      RowBox[{"spamData", ",", "hamData"}], "]"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"trainingData", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"combinedData", ",", "4800"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testData", "=", 
   RowBox[{"Complement", "[", 
    RowBox[{"combinedData", ",", "train"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.9000786187599263`*^9, 3.900078641547231*^9}, {
   3.9000797534585333`*^9, 3.9000797574898767`*^9}, {3.9000799944439955`*^9, 
   3.900080077105981*^9}, 3.900080188777671*^9, {3.900080269110609*^9, 
   3.90008032521712*^9}, {3.900080571239396*^9, 3.9000806146878376`*^9}},
 CellLabel->
  "In[127]:=",ExpressionUUID->"1bb2796d-19f7-43b2-ac04-ac80ca1d7e9f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"maxVocabSize", "=", "10000"}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "or", " ", "whatever", " ", "value", " ", "you", " ", "decide", " ", 
    "on"}], "*)"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allWords", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"StringSplit", "/@", 
     RowBox[{"combinedData", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", "1"}], "]"}], "]"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"wordCounts", "=", 
   RowBox[{"Tally", "[", "allWords", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"sortedWords", "=", 
   RowBox[{"ReverseSortBy", "[", 
    RowBox[{"wordCounts", ",", "Last"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"topWords", "=", 
    RowBox[{
     RowBox[{"Take", "[", 
      RowBox[{"sortedWords", ",", 
       RowBox[{"maxVocabSize", "-", "1"}]}], "]"}], "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", "1"}], "]"}], "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"-", "1"}], " ", "to", " ", "account", " ", "for", " ", "the", 
    " ", "\"\<unknown\>\"", " ", "token"}], "*)"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"trainAssoc", "=", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<Input\>\"", "->", 
      RowBox[{"Keys", "[", "train", "]"}]}], ",", 
     RowBox[{"\"\<Target\>\"", "->", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"#", "===", "\"\<spam\>\""}], ",", "1", ",", "2"}], "]"}], 
         "&"}], "/@", 
        RowBox[{"Values", "[", "train", "]"}]}], ")"}]}]}], "|>"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"testAssoc", "=", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<Input\>\"", "->", 
      RowBox[{"Keys", "[", "test", "]"}]}], ",", 
     RowBox[{"\"\<Target\>\"", "->", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"#", "===", "\"\<spam\>\""}], ",", "1", ",", "2"}], "]"}], 
         "&"}], "/@", 
        RowBox[{"Values", "[", "test", "]"}]}], ")"}]}]}], "|>"}]}], 
  ";"}], "\n"}], "Input",
 CellChangeTimes->{{3.9000818511623554`*^9, 3.9000818669234314`*^9}, {
  3.900082481907542*^9, 3.9000824848824387`*^9}},
 CellLabel->
  "In[135]:=",ExpressionUUID->"3bdf23b7-8f6e-4fb8-b4fb-792f1d46bd07"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"encoder", "=", 
   RowBox[{"NetEncoder", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<Tokens\>\"", ",", 
      RowBox[{"\"\<Tokens\>\"", "->", 
       RowBox[{"Append", "[", 
        RowBox[{"topWords", ",", "\"\<<|UNKNOWN|>\>\""}], "]"}]}]}], "}"}], 
    "]"}]}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"decoder", "=", 
  RowBox[{"NetDecoder", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<Class\>\"", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<spam\>\"", ",", "\"\<ham\>\""}], "}"}]}], "}"}], 
   "]"}]}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{
  3.9000800889931912`*^9, {3.9000802730323715`*^9, 3.900080285495587*^9}, 
   3.90008055542861*^9, {3.9000813634948783`*^9, 3.9000813655590487`*^9}, {
   3.900081409436566*^9, 3.9000814103979816`*^9}, {3.900081451416959*^9, 
   3.9000814688059072`*^9}, {3.900081500311059*^9, 3.900081500966034*^9}, 
   3.9000817135227*^9, {3.9000818780816183`*^9, 3.9000818797271843`*^9}, {
   3.900082486583067*^9, 3.9000824876120896`*^9}},
 CellLabel->
  "In[142]:=",ExpressionUUID->"10c131b1-3d92-40e4-9199-78b713e3bf5e"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["NetEncoder",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GridBox[{{
               TagBox[
                StyleBox[
                 TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], "SummaryItem"], 
               TagBox[
                StyleBox["\"Tokens\"", "SummaryItem"], "SummaryItem"]}, {
               TagBox[
                StyleBox[
                 TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], "SummaryItem"], 
               TagBox[
                StyleBox[
                 TagBox[
                  TemplateBox[{"\"vector of \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\" indices \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\[VeryThinSpace]range: \"", "1", "\"..\"", "10001", 
                    "\"\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  Short], "SummaryItem"], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}], ""}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GridBox[{{
               TagBox[
                StyleBox[
                 TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], "SummaryItem"], 
               TagBox[
                StyleBox["\"Tokens\"", "SummaryItem"], "SummaryItem"]}, {
               TagBox[
                StyleBox[
                 TemplateBox[{"\"Tokens\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], "SummaryItem"], 
               TagBox[
                StyleBox[
                 TagBox[
                  PaneBox[
                   TagBox[
                    RowBox[{"\[LeftSkeleton]", 
                    TemplateBox[{"10000", "\" strings\""}, "RowDefault"], 
                    "\[RightSkeleton]"}], Short[#, 3]& ], 
                   BaseStyle -> {
                    IndentMaxFraction -> 0.1, ShowStringCharacters -> False}, 
                   ContentPadding -> False, ImageSize -> {250}], Short], 
                 "SummaryItem"], "SummaryItem"]}, {
               TagBox[
                StyleBox[
                 TemplateBox[{"\"Split Pattern\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], "SummaryItem"], 
               TagBox[
                StyleBox["\"WordBoundary\"", "SummaryItem"], "SummaryItem"]}, {
               TagBox[
                StyleBox[
                 TemplateBox[{"\"Ignore Case\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], "SummaryItem"], 
               TagBox[
                StyleBox["True", "SummaryItem"], "SummaryItem"]}, {
               TagBox[
                StyleBox[
                 TemplateBox[{"\"Target Length\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], "SummaryItem"], 
               TagBox[
                StyleBox["All", "SummaryItem"], "SummaryItem"]}, {
               TagBox[
                StyleBox[
                 TemplateBox[{"\"Count\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], "SummaryItem"], 
               TagBox[
                StyleBox["10001", "SummaryItem"], "SummaryItem"]}, {
               TagBox[
                StyleBox[
                 TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], "SummaryItem"], 
               TagBox[
                StyleBox[
                 TagBox[
                  TemplateBox[{"\"vector of \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\" indices \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\[VeryThinSpace]range: \"", "1", "\"..\"", "10001", 
                    "\"\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  Short], "SummaryItem"], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}], ""}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  NetEncoder["Tokens", <|"Tokens" -> NeuralNetworks`ValidatedParameter[
      NeuralNetworks`TokenEncodingData[1, 
       ByteArray[CompressedData["
1:eJwADUDyvyFib1JiAQAAAPmwAAB4nFy917YjybIk1sNz5ug79y7+wVANNWuX
6qqhOPwAPrEf2RSBzAAQtTMzslMAG0Xx7XR3M4tEnbV6dUFtIEWEC3Nz8397
qv/r+V/+3U8/rb//6aef/peybr/8K3vw38b//+tffmf/3645nv03v/wH/qzG
P/Uc76Wpj/f+ffz/v4v/p/hAmeIDj7r/8vv4krLGC+e64P01Pvz/xP//o/iM
fXaJp/+Of5JwMPjkf4HfneKfEw7pP4///9v4+L1s13gvrfgkvqvEm+eljvHq
PeO4l8w/Gob42H8S///7L3/y39tP33K3/fv4xDXd8Cd+cP/a/s3TwoOww/M3
prrhjHC0/+cvf7T/d3Wc0/TAwT7ijf85/v9f4vftZ3+Hj+GrcLWuCef638f/
X+L/+Zc/2P/nIac143fO8fp73gB8+X8Wb001nvynv/w17oBd6zFtxQ7Xz2Ss
C86kSzj+8fHLX/x0t7TlMU8brluPD10S7teY8AP/E67Gts3x8p1H+gGXIN/x
jbiq17zg/mCt7Gu8esp5whUcUxni0f1aumt88n/kNcYlfffuHZZAGXHOPU7s
U/z/XXymbDjAOuG3evzWHE+2uGhLnuuCu/Jfxe/NS+lweqcdH/FVw6U61Xt8
yNa7XWl/lE46oEvGPc74Ntw0HmS95SXWzWlfy5RXnG2dhkd8yWgH+IjfylNe
Lg+ubXvtj9gO97T0+uGyxKvbdan7Bcv55V28We3dBSc+dbh4dR963Fm/nn+I
B8srD/Ej7m3u9qVsJa/xtEy3vG5+r+Pj533beae+4K7ecR/TGN+bhrXGB6d9
PGXsp5/jA5cah7ButXuNF/g1OLspv+FyrVUnxvc/8/3cx3mmrqv7hEu8c3lf
cYP6hO965LTEMazXdr5lMiuEL7qv8UWjXfZ0yfF4qPW1TBdsKJqZ/zg+vu62
2mLbu2nBNp221G1x+7o0p65suC+jGQZtnHumtRjTa4aFwGXFR2kufvknHFle
pthzacBv1hGLqYvDjz1rH6aBww8M5RW7fH2sthV/+XMzIH7j/hB751x5EHOy
Je1feDKDgEX/nktk6XmTYGJr5VFzS9+veOG9b69YzbB9czz58A5nk5ebb5LY
LvXOpc1XcTCxi1ZeSNvT/h042VffQ3+Kj9R+7zZ86KpLsFW/q7GzznadcAsT
jYYd1Qs8zBW3zr7Kv7mLd7/t60YrYg/cvM15Cfs2cUf3O26//fRlsQUc66vv
F9+Qv4tToMlPE3bIKU7G9qlt2niY+jjzP/DWvK50HVl3n/Z8u+NI7CPxwPY/
1upaNqzhdzDdcH2rbzee4Udsadju7V7jXzsTbuiFC3xLWhC+wWjnykBbi6Vr
J7YPvMJjXbme92V5+rlP8b3nstjbvqjSzSxFOg0000Um5hP+eYkfeKFdW8wt
hNXo0lDsUk8lxVl9xYqo5+0uN2qniJU4Ltzwdc30aD035bb5ZfIv+N+5qzIu
n53jjFtxPvv1jx2ReLvPvln8m3/9Nf72f8OfpIIL1bkj/Rvu+tnuNPZdbLeh
dPj+vmZ4tvc/84cHWMt8C6dHezxq9fjCjVPEZs7YbeN42nZ8zSct8VvpM0z3
fHU35I/2qefKjnUVd0drd/Pdgk3WhVuObZzdWPm5Tcev+iKP33qJz7gRXOl3
cQ3fsI36euJCudq9WGGUy9Tph83e/Wtc2QzPYrZpXxLOf59sveL4z3bYsKQw
9bhgn97pmviZwizZudh2XlYuT1sjOLArf+CUu+Sm3B+7c3UP6t81jwwNBgQQ
fYXX/cTVlhNts5kI3JMuL4m3MpWR12qo8FBDoic417j/+W22axqGF67Odqs5
hHB1uKq9HTkX4IWL6IbD7Osw+PWNm2bOA6ukLvBst2ZWOvn2s31b/MiWu+tU
h2pe/U/xm3brChdgXJuwVNuSpjXhjsfKKXOOxcEQaMCltds27L0vhlgr2WzY
7+KIcMbvP8brl1pxy5ayvq7cbW6JYGA3+3U4NvOrC4ytHdS4xk/8ttvCiksE
A8Yd0lXaYN8R8AyTTjpcG7baSudZVqyqy5IT3vNjiT/4bTdbYX4xIv2ERZqb
fTxZEBNXIG3mda8Z7rDesRHsMnGRIYyRDx8yfuRXdxC4ZHLIFnrTteUTr6EH
OP6X4dLgUF6w732Nc1lOk3/kD3EO9b5duV9pRHEjMm/DMvJkq8WWftM96LBj
2mi1L1W37LwPtD3XbFfWV9qNceit5Lsi0O+Z9jvuBhfUwCTjfEYsYt5/91/4
D+KJAkk7Uv++3oIP/mbviyy+2MICxCO25WyP4pre08Ztdatlxuqr5qYKd9/P
Lx8U6d50WF0uN7ixly8MYezTf4n3LnaN7OL3XB3l5j+PA57ssu/4O57VUO0g
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
wIf/89/beB7zdfzv//v/AYB1arbml5H1
        "]], 10000]], "SplitPattern" -> 
    NeuralNetworks`ValidatedParameter[WordBoundary], "IgnoreCase" -> True, 
    "TargetLength" -> All, "Count" -> 10001, "$TargetLength" -> 
    NeuralNetworks`LengthVar[0], "$Version" -> "13.3.0"|>, 
   NeuralNetworks`TensorT[{
     NeuralNetworks`LengthVar[0]}, 
    NeuralNetworks`IndexIntegerT[1, 10001]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.900081298896017*^9, 3.900081376966705*^9, 3.900081414540723*^9, {
   3.900081452504497*^9, 3.900081468998728*^9}, 3.9000815013937035`*^9, 
   3.9000817785192595`*^9, {3.9000818805421066`*^9, 3.9000818833879023`*^9}, {
   3.900082496867033*^9, 3.9000824997271957`*^9}, 3.9000827593460445`*^9},
 CellLabel->
  "Out[142]=",ExpressionUUID->"67374167-987d-499a-82a2-65f586aacaf0"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["NetDecoder",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GridBox[{{
               TagBox[
                StyleBox[
                 TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], "SummaryItem"], 
               TagBox[
                StyleBox["\"Class\"", "SummaryItem"], "SummaryItem"]}, {
               TagBox[
                StyleBox[
                 TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], "SummaryItem"], 
               TagBox[
                StyleBox[
                 TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                   StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                  "RowWithSeparators"], "SummaryItem"], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}], ""}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GridBox[{{
               TagBox[
                StyleBox[
                 TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], "SummaryItem"], 
               TagBox[
                StyleBox["\"Class\"", "SummaryItem"], "SummaryItem"]}, {
               TagBox[
                StyleBox[
                 TemplateBox[{"\"Labels\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], "SummaryItem"], 
               TagBox[
                StyleBox[
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"\\\"spam\\\"\"", ",", "\"\\\"ham\\\"\""}], 
                    "}"}], Short], "SummaryItem"], "SummaryItem"]}, {
               TagBox[
                StyleBox[
                 TemplateBox[{"\"Input Depth\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], "SummaryItem"], 
               TagBox[
                StyleBox["1", "SummaryItem"], "SummaryItem"]}, {
               TagBox[
                StyleBox[
                 TemplateBox[{"\"Multilabel\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], "SummaryItem"], 
               TagBox[
                StyleBox["False", "SummaryItem"], "SummaryItem"]}, {
               TagBox[
                StyleBox[
                 TemplateBox[{"\"Dimensions\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], "SummaryItem"], 
               TagBox[
                StyleBox["2", "SummaryItem"], "SummaryItem"]}, {
               TagBox[
                StyleBox[
                 TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], "SummaryItem"], 
               TagBox[
                StyleBox["\"Class\"", "SummaryItem"], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}], ""}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  NetDecoder[
  "Class", <|
   "Labels" -> {"spam", "ham"}, "InputDepth" -> 1, "Multilabel" -> False, 
    "Dimensions" -> 2, "$Rank" -> 0, "$Version" -> "13.3.0"|>, 
   NeuralNetworks`TensorT[{2}, NeuralNetworks`AtomT]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.900081298896017*^9, 3.900081376966705*^9, 3.900081414540723*^9, {
   3.900081452504497*^9, 3.900081468998728*^9}, 3.9000815013937035`*^9, 
   3.9000817785192595`*^9, {3.9000818805421066`*^9, 3.9000818833879023`*^9}, {
   3.900082496867033*^9, 3.9000824997271957`*^9}, 3.900082759356073*^9},
 CellLabel->
  "Out[143]=",ExpressionUUID->"608a7a92-16e3-4c2f-bc82-d01e6ed68e1e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"uNet", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"EmbeddingLayer", "[", 
       RowBox[{"128", ",", 
        RowBox[{"\"\<Input\>\"", "->", 
         RowBox[{"encoder", "[", "\"\<VocabularySize\>\"", "]"}]}]}], "]"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"AggregationLayer", "[", 
       RowBox[{"Mean", ",", "1"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"LinearLayer", "[", "64", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"LinearLayer", "[", "2", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"\"\<Input\>\"", "->", "encoder"}], ",", "\[IndentingNewLine]", 
    RowBox[{"\"\<Output\>\"", "->", "decoder"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9000805235461617`*^9, 3.9000805235461617`*^9}, {
   3.9000806392906694`*^9, 3.900080651725707*^9}, {3.9000812772441034`*^9, 
   3.9000812780654507`*^9}, {3.9000815202049646`*^9, 3.900081547285392*^9}, 
   3.900081594388543*^9},
 CellLabel->
  "In[144]:=",ExpressionUUID->"0b54d548-43a2-4e5b-baef-fed4831df365"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["NetChain",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            OverlayBox[{
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 GrayLevel[0.6], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{
                   Style[
                   "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                   10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 GrayLevel[0.6], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{
                   Style[
                   "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                   10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.84, 0.84, 0.84], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   GrayLevel[0.6], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.84, 0.84, 0.84], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   GrayLevel[0.6], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.84, 0.84, 0.84], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   GrayLevel[0.6], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   GrayLevel[0.6], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              StyleBox["uninitialized", 
               RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
               Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
               Scaled[0.0001]}], 
            GridBox[{{
               TagBox[
                StyleBox[
                 TemplateBox[{
                   TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], "SummaryItem"], 
               TagBox[
                StyleBox["\"string\"", "SummaryItem"], "SummaryItem"]}, {
               TagBox[
                StyleBox[
                 TemplateBox[{
                   TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], "SummaryItem"], 
               TagBox[
                StyleBox["\"class\"", "SummaryItem"], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            OverlayBox[{
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 GrayLevel[0.6], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{
                   Style[
                   "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                   10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 GrayLevel[0.6], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{
                   Style[
                   "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                   10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.84, 0.84, 0.84], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   GrayLevel[0.6], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.84, 0.84, 0.84], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   GrayLevel[0.6], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.84, 0.84, 0.84], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   GrayLevel[0.6], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   GrayLevel[0.6], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              StyleBox["uninitialized", 
               RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
               Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
               Scaled[0.0001]}], 
            GridBox[{{
               TagBox[
                
                DynamicModuleBox[{
                 NeuralNetworks`Private`NetChain`assoc3 = <|
                   "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Embedding", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{10001, 128}, 
                    NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {128}, "ClassCount" -> 10001, 
                    "$Dimensions" -> {10001}, "$OutputDimension" -> 128|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10001}, 
                    NeuralNetworks`IndexIntegerT[1, 10001]]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10001, 128}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{10001, 128}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 128}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {64}, "$OutputSize" -> 64, 
                    "$InputSize" -> 128, "$InputDimensions" -> {128}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>|>, 
                    "5" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{2, 64}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 64, "$InputDimensions" -> {64}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>, 
                    "6" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> <|"Form" -> NeuralNetworks`TensorT[{10001}, 
                    NeuralNetworks`IndexIntegerT[1, 10001]], "Type" -> 
                    "Tokens", "Tokens" -> NeuralNetworks`ValidatedParameter[
                    Skeleton[
                    Row[{10000, " strings"}]]], "SplitPattern" -> 
                    NeuralNetworks`ValidatedParameter[WordBoundary], 
                    "IgnoreCase" -> True, "TargetLength" -> All, "Count" -> 
                    10001, "$TargetLength" -> 10001, "$Version" -> 
                    "13.3.0"|>|>, 
                    "Outputs" -> <|
                    "Output" -> <|
                    "Form" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "Type" -> "Class", 
                    "Labels" -> {"\"spam\"", "\"ham\""}, "InputDepth" -> 1, 
                    "Multilabel" -> False, "Dimensions" -> 2, "$Rank" -> 0, 
                    "$Version" -> "13.3.0"|>|>|>, 
                  NeuralNetworks`Private`NetChain`opart, 
                  NeuralNetworks`Private`NetChain`part, 
                  NeuralNetworks`Private`NetChain`selected = Null}, 
                 DynamicBox[
                  GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"string\""}, {
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 10001\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of indices \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\[VeryThinSpace]range: \"", "1", 
                    "\"..\"", "10001", "\"\[VeryThinSpace])\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["EmbeddingLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
10001\[Times]128\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["AggregationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 128\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 64\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 64\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                   GridBoxSpacings -> {"Columns" -> {{1}}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridFrameMargins -> {{0, 0}, {0, 0}}], 
                  TrackedSymbols :> {
                   NeuralNetworks`Private`NetChain`selected}], 
                 Initialization :> {NetChain}], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  NetChain[<|
   "Type" -> "Chain", 
    "Nodes" -> <|
     "1" -> <|"Type" -> "Embedding", 
        "Arrays" -> <|
         "Weights" -> 
          NeuralNetworks`TensorT[{10001, 128}, NeuralNetworks`RealT]|>, 
        "Parameters" -> <|
         "OutputDimensions" -> {128}, "ClassCount" -> 10001, 
          "$Dimensions" -> {10001}, "$OutputDimension" -> 128|>, 
        "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10001}, 
            NeuralNetworks`IndexIntegerT[1, 10001]]|>, 
        "Outputs" -> <|
         "Output" -> 
          NeuralNetworks`TensorT[{10001, 128}, NeuralNetworks`RealT]|>|>, 
      "2" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
        "Parameters" -> <|
         "Function" -> Mean, "Levels" -> 
          NeuralNetworks`ValidatedParameter[1]|>, 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{10001, 128}, 
            NeuralNetworks`RealT]|>, 
        "Outputs" -> <|
         "Output" -> NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>|>, 
      "3" -> <|"Type" -> "Linear", 
        "Arrays" -> <|
         "Weights" -> NeuralNetworks`TensorT[{64, 128}, NeuralNetworks`RealT],
           "Biases" -> NeuralNetworks`Nullable[
            NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
        "Parameters" -> <|
         "OutputDimensions" -> {64}, "$OutputSize" -> 64, "$InputSize" -> 128,
           "$InputDimensions" -> {128}|>, 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
        "Outputs" -> <|
         "Output" -> NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>|>, 
      "4" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
        "Parameters" -> <|
         "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
          "$Dimensions" -> {64}|>, 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
        "Outputs" -> <|
         "Output" -> NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>|>, 
      "5" -> <|"Type" -> "Linear", 
        "Arrays" -> <|
         "Weights" -> NeuralNetworks`TensorT[{2, 64}, NeuralNetworks`RealT], 
          "Biases" -> NeuralNetworks`Nullable[
            NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]|>, 
        "Parameters" -> <|
         "OutputDimensions" -> {2}, "$OutputSize" -> 2, "$InputSize" -> 64, 
          "$InputDimensions" -> {64}|>, 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
        "Outputs" -> <|
         "Output" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>, 
      "6" -> <|"Type" -> "Softmax", "Arrays" -> <||>, 
        "Parameters" -> <|"Level" -> -1|>, 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>, 
        "Outputs" -> <|
         "Output" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>|>, 
    "Edges" -> {
     NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Inputs", "Input"], 
      NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
      NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
      NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
      NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
      NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
      NeuralNetworks`NetPath["Outputs", "Output"] -> 
      NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"]}, 
    "Inputs" -> <|
     "Input" -> NetEncoder[
       "Tokens", <|"Tokens" -> NeuralNetworks`ValidatedParameter[
           NeuralNetworks`TokenEncodingData[1, 
            ByteArray[CompressedData["
1:eJwADUDyvyFib1JiAQAAAPmwAAB4nFy917YjybIk1sNz5ug79y7+wVANNWuX
6qqhOPwAPrEf2RSBzAAQtTMzslMAG0Xx7XR3M4tEnbV6dUFtIEWEC3Nz8397
qv/r+V/+3U8/rb//6aef/peybr/8K3vw38b//+tffmf/3645nv03v/wH/qzG
P/Uc76Wpj/f+ffz/v4v/p/hAmeIDj7r/8vv4krLGC+e64P01Pvz/xP//o/iM
fXaJp/+Of5JwMPjkf4HfneKfEw7pP4///9v4+L1s13gvrfgkvqvEm+eljvHq
PeO4l8w/Gob42H8S///7L3/y39tP33K3/fv4xDXd8Cd+cP/a/s3TwoOww/M3
prrhjHC0/+cvf7T/d3Wc0/TAwT7ijf85/v9f4vftZ3+Hj+GrcLWuCef638f/
X+L/+Zc/2P/nIac143fO8fp73gB8+X8Wb001nvynv/w17oBd6zFtxQ7Xz2Ss
C86kSzj+8fHLX/x0t7TlMU8brluPD10S7teY8AP/E67Gts3x8p1H+gGXIN/x
jbiq17zg/mCt7Gu8esp5whUcUxni0f1aumt88n/kNcYlfffuHZZAGXHOPU7s
U/z/XXymbDjAOuG3evzWHE+2uGhLnuuCu/Jfxe/NS+lweqcdH/FVw6U61Xt8
yNa7XWl/lE46oEvGPc74Ntw0HmS95SXWzWlfy5RXnG2dhkd8yWgH+IjfylNe
Lg+ubXvtj9gO97T0+uGyxKvbdan7Bcv55V28We3dBSc+dbh4dR963Fm/nn+I
B8srD/Ej7m3u9qVsJa/xtEy3vG5+r+Pj533beae+4K7ecR/TGN+bhrXGB6d9
PGXsp5/jA5cah7ButXuNF/g1OLspv+FyrVUnxvc/8/3cx3mmrqv7hEu8c3lf
cYP6hO965LTEMazXdr5lMiuEL7qv8UWjXfZ0yfF4qPW1TBdsKJqZ/zg+vu62
2mLbu2nBNp221G1x+7o0p65suC+jGQZtnHumtRjTa4aFwGXFR2kufvknHFle
pthzacBv1hGLqYvDjz1rH6aBww8M5RW7fH2sthV/+XMzIH7j/hB751x5EHOy
Je1feDKDgEX/nktk6XmTYGJr5VFzS9+veOG9b69YzbB9czz58A5nk5ebb5LY
LvXOpc1XcTCxi1ZeSNvT/h042VffQ3+Kj9R+7zZ86KpLsFW/q7GzznadcAsT
jYYd1Qs8zBW3zr7Kv7mLd7/t60YrYg/cvM15Cfs2cUf3O26//fRlsQUc66vv
F9+Qv4tToMlPE3bIKU7G9qlt2niY+jjzP/DWvK50HVl3n/Z8u+NI7CPxwPY/
1upaNqzhdzDdcH2rbzee4Udsadju7V7jXzsTbuiFC3xLWhC+wWjnykBbi6Vr
J7YPvMJjXbme92V5+rlP8b3nstjbvqjSzSxFOg0000Um5hP+eYkfeKFdW8wt
hNXo0lDsUk8lxVl9xYqo5+0uN2qniJU4Ltzwdc30aD035bb5ZfIv+N+5qzIu
n53jjFtxPvv1jx2ReLvPvln8m3/9Nf72f8OfpIIL1bkj/Rvu+tnuNPZdbLeh
dPj+vmZ4tvc/84cHWMt8C6dHezxq9fjCjVPEZs7YbeN42nZ8zSct8VvpM0z3
fHU35I/2qefKjnUVd0drd/Pdgk3WhVuObZzdWPm5Tcev+iKP33qJz7gRXOl3
cQ3fsI36euJCudq9WGGUy9Tph83e/Wtc2QzPYrZpXxLOf59sveL4z3bYsKQw
9bhgn97pmviZwizZudh2XlYuT1sjOLArf+CUu+Sm3B+7c3UP6t81jwwNBgQQ
fYXX/cTVlhNts5kI3JMuL4m3MpWR12qo8FBDoic417j/+W22axqGF67Odqs5
hHB1uKq9HTkX4IWL6IbD7Osw+PWNm2bOA6ukLvBst2ZWOvn2s31b/MiWu+tU
h2pe/U/xm3brChdgXJuwVNuSpjXhjsfKKXOOxcEQaMCltds27L0vhlgr2WzY
7+KIcMbvP8brl1pxy5ayvq7cbW6JYGA3+3U4NvOrC4ytHdS4xk/8ttvCiksE
A8Yd0lXaYN8R8AyTTjpcG7baSudZVqyqy5IT3vNjiT/4bTdbYX4xIv2ERZqb
fTxZEBNXIG3mda8Z7rDesRHsMnGRIYyRDx8yfuRXdxC4ZHLIFnrTteUTr6EH
OP6X4dLgUF6w732Nc1lOk3/kD3EO9b5duV9pRHEjMm/DMvJkq8WWftM96LBj
2mi1L1W37LwPtD3XbFfWV9qNceit5Lsi0O+Z9jvuBhfUwCTjfEYsYt5/91/4
D+KJAkk7Uv++3oIP/mbviyy+2MICxCO25WyP4pre08Ztdatlxuqr5qYKd9/P
Lx8U6d50WF0uN7ixly8MYezTf4n3LnaN7OL3XB3l5j+PA57ssu/4O57VUO0g
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
wIf/89/beB7zdfzv//v/AYB1arbml5H1
             "]], 10000]], "SplitPattern" -> 
         NeuralNetworks`ValidatedParameter[WordBoundary], "IgnoreCase" -> 
         True, "TargetLength" -> All, "Count" -> 10001, "$TargetLength" -> 
         10001, "$Version" -> "13.3.0"|>, 
        NeuralNetworks`TensorT[{10001}, 
         NeuralNetworks`IndexIntegerT[1, 10001]]]|>, 
    "Outputs" -> <|
     "Output" -> NetDecoder[
       "Class", <|
        "Labels" -> {"spam", "ham"}, "InputDepth" -> 1, "Multilabel" -> False,
          "Dimensions" -> 2, "$Rank" -> 0, "$Version" -> "13.3.0"|>, 
        NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]|>|>, <|
   "Version" -> "13.3.0", "Unstable" -> False|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.9000815501088333`*^9, {3.900081771558567*^9, 3.9000817797224503`*^9}, 
   3.9000818854902334`*^9, 3.9000828243843465`*^9},
 CellLabel->
  "Out[144]=",ExpressionUUID->"ecd087e1-967c-4bd6-b3ed-d60bbf4c1074"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"iNet", "=", 
   RowBox[{"NetInitialize", "[", "uNet", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"tNet", "=", 
    RowBox[{"NetGraph", "[", 
     RowBox[{
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<MyNet\>\"", "->", "iNet"}], ",", 
        RowBox[{"\"\<loss\>\"", "->", 
         RowBox[{"CrossEntropyLossLayer", "[", "\"\<Index\>\"", "]"}]}]}], 
       "|>"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], "->", 
         RowBox[{"\"\<MyNet\>\"", "->", 
          RowBox[{"NetPort", "[", 
           RowBox[{"\"\<loss\>\"", ",", "\"\<Input\>\""}], "]"}]}]}], ",", 
        RowBox[{
         RowBox[{"NetPort", "[", "\"\<Target\>\"", "]"}], "->", 
         RowBox[{"NetPort", "[", 
          RowBox[{"\"\<loss\>\"", ",", "\"\<Target\>\""}], "]"}]}]}], "}"}]}],
      "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"trainAssoc", "=", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<Input\>\"", "->", 
      RowBox[{"Keys", "[", "trainingData", "]"}]}], ",", 
     RowBox[{"\"\<Target\>\"", "->", 
      RowBox[{"Values", "[", "trainingData", "]"}]}]}], "|>"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"testAssoc", "=", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Input\>\"", "->", 
       RowBox[{"Keys", "[", "testData", "]"}]}], ",", 
      RowBox[{"\"\<Target\>\"", "->", 
       RowBox[{"Values", "[", "testData", "]"}]}]}], "|>"}]}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"results", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"tNet", ",", "trainAssoc", ",", "All", ",", 
    RowBox[{"ValidationSet", "->", "testAssoc"}], ",", 
    RowBox[{"MaxTrainingRounds", "->", "2"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.900080660171753*^9, 3.900080664062343*^9}, {
  3.9000812359206085`*^9, 3.9000812361201077`*^9}, {3.9000817342269435`*^9, 
  3.9000817344903903`*^9}, {3.9000819966607866`*^9, 3.9000819986561403`*^9}, {
  3.9000820624276485`*^9, 3.9000820646164637`*^9}, {3.900082293925476*^9, 
  3.9000822965750484`*^9}, {3.900082336061793*^9, 3.9000823361909723`*^9}},
 CellLabel->
  "In[145]:=",ExpressionUUID->"73641588-9d9f-485c-9656-e000f1cf4e77"],

Cell[BoxData[
 TemplateBox[{
  "Part", "partd", 
   "\"Part specification \\!\\(\\*RowBox[{\\\"None\\\", \\\"\
\[LeftDoubleBracket]\\\", \\\"1\\\", \\\"\[RightDoubleBracket]\\\"}]\\) is \
longer than depth of object.\"", 2, 149, 80, 28097361292684919691, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.9000819939735966`*^9, 3.9000819996036773`*^9}, 
   3.9000820655786552`*^9, {3.9000823005849276`*^9, 3.9000823385652313`*^9}, 
   3.900082827244377*^9},
 CellLabel->
  "During evaluation of \
In[145]:=",ExpressionUUID->"de68463f-567e-481a-aa62-39c4ed14ad3f"],

Cell[BoxData[
 TemplateBox[{
  "NetTrain", "skipbatch", 
   "\"Batch #\\!\\(\\*RowBox[{\\\"1\\\"}]\\) will be skipped, because one or \
or more inputs provided to port \\\"\\!\\(\\*RowBox[{\\\"\\\\\\\"Target\\\\\\\
\"\\\"}]\\)\\\" was invalid: \\!\\(\\*RowBox[{\\\"\\\\\\\"input is not an \
integer between 1 and 2\\\\\\\"\\\"}]\\). This batch will be ignored in \
subsequent training rounds. More information can be obtained via the \
\\\"SkippedTrainingData\\\" property.\"", 2, 149, 81, 28097361292684919691, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.9000819939735966`*^9, 3.9000819996036773`*^9}, 
   3.9000820655786552`*^9, {3.9000823005849276`*^9, 3.9000823385652313`*^9}, 
   3.9000828272523966`*^9},
 CellLabel->
  "During evaluation of \
In[145]:=",ExpressionUUID->"d47dd3c7-7b56-41fe-a35e-3a3e31ea1f89"],

Cell[BoxData[
 TemplateBox[{
  "Part", "partd", 
   "\"Part specification \\!\\(\\*RowBox[{\\\"None\\\", \\\"\
\[LeftDoubleBracket]\\\", \\\"2\\\", \\\"\[RightDoubleBracket]\\\"}]\\) is \
longer than depth of object.\"", 2, 149, 82, 28097361292684919691, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.9000819939735966`*^9, 3.9000819996036773`*^9}, 
   3.9000820655786552`*^9, {3.9000823005849276`*^9, 3.9000823385652313`*^9}, 
   3.9000828273018312`*^9},
 CellLabel->
  "During evaluation of \
In[145]:=",ExpressionUUID->"4694acee-5af7-41b6-93da-4ead3ccccf8c"],

Cell[BoxData[
 TemplateBox[{
  "NetTrain", "skipbatch", 
   "\"Batch #\\!\\(\\*RowBox[{\\\"2\\\"}]\\) will be skipped, because one or \
or more inputs provided to port \\\"\\!\\(\\*RowBox[{\\\"\\\\\\\"Target\\\\\\\
\"\\\"}]\\)\\\" was invalid: \\!\\(\\*RowBox[{\\\"\\\\\\\"input is not an \
integer between 1 and 2\\\\\\\"\\\"}]\\). This batch will be ignored in \
subsequent training rounds. More information can be obtained via the \
\\\"SkippedTrainingData\\\" property.\"", 2, 149, 83, 28097361292684919691, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.9000819939735966`*^9, 3.9000819996036773`*^9}, 
   3.9000820655786552`*^9, {3.9000823005849276`*^9, 3.9000823385652313`*^9}, 
   3.9000828273128605`*^9},
 CellLabel->
  "During evaluation of \
In[145]:=",ExpressionUUID->"d1e6229a-81a5-4eec-8c87-95fb7a5ee0bf"],

Cell[BoxData[
 TemplateBox[{
  "Part", "partd", 
   "\"Part specification \\!\\(\\*RowBox[{\\\"None\\\", \\\"\
\[LeftDoubleBracket]\\\", \\\"3\\\", \\\"\[RightDoubleBracket]\\\"}]\\) is \
longer than depth of object.\"", 2, 149, 84, 28097361292684919691, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.9000819939735966`*^9, 3.9000819996036773`*^9}, 
   3.9000820655786552`*^9, {3.9000823005849276`*^9, 3.9000823385652313`*^9}, 
   3.900082827359583*^9},
 CellLabel->
  "During evaluation of \
In[145]:=",ExpressionUUID->"1ff519cb-316a-443f-97ba-3c7c6163d51c"],

Cell[BoxData[
 TemplateBox[{
  "General", "stop", 
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"Part\\\", \\\"::\\\", \
\\\"partd\\\"}], \\\"MessageName\\\"]\\) will be suppressed during this \
calculation.\"", 2, 149, 85, 28097361292684919691, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.9000819939735966`*^9, 3.9000819996036773`*^9}, 
   3.9000820655786552`*^9, {3.9000823005849276`*^9, 3.9000823385652313`*^9}, 
   3.900082827382143*^9},
 CellLabel->
  "During evaluation of \
In[145]:=",ExpressionUUID->"2b96dc5a-dcfd-4498-a964-0ac1a94a69f1"],

Cell[BoxData[
 TemplateBox[{
  "NetTrain", "skipbatch", 
   "\"Batch #\\!\\(\\*RowBox[{\\\"3\\\"}]\\) will be skipped, because one or \
or more inputs provided to port \\\"\\!\\(\\*RowBox[{\\\"\\\\\\\"Target\\\\\\\
\"\\\"}]\\)\\\" was invalid: \\!\\(\\*RowBox[{\\\"\\\\\\\"input is not an \
integer between 1 and 2\\\\\\\"\\\"}]\\). This batch will be ignored in \
subsequent training rounds. More information can be obtained via the \
\\\"SkippedTrainingData\\\" property.\"", 2, 149, 86, 28097361292684919691, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.9000819939735966`*^9, 3.9000819996036773`*^9}, 
   3.9000820655786552`*^9, {3.9000823005849276`*^9, 3.9000823385652313`*^9}, 
   3.900082827388737*^9},
 CellLabel->
  "During evaluation of \
In[145]:=",ExpressionUUID->"d675ba12-a96a-4f0a-a601-31409e93e0e1"],

Cell[BoxData[
 TemplateBox[{
  "General", "stop", 
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"NetTrain\\\", \
\\\"::\\\", \\\"skipbatch\\\"}], \\\"MessageName\\\"]\\) will be suppressed \
during this calculation.\"", 2, 149, 87, 28097361292684919691, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.9000819939735966`*^9, 3.9000819996036773`*^9}, 
   3.9000820655786552`*^9, {3.9000823005849276`*^9, 3.9000823385652313`*^9}, 
   3.9000828273957553`*^9},
 CellLabel->
  "During evaluation of \
In[145]:=",ExpressionUUID->"ba281d56-ea46-42f6-ba75-220e07a5d25e"],

Cell[BoxData[
 TemplateBox[{
  "NetTrain", "encgenfail1", 
   "\"Could not encode \\!\\(\\*RowBox[{\\\"\\\\\\\"validation \\\\\\\"\\\"}]\
\\)input number \\!\\(\\*RowBox[{\\\"1\\\"}]\\) for port \
\\\"\\!\\(\\*RowBox[{\\\"\\\\\\\"Target\\\\\\\"\\\"}]\\)\\\": \
\\!\\(\\*RowBox[{\\\"\\\\\\\"input is not an integer between 1 and \
2\\\\\\\"\\\"}]\\). Please check the example.\"", 2, 149, 88, 
   28097361292684919691, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.9000819939735966`*^9, 3.9000819996036773`*^9}, 
   3.9000820655786552`*^9, {3.9000823005849276`*^9, 3.9000823385652313`*^9}, 
   3.9000828303144684`*^9},
 CellLabel->
  "During evaluation of \
In[145]:=",ExpressionUUID->"87c70f1c-fcaf-48ad-9016-f3cdc0c12333"],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{{3.9000819939826202`*^9, 3.9000820026529207`*^9}, 
   3.9000820687336426`*^9, {3.900082303903364*^9, 3.9000823416050863`*^9}, 
   3.900082830321382*^9},
 CellLabel->
  "Out[149]=",ExpressionUUID->"230ab498-b801-4085-b1d8-9fe4d6d87b0a"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"tdNet", "=", 
   RowBox[{"NetExtract", "[", 
    RowBox[{
     RowBox[{"results", "[", "\"\<TrainedNet\>\"", "]"}], ",", 
     "\"\<MyNet\>\""}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"tdNet", "=", 
   RowBox[{"NetReplacePart", "[", 
    RowBox[{"tdNet", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<Input\>\"", "->", "mnistEncoder"}], ",", 
       RowBox[{"\"\<Output\>\"", "->", "mnistDecoder"}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"measurements", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"tdNet", ",", "testData"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.900080549442226*^9, 3.9000805496996627`*^9}},
 CellLabel->"",ExpressionUUID->"f938da2b-f870-40b8-a0e9-78407586cb55"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Union", "@", 
    RowBox[{"Values", "[", "trainAssoc", "]"}]}], "\n", 
   RowBox[{"Union", "@", 
    RowBox[{"Values", "[", "testAssoc", "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.900082416709886*^9, 3.9000824169702044`*^9}, {
  3.9000826282400875`*^9, 
  3.9000826330463448`*^9}},ExpressionUUID->"32f62ec4-ad82-4e26-832c-\
a5d7ea7a4230"],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{3.9000824175588303`*^9, 3.900082613577381*^9},
 CellLabel->
  "Out[125]=",ExpressionUUID->"4d3960f4-8e6e-483a-ba08-d79288296511"],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{3.9000824175588303`*^9, 3.900082667703291*^9},
 CellLabel->
  "Out[126]=",ExpressionUUID->"e6ee1204-d386-4284-ae5b-40a2dc88c4bc"]
}, Open  ]]
},
WindowSize->{950.25, 522.75},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
Magnification:>0.9 Inherited,
FrontEndVersion->"13.3 for Microsoft Windows (64-bit) (June 3, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"feaf7ae2-cc2f-42dc-95b1-c203ad191843"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 2651, 72, 283, "Input",ExpressionUUID->"1bb2796d-19f7-43b2-ac04-ac80ca1d7e9f"],
Cell[3212, 94, 2370, 71, 180, "Input",ExpressionUUID->"3bdf23b7-8f6e-4fb8-b4fb-792f1d46bd07"],
Cell[CellGroupData[{
Cell[5607, 169, 1117, 25, 77, "Input",ExpressionUUID->"10c131b1-3d92-40e4-9199-78b713e3bf5e"],
Cell[6727, 196, 69280, 1174, 57, "Output",ExpressionUUID->"67374167-987d-499a-82a2-65f586aacaf0"],
Cell[76010, 1372, 6183, 131, 57, "Output",ExpressionUUID->"608a7a92-16e3-4c2f-bc82-d01e6ed68e1e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[82230, 1508, 1262, 25, 163, "Input",ExpressionUUID->"0b54d548-43a2-4e5b-baef-fed4831df365"],
Cell[83495, 1535, 94117, 1673, 57, "Output",ExpressionUUID->"ecd087e1-967c-4bd6-b3ed-d60bbf4c1074"]
}, Open  ]],
Cell[CellGroupData[{
Cell[177649, 3213, 2321, 57, 163, "Input",ExpressionUUID->"73641588-9d9f-485c-9656-e000f1cf4e77"],
Cell[179973, 3272, 585, 12, 26, "Message",ExpressionUUID->"de68463f-567e-481a-aa62-39c4ed14ad3f"],
Cell[180561, 3286, 848, 16, 43, "Message",ExpressionUUID->"d47dd3c7-7b56-41fe-a35e-3a3e31ea1f89"],
Cell[181412, 3304, 587, 12, 26, "Message",ExpressionUUID->"4694acee-5af7-41b6-93da-4ead3ccccf8c"],
Cell[182002, 3318, 848, 16, 43, "Message",ExpressionUUID->"d1e6229a-81a5-4eec-8c87-95fb7a5ee0bf"],
Cell[182853, 3336, 585, 12, 26, "Message",ExpressionUUID->"1ff519cb-316a-443f-97ba-3c7c6163d51c"],
Cell[183441, 3350, 584, 12, 26, "Message",ExpressionUUID->"2b96dc5a-dcfd-4498-a964-0ac1a94a69f1"],
Cell[184028, 3364, 846, 16, 43, "Message",ExpressionUUID->"d675ba12-a96a-4f0a-a601-31409e93e0e1"],
Cell[184877, 3382, 594, 12, 26, "Message",ExpressionUUID->"ba281d56-ea46-42f6-ba75-220e07a5d25e"],
Cell[185474, 3396, 750, 15, 26, "Message",ExpressionUUID->"87c70f1c-fcaf-48ad-9016-f3cdc0c12333"],
Cell[186227, 3413, 289, 5, 28, "Output",ExpressionUUID->"230ab498-b801-4085-b1d8-9fe4d6d87b0a"]
}, Open  ]],
Cell[186531, 3421, 779, 20, 60, "Input",ExpressionUUID->"f938da2b-f870-40b8-a0e9-78407586cb55"],
Cell[CellGroupData[{
Cell[187335, 3445, 410, 10, 60, "Input",ExpressionUUID->"32f62ec4-ad82-4e26-832c-a5d7ea7a4230"],
Cell[187748, 3457, 184, 3, 28, "Output",ExpressionUUID->"4d3960f4-8e6e-483a-ba08-d79288296511"],
Cell[187935, 3462, 184, 3, 28, "Output",ExpressionUUID->"e6ee1204-d386-4284-ae5b-40a2dc88c4bc"]
}, Open  ]]
}
]
*)

